// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, Module, Utils, ZI_CONFIG, Zing, colors, encoder, fs, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  fs = require('fs');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  ZI_CONFIG = {
    table: {
      Songs: "ZISongs",
      Albums: "ZIAlbums",
      Songs_Albums: "ZISongs_Albums",
      Artists: "ZIArtists",
      Videos: "ZIVideos"
    },
    logPath: "./log/ZILog.txt"
  };

  Zing = (function(_super) {

    __extends(Zing, _super);

    function Zing(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : ZI_CONFIG;
      this.updateAlbumsWithRange = __bind(this.updateAlbumsWithRange, this);

      this.updateSongsWithRange = __bind(this.updateSongsWithRange, this);

      this.testPattern = __bind(this.testPattern, this);

      this.updateSongsLyrics = __bind(this.updateSongsLyrics, this);

      this.updateSongsStatsAndLyrics = __bind(this.updateSongsStatsAndLyrics, this);

      this.fetchArtist = __bind(this.fetchArtist, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoZISongs: "INSERT IGNORE INTO " + this.table.Songs + " SET ?",
        _insertIntoZIAlbums: "INSERT INTO " + this.table.Albums + " SET ?",
        _insertIntoZISongs_Albums: "INSERT IGNORE INTO " + this.table.Songs_Albums + " SET ?",
        _insertIntoZIArtists: "INSERT IGNORE INTO " + this.table.Artists + " SET ?",
        _insertIntoZIVideos: "INSERT IGNORE INTO " + this.table.Videos + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      Zing.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Zing.prototype.createTables = function() {
      var artistsQuery, artistsVideos, songsQuery, _query,
        _this = this;
      this.connect();
      songsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Songs + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					albumid varchar(100),					album_encodedId varchar(255),					album_name varchar(255),					album_thumbnail varchar(300),					album_artist varchar(255),					song_name varchar(255),					song_artist varchar(255),					song_link varchar(255)					);";
      artistsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Artists + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					name varchar(100),					real_name varchar(100),					dateofbirth varchar(100),					publisher varchar(50),					country varchar(300),					topic varchar(255),					description text					);";
      artistsVideos = "CREATE TABLE IF NOT EXISTS " + this.table.Videos + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					videoid varchar(150),					video_encodedId varchar(150),					title varchar(150),					artist varchar(100),					video_artist varchar(100),					thumbnail varchar(255),					topic varchar(150),					plays int,					link varchar(300)					);";
      _query = songsQuery + artistsQuery + artistsVideos;
      return this.connection.query(_query, function(err, result) {
        if (err) {
          console.log("Cannot create table");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been created!");
        }
        return _this.end();
      });
    };

    Zing.prototype.resetTables = function() {
      var songsQuery,
        _this = this;
      this.connect();
      songsQuery = "truncate table " + this.table.Songs + " ;";
      return this.connection.query(songsQuery, function(err, result) {
        if (err) {
          console.log("Cannot truncate tables");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been truncated!");
        }
        return _this.end();
      });
    };

    Zing.prototype.encryptId = function(id) {
      var a;
      a = "GHmn|LZk|DFbv|BVd|ASlz|QWp|ghXC|Nas|Jcx|ERui|Tty".split("|");
      return [1, 0, 8, 0, 10].concat((id - 307843200 + '').split(''), [10, 1, 2, 8, 10, 2, 0, 1, 0]).map(function(i) {
        return a[i][Math.random() * a[i].length | 0];
      }).join('');
    };

    Zing.prototype._convertToInt = function(id) {
      var a, b;
      a = "0IWOUZ6789ABCDEF".split('');
      b = "0123456789ABCDEF";
      return parseInt(id.split('').map(function(v) {
        return b[a.indexOf(v)];
      }).join(''), 16);
    };

    Zing.prototype._convertToId = function(i) {
      var a, b;
      a = "0IWOUZ6789ABCDEF".split('');
      b = "0123456789abcdef";
      return i.toString(16).split('').map(function(v) {
        return a[b.indexOf(v)];
      }).join('');
    };

    Zing.prototype._decodeString = function(str) {
      var additionalFactor, base24, c_x3, c_x4, c_y1, c_y2, c_y3, category, charCode, i, n, s, s1, x1x2, x3, x4, _i, _ref;
      s = ["IJKLMNOPQRSTUVWXYZabcdef", "CDEFGHSTUVWXijklmnyz0123"];
      base24 = "0123456789abcdefghijklmn";
      s1 = "AEIMQUYcgkosw048".split('');
      category = "";
      charCode = function(x) {
        return x.charCodeAt(0);
      };
      x1x2 = str.substr(0, 2).split('').map(function(v, i) {
        return base24[s[i].indexOf(v)];
      }).join('');
      n = parseInt(x1x2, 24);
      x3 = str[2];
      x4 = str[3];
      c_x3 = charCode(x3);
      c_x4 = charCode(x4);
      for (i = _i = 0, _ref = s1.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((56 <= c_x3 && c_x3 <= 57)) {
          if (c_x3 === 56) {
            category = "typeA";
          } else {
            category = "typeB";
          }
          additionalFactor = s1.indexOf("8");
          break;
        } else if ((charCode(s1[i]) <= c_x3 && c_x3 < charCode(s1[i + 1]))) {
          additionalFactor = s1.indexOf(s1[i]);
          if (c_x3 === charCode(s1[i])) {
            category = "typeA";
          } else {
            if (c_x3 === charCode(s1[i]) + 1) {
              category = "typeB";
            } else {
              category = "typeC";
            }
          }
        }
      }
      c_y2 = (n % 6 + 2) * 16 + additionalFactor;
      c_y1 = Math.floor(n / 6) + 32;
      c_y3 = "";
      if (category === "typeA") {
        if ((103 <= c_x4 && c_x4 <= 122)) {
          c_y3 = c_x4 - 103 + 32;
        }
        if ((48 <= c_x4 && c_x4 <= 57)) {
          c_y3 = c_x4 + 4;
        }
      } else {
        if (category === "typeB") {
          if ((65 <= c_x4 && c_x4 <= 90)) {
            c_y3 = c_x4 - 1;
          } else if ((97 <= c_x4 && c_x4 <= 122)) {
            c_y3 = c_x4 - 7;
          } else if ((48 <= c_x4 && c_x4 <= 57)) {
            c_y3 = c_x4 + 68;
          }
        } else {
          c_y3 = 63;
        }
      }
      return [String.fromCharCode(c_y1), String.fromCharCode(c_y2), String.fromCharCode(c_y3)].join('');
    };

    /**
    	 * update a field in table
    	 * params = 
    	 * 		sourceField
    	 * 		table
    	 * 		limit (optional)
    */


    Zing.prototype._getFieldFromTable = function(params, callback) {
      var _q,
        _this = this;
      this.params = params;
      _q = "Select " + this.params.sourceField + " from " + this.params.table;
      if (this.params.limit) {
        _q += " LIMIT " + this.params.limit;
      }
      return this.connection.query(_q, function(err, results) {
        var result, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          _results.push((function(result) {
            return callback(result[_this.params.sourceField]);
          })(result));
        }
        return _results;
      });
    };

    Zing.prototype._getFileByHTTP = function(link, callback) {
      var _this = this;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        if (res.statusCode !== 302) {
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            return callback(data);
          });
        } else {
          return callback(null);
        }
      }).on('error', function(e) {
        return console.log("Cannot get file. ERROR: " + e.message);
      });
    };

    Zing.prototype._storeSong = function(songs, songs_albums) {
      var index, song, _i, _len, _results,
        _this = this;
      try {
        _results = [];
        for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
          song = songs[index];
          _results.push((function(song, index) {
            var created, i, path, testArr, _j, _ref, _ref1, _song, _str;
            _song = {
              sid: songs_albums.sids[index],
              songid: _this._convertToId(songs_albums.sids[index]),
              song_name: encoder.htmlDecode(song.title[0].trim()),
              song_artist: encoder.htmlDecode(song.performer[0].trim()),
              song_link: song.source[0]
            };
            _str = _song.song_link.replace(/^.+load-song\//g, '').replace(/^.+song-load\//g, '');
            testArr = [];
            for (i = _j = 0, _ref = _str.length - 1; _j <= _ref; i = _j += 4) {
              testArr.push(_this._decodeString(_str.slice(i, i + 4)));
            }
            path = decodeURIComponent(testArr.join('').match(/.+mp3/g));
            created = (_ref1 = path.match(/^\d{4}\/\d{2}\/\d{2}/)) != null ? _ref1[0].replace(/\//g, "-") : void 0;
            _song.path = path;
            _song.created = created;
            return _this.connection.query(_this.query._insertIntoZISongs, _song, function(err) {
              var _item, _tempSong;
              if (err) {
                return console.log("Cannot insert song " + _song.songid + ": ERROR: " + err);
              } else {
                _item = {
                  aid: songs_albums.aid,
                  sid: _song.sid
                };
                _tempSong = {
                  sid: _song.sid
                };
                _this._updateLyric(_tempSong);
                return _this.connection.query(_this.query._insertIntoZISongs_Albums, _item, function(err) {
                  if (err) {
                    return console.log("Cannot insert new record into Songs_Albums. ERROR: " + err);
                  }
                });
              }
            });
          })(song, index));
        }
        return _results;
      } catch (e) {
        return console.log(("ERROR while storing songs of Album: " + songs_albums.aid + ". ERROR: " + e).red);
      }
    };

    Zing.prototype._updateLyric = function(song) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/ajax/lyrics/lyrics?from=0&id=" + (this._convertToId(song.sid)) + "&callback=";
      return this._getFileByHTTP(link, function(data) {
        var arr, bbb, index, str, t, zeroCount, _u;
        try {
          if (data !== null) {
            str = JSON.parse(data).html;
            arr = str.split(/oLyric/g);
            bbb = arr.map(function(v) {
              var _ref, _ref1;
              v = (_ref = v.match(/score\">\d+<\/span>/g)) != null ? (_ref1 = _ref[0].match(/\d+/g)) != null ? _ref1[0] : void 0 : void 0;
              if (v !== void 0) {
                return parseInt(v, 10);
              } else {
                return 0;
              }
            });
            zeroCount = 0;
            bbb.map(function(v) {
              if (v === 0) {
                return zeroCount += 1;
              }
            });
            index = bbb.indexOf(Math.max.apply(Math, bbb));
            if (zeroCount === bbb.length) {
              index = bbb.length - 1;
            }
            t = JSON.stringify(arr[index]).replace(/^.+<\/span><\/span>/g, '').replace(/<\/div>.+$/g, '').replace(/<\/p>\\r\\n\\t/g, '').replace(/^\\r\\n\\t\\t\\t/g, '').replace(/\\r/g, '').replace(/\\t/g, '').replace(/\\n/g, '').replace(/\\"/g, '"');
            if (t.search("Hiện chưa có lời bài hát") > -1) {
              t = "";
            }
            t = encoder.htmlDecode(t);
            _u = "UPDATE " + _this.table.Songs + " SET lyric=" + (_this.connection.escape(t)) + " where sid=" + song.sid;
            return _this.connection.query(_u, function(err) {
              if (err) {
                return console.log("Cannt update lyric " + song.sid);
              }
            });
          } else {
            return console.log("FAILED WHILE UPDATING LYRICS");
          }
        } catch (e) {
          return console.log("FAILED WHILE UPDATING LYRICS 2");
        }
      });
    };

    Zing.prototype._fetchArtistVideo = function(artistName, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = "http://mp3.zing.vn/nghe-si/" + artistName + "/video-clip?p=" + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var p, totalPage, video, videos, _i, _j, _len, _t, _temp, _video;
          _this.stats.totalItemCount += 1;
          if (res.statusCode !== 302 && res.statusCode !== 400) {
            if (data.match(/Hiện\schưa\scó\svideo\snào/g) === null) {
              try {
                videos = data.match(/new-video-img.+/g);
                _this.stats.passedItemCount += 1;
                for (_i = 0, _len = videos.length; _i < _len; _i++) {
                  video = videos[_i];
                  _video = {
                    artist: artistName
                  };
                  if (video.match(/\/[0-9a-zA-Z]+\.html/g)) {
                    _video.videoid = video.match(/\/[0-9a-zA-Z]+\.html/g)[0].replace(/\//g, '').replace(/\.html/g, '');
                  } else {
                    _video.videoid = "";
                  }
                  if (video.match(/title\=\".+\"\>\<img/g)) {
                    _temp = video.match(/title\=\".+\"\>\<img/g)[0].replace(/title\=\"/g, '').replace(/\"\>\<img/g, '');
                    if (_temp.match(/\s-\s/g)) {
                      _temp = _temp.split(' - ');
                      if (_temp.length > 1) {
                        _t = encoder.htmlDecode(_temp[_temp.length - 1]);
                        _video.video_artist = JSON.stringify(_t.split(','));
                        _temp.pop();
                      } else {
                        _video.video_artist = "";
                      }
                      _video.title = encoder.htmlDecode(_temp.join(' - '));
                    }
                  } else {
                    _video.title = "";
                  }
                  if (video.match(/src\=\".+/g)) {
                    _video.thumbnail = video.match(/src\=\".+/g)[0].replace(/src\=\"/g, '').replace(/\"\>\<\/a\>/g, '');
                  } else {
                    _video.thumbnail = "";
                  }
                  _this._fetchVideo(_video);
                }
                if (page === 1) {
                  if (data.match(/Trang\s\d.+/g)) {
                    totalPage = data.match(/Trang\s\d.+/g).length;
                  } else {
                    totalPage = 1;
                  }
                  if (totalPage > 1) {
                    for (p = _j = 2; 2 <= totalPage ? _j <= totalPage : _j >= totalPage; p = 2 <= totalPage ? ++_j : --_j) {
                      _this._fetchArtistVideo(artistName, p);
                    }
                  }
                }
                data = "";
              } catch (e) {
                ("ERROR at artist: " + artistName).red;
              }
            } else {
              _this.stats.failedItemCount += 1;
            }
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._fetchArtist = function(artistName, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = "http://mp3.zing.vn/nghe-si/" + artistName + "/album?p=" + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, p, totalPage, _album, _i, _j, _len;
          _this.stats.totalItemCount += 1;
          if (res.statusCode !== 302 && res.statusCode !== 400) {
            if (data.match(/Hiện\schưa\scó\salbum\snào/g) === null) {
              try {
                albums = data.match(/new-album-img.+/g);
                _this.stats.passedItemCount += 1;
                for (_i = 0, _len = albums.length; _i < _len; _i++) {
                  album = albums[_i];
                  _album = {
                    artistName: artistName,
                    id: album.match(/\/[0-9a-zA-Z]+\.html/g)[0].replace(/\//g, '').replace(/\.html/g, ''),
                    title: album.match(/title\=\".+\"\>\<img/g)[0].replace(/title\=\"/g, '').replace(/\"\>\<img/g, ''),
                    thumbnail: album.match(/src\=\".+/g)[0].replace(/src\=\"/g, '').replace(/\"\>\<\/a\>/g, '')
                  };
                  _this._fetchAlbum(_album);
                }
                if (page === 1) {
                  if (data.match(/Trang\s\d.+/g)) {
                    totalPage = data.match(/Trang\s\d.+/g).length;
                  } else {
                    totalPage = 1;
                  }
                  if (totalPage > 1) {
                    for (p = _j = 2; 2 <= totalPage ? _j <= totalPage : _j >= totalPage; p = 2 <= totalPage ? ++_j : --_j) {
                      _this._fetchArtist(artistName, p);
                    }
                  }
                }
                data = "";
              } catch (e) {
                ("ERROR at artist: " + artistName).red;
              }
            } else {
              _this.stats.failedItemCount += 1;
            }
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._fetchArtistProfile = function(artistName) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/nghe-si/" + artistName + "/tieu-su";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, artist, _chunk, _chunks, _i, _j, _len, _len1, _topic, _topics;
          _this.stats.totalItemCount += 1;
          if (res.statusCode !== 302 && res.statusCode !== 400) {
            try {
              _this.stats.passedItemCount += 1;
              artist = {
                name: artistName
              };
              if (data.match(/\<li\>\<span\>Tên\sthật\:.+/g)) {
                artist.real_name = data.match(/\<li\>\<span\>Tên\sthật\:.+/g)[0].replace(/\<li\>\<span\>Tên\sthật\:|\<\/span\>|\<\/li\>/g, '').trim();
              } else {
                artist.real_name = "";
              }
              if (data.match(/\<li\>\<span\>Ngày\ssinh\:.+/g)) {
                artist.dateofbirth = data.match(/\<li\>\<span\>Ngày\ssinh\:.+/g)[0].replace(/\<li\>\<span\>Ngày\ssinh\:|\<\/span\>|\<\/li\>/g, '').trim().split('/').reverse().join('-');
              } else {
                artist.dateofbirth = "";
              }
              if (data.match(/Công\sty\sđại\sdiện\:.+/)) {
                artist.publisher = data.match(/Công\sty\sđại\sdiện\:.+/)[0].replace(/Công\sty\sđại\sdiện\:|\<\/span\>|\<\/p\>/g, '').trim();
              } else {
                artist.publisher = '';
              }
              if (data.match(/\<li\>\<span\>Quốc\sGia\:.+/g)) {
                artist.country = data.match(/\<li\>\<span\>Quốc\sGia\:.+/g)[0].replace(/\<li\>\<span\>Quốc\sGia\:|\<\/li\>|\<\/span\>/g, '').trim();
              } else {
                artist.country = '';
              }
              if (data.match(/Thể\sloại\:\<\/span\>.+/g)) {
                _topics = data.match(/Thể\sloại\:\<\/span\>.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/li\>/g, '').split(',');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                artist.topic = JSON.stringify(arr);
              } else {
                artist.topic = '';
              }
              data = data.replace(/\r|\t|\n/g, '');
              if (data.match(/Thông\stin\schi\stiết.+\<div\sclass\=\"new\-sidebar\"\>/)) {
                _chunks = data.match(/Thông\stin\schi\stiết.+\<div\sclass\=\"new\-sidebar\"\>/g)[0].replace(/Thông\stin\schi\stiết\<\/span\>\<\/p\>\<div\sclass\=\"clear\-fix\"\>\<\/div\>|\<div\sclass\=\"new\-sidebar\"\>/g, '').replace(/\<\/div\>\<\/div\>\<\/div\>/, '').split(/\<a\shref/);
                arr = [];
                for (_j = 0, _len1 = _chunks.length; _j < _len1; _j++) {
                  _chunk = _chunks[_j];
                  arr.push(_chunk.replace(/\=\"\/tim\-kiem.+\"\>|\<\/a\>|\<strong\>|\<\/strong\>/g, '').trim());
                }
                artist.description = arr.join(' ');
              }
              _this.connection.query(_this.query._insertIntoZIArtists, artist, function(err) {
                if (err) {
                  return console.log("Cannot insert artist " + artistName + " into table. Error: " + err);
                }
              });
            } catch (e) {
              ("ERROR: Cannot fetch a profile of artist: " + artistName).red;
            }
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._fetchAlbum = function(album) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + album.albumid + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _album, _q;
          _album = album;
          if (data.match(/xmlURL.+\&amp\;/g) === null) {
            return console.log(("ERROR : album " + album.albumid + ": " + album.album_name + " of " + album.album_artist + " does not exist").red);
          } else {
            _album.album_encodedId = data.match(/xmlURL.+\&amp\;/g)[0].replace(/xmlURL\=http\:\/\/mp3\.zing\.vn\/xml\/album\-xml\//g, '').replace(/\&amp\;/, '');
            _q = "update " + _this.table.Albums + " set album_encodedId=" + (_this.connection.escape(_album.album_encodedId)) + " where albumid=" + (_this.connection.escape(album.albumid));
            _this.connection.query(_this.query._insertIntoZIAlbums, _album, function(err) {
              if (err) {
                return console.log("Cannot insert into table. ERROR: " + err);
              }
            });
            _this._fetchSongs(_album);
            return data = "";
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Zing.prototype._fetchAlbumEncodedId = function(album) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + album.albumid + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _album, _q;
          _album = album;
          if (data.match(/xmlURL.+\&amp\;/g) === null) {
            console.log(("ERROR : album " + album.albumid + ": " + album.album_name + " of " + album.album_artist + " does not exist").red);
            _this.stats.passedItemCount -= 1;
            _this.stats.failedItemCount += 1;
          } else {
            _album.album_encodedId = data.match(/xmlURL.+\&amp\;/g)[0].replace(/xmlURL\=http\:\/\/mp3\.zing\.vn\/xml\/album\-xml\//g, '').replace(/\&amp\;/, '');
            _q = "update " + _this.table.Albums + " set album_encodedId=" + (_this.connection.escape(_album.album_encodedId)) + " where albumid=" + (_this.connection.escape(album.albumid));
            _this.connection.query(_this.query._insertIntoZIAlbums, _album, function(err) {
              if (err) {
                return console.log("Cannot insert into table. ERROR: " + err);
              } else {
                return _this._fetchSongs(_album);
              }
            });
            data = "";
          }
          _this.utils.printUpdateRunning(_album.albumid, _this.stats, "Fetching");
          if (_this.stats.totalItemCount === 1200) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Zing.prototype._updateAlbumStats = function(albumid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + albumid + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, arr, item, _i, _j, _len, _len1, _songid, _songids, _topic, _topics, _updateQuery;
          try {
            album = {
              id: albumid
            };
            if (data.match(/xmlURL.+\&amp\;/g) === null) {
              return console.log(("ERROR : album " + albumid + ": does not exist").red);
            } else {
              if (data.match(/Lượt\snghe\:\<\/span\>.+/g)) {
                album.plays = data.match(/Lượt\snghe\:\<\/span\>.+/g)[0].replace(/Lượt\snghe\:\<\/span\>\s|\<\/p\>|\./g, '').trim();
              } else {
                album.plays = 0;
              }
              if (data.match(/Năm\sphát\shành\:.+/g)) {
                album.released_year = data.match(/Năm\sphát\shành\:.+/g)[0].replace(/Năm\sphát\shành\:/g, '').replace(/\<\/p\>|\<\/span\>/g, '').trim();
              } else {
                album.released_year = '';
              }
              if (data.match(/Số\sbài\shát\:/g)) {
                album.nsongs = data.match(/Số\sbài\shát\:.+/g)[0].replace(/Số\sbài\shát\:|\<\/span\>\s|\<\/p\>/g, '');
              } else {
                album.nsongs = '';
              }
              if (data.match(/Thể\sloại\:/g)) {
                _topics = data.match(/Thể\sloại\:.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                album.topic = JSON.stringify(arr);
              } else {
                album.topic = '';
              }
              if (data.match(/_albumIntro\"\sclass\=\"rows2.+/g)) {
                album.description = data.match(/_albumIntro\"\sclass\=\"rows2.+/g)[0].replace(/_albumIntro.+\"\>|\<br\s\/\>|\<\/p\>/g, '');
              }
              if (data.match(/_divPlsLite.+\"\sclass/g)) {
                arr = [];
                _songids = data.match(/_divPlsLite.+\"\sclass/g);
                for (_j = 0, _len1 = _songids.length; _j < _len1; _j++) {
                  _songid = _songids[_j];
                  arr.push(_songid.replace(/_divPlsLite|\"\sclass/g, ''));
                }
                item = {
                  albumid: albumid,
                  songids: arr
                };
              } else {
                album.description = "";
              }
              data = "";
              _this._updateSongIds(item);
              _updateQuery = ("UPDATE " + _this.table.Albums + " set plays=" + (_this.connection.escape(album.plays)) + ",") + ("released_year=" + (_this.connection.escape(album.released_year)) + ",") + ("nsongs=" + (_this.connection.escape(album.nsongs)) + ",") + ("topic=" + (_this.connection.escape(album.topic)) + ",") + ("description=" + (_this.connection.escape(album.description))) + (" WHERE albumid = " + (_this.connection.escape(album.id)));
              return _this.connection.query(_updateQuery, function(err) {
                if (err) {
                  return console.log(("CAN NOT update album " + album.id + ". ERROR: " + err).red);
                }
              });
            }
          } catch (e) {
            return console.log("CANNOT fetch ALBUM TOPIC: " + albumid + ". ERROR: " + e);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._fetchSongs = function(album_encodedId, songs_albums) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/xml/album-xml/" + album_encodedId;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          return _this.parser.parseString(data, function(err, result) {
            _this._storeSong(result.data.item, songs_albums);
            return data = "";
          });
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Zing.prototype._fetchVideo = function(video) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/video-clip/joke-link/" + video.videoid + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, _i, _len, _temp, _topic, _topics, _video;
          _video = video;
          try {
            if (data.match(/xmlURL.+\&amp\;/g) === null) {
              return console.log(("ERROR : video " + video.videoid + ": " + video.title + " of " + video.artist + " does not exist").red);
            } else {
              _video.video_encodedId = data.match(/xmlURL.+\&amp\;/g)[0].replace(/xmlURL\=http\:\/\/mp3\.zing\.vn\/xml\/video\-xml\//g, '').replace(/\&amp\;/, '');
              if (data.match(/Thể\sloại\:/g)) {
                _temp = data.match(/Thể\sloại\:.+/g)[0];
                _topics = _temp.split('|')[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
                _video.plays = _temp.split('|')[1].replace(/Lượt\sxem\:|\s|\<\/p\>|\./g, '');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                _video.topic = JSON.stringify(arr);
              } else {
                _video.topic = '';
              }
              return _this.connection.query(_this.query._insertIntoZIVideos, video, function(err) {
                if (err) {
                  return console.log("Cannot insert video " + video.videoid + " into table. Error: " + err);
                }
              });
            }
          } catch (e) {
            console.log("Cannot get link of video data: " + video.videoid + ". Error: " + err);
            return data = "";
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Zing.prototype._fetchVideoLink = function(video) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/xml/video-xml/" + video.video_encodedId;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          try {
            _this.stats.totalItemCount += 1;
            return _this.parser.parseString(data, function(err, result) {
              var _q;
              video.link = result.data.item[0].f480[0];
              _q = "update " + _this.table.Videos + " SET link=" + (_this.connection.escape(video.link)) + " where id=" + video.id;
              _this.stats.passedItemCount += 1;
              _this.connection.query(_q, function(err) {
                if (err) {
                  return console.log("Cannot update video " + video.videoid + " into table. Error: " + err);
                }
              });
              data = "";
              _this.utils.printUpdateRunning(video.id, _this.stats, "Fetching...");
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                return _this.utils.printFinalResult(_this.stats);
              }
            });
          } catch (e) {
            console.log("Cannot get link of video: " + video.videoid + ". Error: " + err);
            return _this.stats.failedItemCount += 1;
          }
        });
      }).on('error', function(e) {
        console.log("Got error at func: _fetchVideoLink: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._updateSongIds = function(item) {
      var _query,
        _this = this;
      try {
        _query = "select id from " + this.table.Songs + " where albumid=" + (this.connection.escape(item.albumid)) + " order by id asc";
        return this.connection.query(_query, function(err, songs) {
          var i, _i, _q, _ref, _results;
          if (err) {
            return console.log("Cannt update songids, ERROR: " + err);
          } else {
            _results = [];
            for (i = _i = 0, _ref = songs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              _q = "update " + _this.table.Songs + " set songid=" + (_this.connection.escape(item.songids[i])) + " where id=" + songs[i].id + " and albumid=" + (_this.connection.escape(item.albumid));
              _results.push(_this.connection.query(_q, function(err) {
                if (err) {
                  return console.log("CANNT UPDATE songid. ERROR: " + err);
                }
              }));
            }
            return _results;
          }
        });
      } catch (e) {
        return console.log(("CAN NOT update songids in album: " + item.albumid + ". ERROR: " + e).red);
      }
    };

    Zing.prototype._fetchAlbumTopic = function(albumid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + albumid + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, arr, item, _i, _j, _len, _len1, _songid, _songids, _topic, _topics;
          try {
            album = {
              id: albumid
            };
            _this.stats.totalItemCount += 1;
            _this.stats.currentId = albumid;
            if (data.match(/xmlURL.+\&amp\;/g) === null) {
              return console.log(("ERROR : album " + albumid + ": does not exist").red);
            } else {
              if (data.match(/Lượt\snghe\:\<\/span\>.+/g)) {
                album.plays = data.match(/Lượt\snghe\:\<\/span\>.+/g)[0].replace(/Lượt\snghe\:\<\/span\>\s|\<\/p\>|\./g, '').trim();
              } else {
                album.plays = 0;
              }
              if (data.match(/Năm\sphát\shành\:.+/g)) {
                album.released_year = data.match(/Năm\sphát\shành\:.+/g)[0].replace(/Năm\sphát\shành\:/g, '').replace(/\<\/p\>|\<\/span\>/g, '').trim();
              } else {
                album.released_year = '';
              }
              if (data.match(/Số\sbài\shát\:/g)) {
                album.nsongs = data.match(/Số\sbài\shát\:.+/g)[0].replace(/Số\sbài\shát\:|\<\/span\>\s|\<\/p\>/g, '');
              } else {
                album.nsongs = '';
              }
              if (data.match(/Thể\sloại\:/g)) {
                _topics = data.match(/Thể\sloại\:.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                album.topic = JSON.stringify(arr);
              } else {
                album.topic = '';
              }
              if (data.match(/_albumIntro\"\sclass\=\"rows2.+/g)) {
                album.description = data.match(/_albumIntro\"\sclass\=\"rows2.+/g)[0].replace(/_albumIntro.+\"\>|\<br\s\/\>|\<\/p\>/g, '');
              }
              if (data.match(/_divPlsLite.+\"\sclass/g)) {
                arr = [];
                _songids = data.match(/_divPlsLite.+\"\sclass/g);
                for (_j = 0, _len1 = _songids.length; _j < _len1; _j++) {
                  _songid = _songids[_j];
                  arr.push(_songid.replace(/_divPlsLite|\"\sclass/g, ''));
                }
                item = {
                  albumid: albumid,
                  songids: arr
                };
              } else {
                album.description = "";
              }
              data = "";
              _this.stats.passedItemCount += 1;
              _this._updateSongIds(item);
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItems === _this.stats.totalItemCount) {
                return _this.utils.printFinalResult(_this.stats);
              }
            }
          } catch (e) {
            return console.log("CANNOT fetch ALBUM TOPIC: " + albumid + ". ERROR: " + e);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype._fetchAlbumByGenre = function(link0, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = link0 + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, item, _album, _created, _i, _len, _t;
          _this.stats.totalItemCount += 1;
          if (data.match(/album\-detail\-img.+/g)) {
            albums = data.match(/album\-detail\-img.+/g);
            _this.stats.passedItemCount += 1;
            for (_i = 0, _len = albums.length; _i < _len; _i++) {
              album = albums[_i];
              _album = {
                albumid: album.match(/\/[0-9a-zA-Z]+\.html/g)[0].replace(/\//g, '').replace(/\.html/g, ''),
                album_thumbnail: album.match(/src\=\".+/g)[0].replace(/src\=\"/g, '').replace(/\/><\/a><\/span>|\"\s/g, '')
              };
              if (_album.album_thumbnail.match(/_\d+\..+$/)) {
                _t = _album.album_thumbnail.match(/_\d+\..+$/)[0].replace(/_|\..+$/, '');
                _t = new Date(parseInt(_t, 10) * 1000);
                _created = _t.getFullYear() + "-" + (_t.getMonth() + 1) + "-" + _t.getDate() + " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
                _album.created = _created;
              }
              item = album.match(/title\=\".+\"\shref/g)[0].replace(/title\=\"/g, '').replace(/\"\shref/g, '');
              _album.album_artist = item.split(' - ')[1];
              _album.album_name = item.split(' - ')[0];
              _this._fetchAlbum(_album);
              _this.connection.query(_this.query._insertIntoZIAlbums, _album, function(err) {
                if (err) {
                  return console.log("Cannot insert into table. ERROR: " + err);
                }
              });
            }
            data = "";
          } else {
            _this.stats.failedItemCount += 1;
            _this.utils.printRunning(_this.stats);
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Zing.prototype.fetchAlbumTopic = function() {
      var _query,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums topic to table: " + this.table.Songs).magenta);
      this.stats.currentTable = this.table.Songs;
      _query = "select id,albumid from ZISongs where songid='' and albumid='ZWZA70I0' group by albumid";
      this.connection.query(_query, function(err, albums) {
        var album, _i, _len, _results;
        console.log(albums.length);
        _this.stats.totalItems = albums.length;
        _results = [];
        for (_i = 0, _len = albums.length; _i < _len; _i++) {
          album = albums[_i];
          _results.push(_this._fetchAlbumTopic(album.albumid));
        }
        return _results;
      });
      return null;
    };

    Zing.prototype.fetchArtist = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log(" |" + ("Fetching artists, albums and songs to table: " + this.table.Songs).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Songs;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchArtist(name);
      }
      return null;
    };

    Zing.prototype.fetchArtistProfile = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/test/artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log(" |" + ("Fetching artists profile table: " + this.table.Artists).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Artists;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchArtistProfile(name);
      }
      return null;
    };

    Zing.prototype.fetchVideo = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/test/video_artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching videos to table: " + this.table.Artists).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Artists;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchArtistVideo(name);
      }
      return null;
    };

    Zing.prototype.fetchAlbumByGenre = function() {
      var link, link1, link2, link3, link4, page, topic, topics, _i, _j, _len;
      this.connect();
      console.log(" |" + ("Fetching artists, albums and songs by genre to table: " + this.table.Albums).magenta);
      this.stats.currentTable = this.table.Albums;
      topics = "Viet-Nam/IWZ9Z08I Nhac-Tre/IWZ9Z088 Nhac-Cach-Mang/IWZ9Z08C Cai-Luong/IWZ9Z0C6 Nhac-Tru-Tinh/IWZ9Z08B Nhac-Que-Huong/IWZ9Z08D Nhac-Trinh/IWZ9Z08E Rock-Viet/IWZ9Z08A Nhac-Thieu-Nhi/IWZ9Z08F Nhac-Phim/IWZ9Z0BA Rap-Viet/IWZ9Z089 Nhac-Khong-Loi/IWZ9Z090 Nhac-Dance/IWZ9Z0CW ";
      topics += "Au-My/IWZ9Z08O Pop/IWZ9Z097 Electronic-Dance/IWZ9Z09A Trance-House-Techno/IWZ9Z0C7 Nhac-Phim/IWZ9Z0EC Rock/IWZ9Z099 R-B-Soul/IWZ9Z09D Blues-Jazz/IWZ9Z09C Audiophile/IWZ9Z0EO Rap-Hip-Hop/IWZ9Z09B Gospel/IWZ9Z0DE New-Age-World-Music/IWZ9Z098 Country/IWZ9Z096 Indie/IWZ9Z0CA Folk/IWZ9Z09E ";
      topics += "Han-Quoc/IWZ9Z08W Pop-Ballad/IWZ9Z09W Electronic-Dance/IWZ9Z09O Rap-Hip-Hop/IWZ9Z09I Nhac-Phim/IWZ9Z0BB Rock/IWZ9Z09Z R-B/IWZ9Z09U ";
      topics += "Nhat-Ban/IWZ9Z08Z Pop-Ballad/IWZ9Z0AZ R-B/IWZ9Z0A7 Pop-Dance/IWZ9Z0A6 Nhac-Phim/IWZ9Z0EE Rap-Hip-Hop/IWZ9Z0AU Rock/IWZ9Z0A8 ";
      topics += "Hoa-Ngu/IWZ9Z08U Pop/IWZ9Z0EU Dan-Toc/IWZ9Z0E7 Singapore/IWZ9Z0AW Rock/IWZ9Z0EZ Trung-Quoc/IWZ9Z0A0 Malaysia/IWZ9Z0AO Hong-Kong/IWZ9Z0AI Audiophile/IWZ9Z0DF Nhac-Phim/IWZ9Z0ED Dai-Loan/IWZ9Z09F ";
      topics += "Hoa-Tau/IWZ9Z086 Classical/IWZ9Z0BI Cello/IWZ9Z0AD Nhac-Cu-Khac/IWZ9Z0E8 Piano/IWZ9Z0B0 New-Age-World-Music/IWZ9Z0BO Guitar/IWZ9Z0A9 Nhac-Cu-Dan-Toc/IWZ9Z0AA Violin/IWZ9Z0BU Saxophone/IWZ9Z0B7 ";
      topics = topics.split(' ');
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        link = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=release_date&p=";
        link1 = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=hot&p=";
        link2 = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=total_play&filter=day&p=";
        link3 = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=total_play&filter=week&p=";
        link4 = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=total_play&filter=month&p=";
        for (page = _j = 1; _j <= 20; page = ++_j) {
          this._fetchAlbumByGenre(link, page);
          this._fetchAlbumByGenre(link1, page);
          this._fetchAlbumByGenre(link2, page);
          this._fetchAlbumByGenre(link3, page);
          this._fetchAlbumByGenre(link4, page);
        }
      }
      return null;
    };

    Zing.prototype.fetchVideoLink = function() {
      var _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching video links to table: " + this.table.Artists).magenta);
      this.connection.query("select id, video_encodedId from " + this.table.Videos + " where link is null", function(err, videos) {
        var index, video, _i, _len, _results;
        if (err) {
          return console.log("cannt query songs");
        } else {
          _this.stats.totalItems = videos.length;
          _results = [];
          for (index = _i = 0, _len = videos.length; _i < _len; index = ++_i) {
            video = videos[index];
            _results.push(_this._fetchVideoLink(video));
          }
          return _results;
        }
      });
      return null;
    };

    Zing.prototype.updateAlbumCreatedTime = function() {
      var _q,
        _this = this;
      this.connect();
      _q = "select album_thumbnail, albumid from " + this.table.Albums;
      return this.connection.query(_q, function(err, albums) {
        var item, _i, _len, _results;
        if (!err) {
          _results = [];
          for (_i = 0, _len = albums.length; _i < _len; _i++) {
            item = albums[_i];
            _results.push((function(item) {
              var r, time, _update;
              if (item.album_thumbnail.match(/_\d+\..+$/)) {
                time = item.album_thumbnail.match(/_\d+\..+$/)[0].replace(/_|\..+$/, '');
                time = new Date(parseInt(time, 10) * 1000);
                r = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate() + " " + time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds();
                _update = "update " + _this.table.Albums + " set created=" + (_this.connection.escape(r)) + " where albumid=" + (_this.connection.escape(item.albumid));
                return _this.connection.query(_update, function(err) {
                  if (err) {
                    return console.log("sdkjhaskgdhfsdhgfkdsjh");
                  }
                });
              }
            })(item));
          }
          return _results;
        }
      });
    };

    Zing.prototype._update = function(link0, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = link0 + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, item, _album, _created, _fn, _i, _len, _t;
          if (data.match(/album\-detail\-img.+/g)) {
            albums = data.match(/album\-detail\-img.+/g);
            _fn = function(_album) {
              return _this.connection.query("select albumid from " + _this.table.Albums + " where albumid=" + (_this.connection.escape(_album.albumid)), function(err, result) {
                if (err) {
                  console.log("error while checking duplication of album. ERROR: " + err);
                } else {
                  _this.stats.totalItemCount += 1;
                  if (JSON.stringify(result) === '[]') {
                    _this.stats.passedItemCount += 1;
                    _this._fetchAlbumEncodedId(_album);
                  } else {
                    _this.stats.failedItemCount += 1;
                  }
                }
                _this.utils.printUpdateRunning(_album.albumid, _this.stats, "Fetching");
                if (_this.stats.totalItemCount === 1200) {
                  return _this.utils.printFinalResult(_this.stats);
                }
              });
            };
            for (_i = 0, _len = albums.length; _i < _len; _i++) {
              album = albums[_i];
              _album = {
                albumid: album.match(/\/[0-9a-zA-Z]+\.html/g)[0].replace(/\//g, '').replace(/\.html/g, ''),
                album_thumbnail: album.match(/src\=\".+/g)[0].replace(/src\=\"/g, '').replace(/\/><\/a><\/span>|\"\s/g, '')
              };
              if (_album.album_thumbnail.match(/_\d+\..+$/)) {
                _t = _album.album_thumbnail.match(/_\d+\..+$/)[0].replace(/_|\..+$/, '');
                _t = new Date(parseInt(_t, 10) * 1000);
                _created = _t.getFullYear() + "-" + (_t.getMonth() + 1) + "-" + _t.getDate() + " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
                _album.created = _created;
              }
              item = album.match(/title\=\".+\"\shref/g)[0].replace(/title\=\"/g, '').replace(/\"\shref/g, '');
              _album.album_artist = item.split(' - ')[1];
              _album.album_name = item.split(' - ')[0];
              _fn(_album);
            }
            return data = "";
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    /**
    	 * update albums and the relating songs to tables
    	 * update() - scan 20 pages in every topic => _update() - scan single link in particular topic 
    	 * => _fetchAlbumEncodedId() - fetch and album_encodedId and insert album into table
    	 * => _fetchSongs() => _storeSongs() => _updateAlbumStats() => _updateSongIds()
    */


    Zing.prototype.update = function() {
      var link, page, topic, topics, _i, _len, _results;
      this.connect();
      console.log(" |" + "Updating albums and songs".magenta);
      this.stats.currentTable = this.table.Albums;
      topics = "Viet-Nam/IWZ9Z08I Au-My/IWZ9Z08O Han-Quoc/IWZ9Z08W Nhat-Ban/IWZ9Z08Z Hoa-Ngu/IWZ9Z08U Hoa-Tau/IWZ9Z086";
      topics = topics.split(' ');
      _results = [];
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        link = "http://mp3.zing.vn/the-loai-album/" + topic + ".html?sort=release_date&p=";
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (page = _j = 1; _j <= 20; page = ++_j) {
            _results1.push(this._update(link, page));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Zing.prototype.updateIdFromAlbum = function() {
      var params,
        _this = this;
      params = {
        sourceField: "albumid",
        table: this.table.Songs
      };
      this.connect();
      return this._getFieldFromTable(params, function(songid) {
        var _update;
        _update = "update " + _this.params.table + " SET albumida=" + (_this._convertToInt(songid)) + " where albumid=" + (_this.connection.escape(songid));
        return _this.connection.query(_update, function(err) {
          if (err) {
            return console.log("Cannt update albumid");
          }
        });
      });
    };

    Zing.prototype._getAlbum = function(albumid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + albumid + ".html";
      return this._getFileByHTTP(link, function(data) {
        var album, arr, item, songs_albums, _created, _i, _j, _len, _len1, _songid, _songids, _t, _temp, _tempArr, _topic, _topics;
        try {
          _this.stats.totalItemCount += 1;
          _this.stats.currentId = albumid;
          if (data !== null) {
            album = {
              aid: _this._convertToInt(albumid),
              albumid: albumid
            };
            if (data.match(/xmlURL.+\&amp\;/g) === null) {
              _this.stats.failedItemCount += 1;
            } else {
              album.album_encodedId = data.match(/xmlURL.+\&amp\;/g)[0].replace(/xmlURL\=http\:\/\/mp3\.zing\.vn\/xml\/album\-xml\//g, '').replace(/\&amp\;/, '');
              if (data.match(/Lượt\snghe\:\<\/span\>.+/g)) {
                album.plays = data.match(/Lượt\snghe\:\<\/span\>.+/g)[0].replace(/Lượt\snghe\:\<\/span\>\s|\<\/p\>|\./g, '').trim();
              } else {
                album.plays = 0;
              }
              if (data.match(/Năm\sphát\shành\:.+/g)) {
                album.released_year = data.match(/Năm\sphát\shành\:.+/g)[0].replace(/Năm\sphát\shành\:/g, '').replace(/\<\/p\>|\<\/span\>/g, '').trim();
              } else {
                album.released_year = '';
              }
              if (data.match(/Số\sbài\shát\:/g)) {
                album.nsongs = data.match(/Số\sbài\shát\:.+/g)[0].replace(/Số\sbài\shát\:|\<\/span\>\s|\<\/p\>/g, '');
              } else {
                album.nsongs = '';
              }
              if (data.match(/Thể\sloại\:/g)) {
                _topics = data.match(/Thể\sloại\:.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                album.topic = JSON.stringify(arr);
              } else {
                album.topic = '';
              }
              if (data.match(/_albumIntro\"\sclass\=\"rows2.+/g)) {
                album.description = encoder.htmlDecode(data.match(/_albumIntro\"\sclass\=\"rows2.+/g)[0].replace(/_albumIntro.+\"\>|\<br\s\/\>|\<\/p\>/g, ''));
              }
              if (data.match(/detail-title.+/g)) {
                item = data.match(/detail-title.+/g)[0].replace(/detail-title\">|<\/h1>/g, '');
                _tempArr = item.split(' - ');
                album.album_artist = encoder.htmlDecode(_tempArr[_tempArr.length - 1]);
                _tempArr.splice(-1);
                album.album_name = encoder.htmlDecode(_tempArr.join(' - '));
              }
              if (data.match(/album-detail-img/g)) {
                _temp = data.match(/album-detail-img.+/g)[0].replace(/album-detail-img|/);
                album.album_thumbnail = _temp.match(/src\=\".+/g)[0].replace(/album-detail-img.+src\=/g, '').replace(/alt.+|\"|src\=/g, '').trim();
                if (album.album_thumbnail.match(/_\d+\..+$/)) {
                  _t = album.album_thumbnail.match(/_\d+\..+$/)[0].replace(/_|\..+$/, '');
                  _t = new Date(parseInt(_t, 10) * 1000);
                  _created = _t.getFullYear() + "-" + (_t.getMonth() + 1) + "-" + _t.getDate() + " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
                  album.created = _created;
                }
              }
              if (data.match(/_divPlsLite.+\"\sclass/g)) {
                arr = [];
                _songids = data.match(/_divPlsLite.+\"\sclass/g);
                for (_j = 0, _len1 = _songids.length; _j < _len1; _j++) {
                  _songid = _songids[_j];
                  arr.push(_songid.replace(/_divPlsLite|\"\sclass/g, ''));
                }
                songs_albums = {
                  aid: album.aid,
                  sids: arr.map(function(v) {
                    return _this._convertToInt(v);
                  })
                };
              } else {
                album.description = "";
              }
              data = "";
              _this.log.lastAlbumId = album.aid;
              _this.connection.query(_this.query._insertIntoZIAlbums, album, function(err) {
                if (err) {
                  return console.log("cannt insert new album: " + album.albumid + ". ERROR: " + err);
                } else {
                  return _this._fetchSongs(album.album_encodedId, songs_albums);
                }
              });
              _this.stats.passedItemCount += 1;
            }
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalFail === _this.stats.totalItemCount) {
            return _this.utils.printFinalResult(_this.stats);
          }
        } catch (e) {
          console.log("CANNOT fetch albumid : " + albumid + ". ERROR: " + e);
          return _this.stats.failedItemCount += 1;
        }
      });
    };

    Zing.prototype.updateAlbumsLeft = function() {
      var a, file, i, _i, _ref, _results;
      file = fs.readFileSync("./album222.txt", "utf8");
      a = JSON.parse(file);
      this.stats.totalItems = a.length;
      this.stats.currentTable = this.table.Albums;
      console.log("The number of albums: " + a.length);
      this.connect();
      _results = [];
      for (i = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this._getAlbum(this._convertToId(a[i])));
      }
      return _results;
    };

    Zing.prototype.updateSongsAndAlbums = function() {
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Albums and Songs to table: " + this.table.Albums + " and " + this.table.Songs).magenta);
      this.temp = {};
      this.temp.totalFail = 0;
      return this._getAlbum(this._convertToId(this.log.lastAlbumId + 1));
    };

    Zing.prototype.updateSongsStatsAndLyrics = function(range0, range1) {
      var nItems, skippedRows, _q,
        _this = this;
      this.connect();
      skippedRows = range0 - 1;
      nItems = range1 - range0 + 1;
      this.stats.currentTable = this.table.Songs;
      this.stats.totalItems = nItems;
      _q = "Select sid from " + this.table.Songs + " where plays is null ";
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Songs author, topic and plays to table  : " + this.table.Songs).magenta);
      console.log(" |" + ("It has been skipped " + skippedRows + " rows and selected " + nItems + " ones ").magenta);
      return this.connection.query(_q, function(err, songs) {
        var song, _i, _len, _results;
        if (err) {
          return console.log("Cannot get songs from database. ERROR: " + err);
        } else {
          _results = [];
          for (_i = 0, _len = songs.length; _i < _len; _i++) {
            song = songs[_i];
            _results.push((function(song) {
              var link;
              try {
                link = "http://mp3.zing.vn/bai-hat/joke-link/" + (_this._convertToId(song.sid)) + ".html";
                return _this._getFileByHTTP(link, function(data) {
                  var arr, _j, _len1, _song, _topic, _topics, _u;
                  _this.stats.totalItemCount += 1;
                  _this.stats.currentId = song.sid;
                  if (data !== null) {
                    _song = {
                      sid: song.sid
                    };
                    if (data.match(/Lượt\snghe\:.+<\/p>/g)) {
                      _song.plays = data.match(/Lượt\snghe\:.+<\/p>/g)[0].replace(/Lượt\snghe\:|<\/p>|\./g, '').trim();
                    } else {
                      _song.plays = 0;
                    }
                    if (data.match(/Sáng\stác\:.+<\/a><\/a>/g)) {
                      _song.author = encoder.htmlDecode(data.match(/Sáng\stác\:.+<\/a><\/a>/g)[0].replace(/^.+\">|<.+$/g, '').trim());
                    } else {
                      _song.author = '';
                    }
                    if (data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)) {
                      _topics = data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)[0].replace(/Thể\sloại\:|\s\|\sLượt\snghe/g, '').split(',');
                      arr = [];
                      for (_j = 0, _len1 = _topics.length; _j < _len1; _j++) {
                        _topic = _topics[_j];
                        arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                      }
                      _song.topic = JSON.stringify(arr);
                    } else {
                      _song.topic = '';
                    }
                    _u = ("update " + _this.table.Songs + " SET plays=" + _song.plays + ", ") + ("topic = " + (_this.connection.escape(_song.topic)) + ", ") + ("author = " + (_this.connection.escape(_song.author)) + " ") + ("where sid= " + _song.sid + " ");
                    _song = "";
                    _this.stats.passedItemCount += 1;
                    _this.connection.query(_u, function(err) {
                      if (err) {
                        return console.log("cannt update song: " + song.sid);
                      }
                    });
                  } else {
                    _this.stats.failedItemCount += 1;
                  }
                  _this.utils.printRunning(_this.stats);
                  if (_this.stats.totalItemCount === _this.stats.totalItems) {
                    return _this.utils.printFinalResult(_this.stats);
                  }
                });
              } catch (e) {
                return console.log("Error has occured during processing at song: " + song.sid);
              }
            })(song));
          }
          return _results;
        }
      });
    };

    Zing.prototype.updateSongsLeft = function() {
      var a, songid, _i, _len, _results,
        _this = this;
      this.connect();
      a = fs.readFileSync('./song2.txt');
      a = JSON.parse(a);
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Songs left table  : " + this.table.Songs).magenta);
      this.stats.totalItems = a.length;
      _results = [];
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        songid = a[_i];
        _results.push((function(songid) {
          var link;
          link = "http://mp3.zing.vn/bai-hat/joke-link/" + (_this._convertToId(songid)) + ".html";
          return _this._getFileByHTTP(link, function(data) {
            var arr, _j, _len1, _link, _song, _topic, _topics;
            _this.stats.totalItemCount += 1;
            _this.stats.currentId = songid;
            if (data !== null) {
              _song = {
                sid: songid,
                songid: _this._convertToId(songid)
              };
              if (data.match(/Lượt\snghe\:.+<\/p>/g)) {
                _song.plays = data.match(/Lượt\snghe\:.+<\/p>/g)[0].replace(/Lượt\snghe\:|<\/p>|\./g, '').trim();
              } else {
                _song.plays = 0;
              }
              if (data.match(/Sáng\stác\:.+<\/a><\/a>/g)) {
                _song.author = encoder.htmlDecode(data.match(/Sáng\stác\:.+<\/a><\/a>/g)[0].replace(/^.+\">|<.+$/g, '').trim());
              } else {
                _song.author = '';
              }
              if (data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)) {
                _topics = data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)[0].replace(/Thể\sloại\:|\s\|\sLượt\snghe/g, '').split(',');
                arr = [];
                for (_j = 0, _len1 = _topics.length; _j < _len1; _j++) {
                  _topic = _topics[_j];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                _song.topic = JSON.stringify(arr);
              } else {
                _song.topic = '';
              }
              if (data.match(/xmlURL.+/)) {
                _link = data.match(/xmlURL.+/)[0].match(/http:\/\/mp3\.zing\.vn\/xml\/song-xml\/[a-zA-Z]+/)[0];
                _link = _link.replace(/song-xml/, 'song').replace(/mp3/, 'm.mp3');
              }
              (function(_song) {
                return _this._getFileByHTTP(_link, function(data) {
                  data = JSON.parse(data);
                  _song.song_name = encoder.htmlDecode(data.data[0].title);
                  _song.song_artist = encoder.htmlDecode(data.data[0].performer);
                  _song.song_link = data.data[0].source;
                  return _this.connection.query(_this.query._insertIntoZISongs, _song, function(err) {
                    if (err) {
                      return console.log("Cannot insert song: " + _song.songid + " into table");
                    }
                  });
                });
              })(_song);
              _song = "";
              _this.stats.passedItemCount += 1;
            } else {
              _this.stats.failedItemCount += 1;
            }
            _this.utils.printRunning(_this.stats);
            if (_this.stats.totalItemCount === _this.stats.totalItems) {
              return _this.utils.printFinalResult(_this.stats);
            }
          });
        })(songid));
      }
      return _results;
    };

    Zing.prototype.updateSongsLyrics = function(range0, range1) {
      var nItems, skippedRows, _q,
        _this = this;
      this.connect();
      skippedRows = range0 - 1;
      nItems = range1 - range0 + 1;
      this.stats.currentTable = this.table.Songs;
      this.stats.totalItems = nItems;
      _q = "Select sid from " + this.table.Songs + " where sid > 1382365890 and lyric is null";
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Songs lyrics to table  : " + this.table.Songs).magenta);
      console.log(" |" + ("It has been skipped " + skippedRows + " rows and selected " + nItems + " ones ").magenta);
      return this.connection.query(_q, function(err, songs) {
        var song, _i, _len, _results;
        if (err) {
          return console.log("Cannot get songs from database. ERROR: " + err);
        } else {
          _results = [];
          for (_i = 0, _len = songs.length; _i < _len; _i++) {
            song = songs[_i];
            _results.push((function(song) {
              var link;
              try {
                link = "http://mp3.zing.vn/ajax/lyrics/lyrics?from=0&id=" + (_this._convertToId(song.sid)) + "&callback=";
                return _this._getFileByHTTP(link, function(data) {
                  var arr, bbb, index, str, t, zeroCount, _u;
                  try {
                    _this.stats.totalItemCount += 1;
                    _this.stats.currentId = song.sid;
                    if (data !== null) {
                      str = JSON.parse(data).html;
                      arr = str.split(/oLyric/g);
                      bbb = arr.map(function(v) {
                        var _ref, _ref1;
                        v = (_ref = v.match(/score\">\d+<\/span>/g)) != null ? (_ref1 = _ref[0].match(/\d+/g)) != null ? _ref1[0] : void 0 : void 0;
                        if (v !== void 0) {
                          return parseInt(v, 10);
                        } else {
                          return 0;
                        }
                      });
                      zeroCount = 0;
                      bbb.map(function(v) {
                        if (v === 0) {
                          return zeroCount += 1;
                        }
                      });
                      index = bbb.indexOf(Math.max.apply(Math, bbb));
                      if (zeroCount === bbb.length) {
                        index = bbb.length - 1;
                      }
                      t = JSON.stringify(arr[index]).replace(/^.+<\/span><\/span>/g, '').replace(/<\/div>.+$/g, '').replace(/<\/p>\\r\\n\\t/g, '').replace(/^\\r\\n\\t\\t\\t/g, '').replace(/\\r/g, '').replace(/\\t/g, '').replace(/\\n/g, '');
                      if (t.search("Hiện chưa có lời bài hát") > -1) {
                        t = "";
                      }
                      t = encoder.htmlDecode(t);
                      _u = "UPDATE " + _this.table.Songs + " SET lyric=" + (_this.connection.escape(t)) + " where sid=" + song.sid;
                      _this.connection.query(_u, function(err) {
                        if (err) {
                          return console.log("Cannt update lyric " + song.sid);
                        }
                      });
                      _this.stats.passedItemCount += 1;
                    } else {
                      _this.stats.failedItemCount += 1;
                      console.log("FAILED");
                    }
                    _this.utils.printRunning(_this.stats);
                    if (_this.stats.totalItemCount === _this.stats.totalItems) {
                      return _this.utils.printFinalResult(_this.stats);
                    }
                  } catch (e) {
                    return _this.stats.failedItemCount += 1;
                  }
                });
              } catch (e) {
                return console.log("Error has occured during processing at song: " + song.sid);
              }
            })(song));
          }
          return _results;
        }
      });
    };

    Zing.prototype.updateVideosLyrics = function() {
      var _q,
        _this = this;
      this.connect();
      this.stats.currentTable = this.table.Videos;
      _q = "Select vid from " + this.table.Videos;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Videos lyrics to table  : " + this.table.Videos).magenta);
      return this.connection.query(_q, function(err, videos) {
        var video, _i, _len, _results;
        if (err) {
          return console.log("Cannot get videos from database. ERROR: " + err);
        } else {
          _this.stats.totalItems = videos.length;
          _results = [];
          for (_i = 0, _len = videos.length; _i < _len; _i++) {
            video = videos[_i];
            _results.push((function(video) {
              var link;
              try {
                link = "http://mp3.zing.vn/ajax/lyric-v2/lyrics?id=" + (_this._convertToId(video.vid)) + "&from=0";
                return _this._getFileByHTTP(link, function(data) {
                  var arr, bbb, index, t, zeroCount, _u;
                  try {
                    _this.stats.totalItemCount += 1;
                    _this.stats.currentId = video.vid;
                    if (data !== null) {
                      arr = JSON.parse(data).result;
                      bbb = arr.map(function(v) {
                        var _ref, _ref1;
                        v = (_ref = v.match(/score\">\d+<\/span>/g)) != null ? (_ref1 = _ref[0].match(/\d+/g)) != null ? _ref1[0] : void 0 : void 0;
                        if (v !== void 0) {
                          return parseInt(v, 10);
                        } else {
                          return 0;
                        }
                      });
                      zeroCount = 0;
                      bbb.map(function(v) {
                        if (v === 0) {
                          return zeroCount += 1;
                        }
                      });
                      index = bbb.indexOf(Math.max.apply(Math, bbb));
                      if (zeroCount === bbb.length) {
                        index = bbb.length - 1;
                      }
                      t = JSON.stringify(arr[index]).replace(/^.+<\/span><\/span>/g, '').replace(/<\/div>.+$/g, '').replace(/<\/p>\\n/g, '').replace(/\\r/g, '').replace(/\\t/g, '').replace(/\\n/g, '');
                      if (t.search("Hiện chưa có lời bài hát") > -1) {
                        t = "";
                      }
                      t = encoder.htmlDecode(t);
                      _u = "UPDATE " + _this.table.Videos + " SET lyric=" + (_this.connection.escape(t)) + " where vid=" + video.vid;
                      _this.connection.query(_u, function(err) {
                        if (err) {
                          return console.log("Cannt update lyric " + video.vid);
                        }
                      });
                      _this.stats.passedItemCount += 1;
                    } else {
                      _this.stats.failedItemCount += 1;
                    }
                    _this.utils.printRunning(_this.stats);
                    if (_this.stats.totalItemCount === _this.stats.totalItems) {
                      return _this.utils.printFinalResult(_this.stats);
                    }
                  } catch (e) {
                    return _this.stats.failedItemCount += 1;
                  }
                });
              } catch (e) {
                return console.log("Error has occured during processing at video: " + video.vid);
              }
            })(video));
          }
          return _results;
        }
      });
    };

    Zing.prototype.testPattern = function(range0, range1) {
      var a, n0, nSkipped, r0, r1, _q,
        _this = this;
      this.connect();
      r0 = 1381664871;
      r1 = 1381665770;
      nSkipped = range0;
      n0 = range1;
      _q = "select aid,album_encodedId from ZIAlbums  where album_encodedId is not null ORDER BY aid ASC LIMIT " + nSkipped + "," + n0 + " ";
      a = [];
      return this.connection.query(_q, function(err, results) {
        var album, b, character_14th, finale, i, index, isElementInArr, j, n, reduce, xxx, _i, _j, _k, _l, _len, _ref, _temp;
        if (err) {
          return console.log("erroanenfadf ");
        } else {
          n = results.length;
          console.log(n);
          character_14th = [];
          for (index = _i = 0, _len = results.length; _i < _len; index = ++_i) {
            album = results[index];
            a[index] = album.album_encodedId.split('');
            character_14th.push(album.album_encodedId[13]);
          }
          console.log("------------------");
          console.log(results[0].aid + ".." + results[n - 1].aid);
          b = [];
          for (j = _j = 0; _j <= 23; j = ++_j) {
            b[j] = [];
            for (i = _k = 0, _ref = n - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; i = 0 <= _ref ? ++_k : --_k) {
              b[j][i] = a[i][j];
            }
          }
          isElementInArr = function(el, a) {
            var check, value, _l, _len1;
            check = false;
            for (_l = 0, _len1 = a.length; _l < _len1; _l++) {
              value = a[_l];
              if (el === value) {
                check = true;
              }
            }
            return check;
          };
          reduce = function(arr) {
            var character, test, _l, _len1;
            test = [];
            for (_l = 0, _len1 = arr.length; _l < _len1; _l++) {
              character = arr[_l];
              if (!isElementInArr(character, test)) {
                test.push(character);
              }
            }
            return test;
          };
          finale = [];
          for (i = _l = 0; _l <= 23; i = ++_l) {
            xxx = reduce(b[i]);
            _temp = xxx.sort().join('');
            finale.push(_temp);
            console.log(i + " => " + JSON.stringify(_temp));
          }
          return console.log(JSON.stringify(reduce(finale)));
        }
      });
    };

    Zing.prototype.testAAAA = function() {
      var a, b, _i, _q, _results,
        _this = this;
      this.connect();
      _q = "select aid from ZIAlbums";
      a = (function() {
        _results = [];
        for (_i = 1381585028; _i <= 1381667722; _i++){ _results.push(_i); }
        return _results;
      }).apply(this);
      b = [];
      return this.connection.query(_q, function(err, results) {
        var album, index, value, _j, _k, _len, _len1;
        if (err) {
          return console.log("cannt fetch songs");
        } else {
          for (_j = 0, _len = results.length; _j < _len; _j++) {
            album = results[_j];
            index = a.indexOf(album.aid);
            if (index !== -1) {
              a[index] = 0;
            }
          }
          for (_k = 0, _len1 = a.length; _k < _len1; _k++) {
            value = a[_k];
            if (value !== 0) {
              b.push(value);
            }
          }
          return fs.writeFileSync("./album222.txt", JSON.stringify(b));
        }
      });
    };

    Zing.prototype.updatePathAndCreated = function() {
      var i, _i, _q, _results,
        _this = this;
      this.connect();
      this.stats.currentTable = this.table.Songs;
      this.stats.totalItems = 100000;
      _results = [];
      for (i = _i = 600001; _i <= 600001; i = _i += 5000) {
        _q = "select sid,song_link from ZISongs where created is null";
        _results.push(this.connection.query(_q, function(err, results) {
          var date, path, testArr, value, _j, _k, _len, _ref, _ref1, _results1, _str, _u;
          if (err) {
            return console.log("cannt fetch song");
          } else {
            _results1 = [];
            for (_j = 0, _len = results.length; _j < _len; _j++) {
              value = results[_j];
              _this.stats.totalItemCount += 1;
              _this.stats.currentId = value.sid;
              _str = value.song_link.replace(/^.+load-song\//g, '').replace(/^.+song-load\//g, '');
              testArr = [];
              for (i = _k = 0, _ref = _str.length - 1; _k <= _ref; i = _k += 4) {
                testArr.push(_this._decodeString(_str.slice(i, i + 4)));
              }
              path = decodeURIComponent(testArr.join('').match(/.+mp3/g));
              date = (_ref1 = path.match(/^\d{4}\/\d{2}\/\d{2}/)) != null ? _ref1[0].replace(/\//g, "-") : void 0;
              _u = ("update " + _this.table.Songs + " SET ") + ("path=" + (_this.connection.escape(path)) + ", ") + ("created=" + (_this.connection.escape(date)) + " ") + ("where sid=" + value.sid);
              _this.connection.query(_u, function(err) {
                if (err) {
                  return console.log("Cannt update lyric " + value.sid);
                }
              });
              _this.stats.passedItemCount += 1;
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                _results1.push(_this.utils.printFinalResult(_this.stats));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }));
      }
      return _results;
    };

    Zing.prototype.updateSplitArtistsofSongs = function() {
      var i, _i, _q, _results,
        _this = this;
      this.connect();
      this.stats.currentTable = this.table.Songs;
      this.stats.totalItems = 120000;
      _results = [];
      for (i = _i = 600001; _i <= 720000; i = _i += 5000) {
        _q = "select sid,song_artist from ZISongs LIMIT " + i + ",5000";
        _results.push(this.connection.query(_q, function(err, results) {
          var artist, value, _j, _len, _results1, _u;
          if (err) {
            return console.log("cannt fetch song");
          } else {
            _results1 = [];
            for (_j = 0, _len = results.length; _j < _len; _j++) {
              value = results[_j];
              _this.stats.totalItemCount += 1;
              _this.stats.currentId = value.sid;
              if (value.song_artist.search(/[\".+\"]/g) !== 1) {
                if (value.song_artist.search(" ft. ") > -1) {
                  artist = JSON.stringify(value.song_artist.trim().split(' ft. '));
                } else {
                  artist = JSON.stringify(value.song_artist.trim().split(','));
                }
                _u = ("update " + _this.table.Songs + " SET ") + ("song_artist=" + (_this.connection.escape(artist)) + " ") + ("where sid=" + value.sid);
                _this.connection.query(_u, function(err) {
                  if (err) {
                    return console.log("Cannt update lyric " + value.sid);
                  }
                });
              }
              _this.stats.passedItemCount += 1;
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                _results1.push(_this.utils.printFinalResult(_this.stats));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }));
      }
      return _results;
    };

    Zing.prototype.updateSplitArtistsofAlbums = function() {
      var i, _i, _q, _results,
        _this = this;
      this.connect();
      this.stats.currentTable = this.table.Songs;
      this.stats.totalItems = 1;
      _results = [];
      for (i = _i = 1; _i <= 1; i = _i += 5000) {
        _q = "select aid,album_artist from ZIAlbums";
        _results.push(this.connection.query(_q, function(err, results) {
          var artist, value, _j, _len, _results1, _u;
          if (err) {
            return console.log("cannt fetch song");
          } else {
            _this.stats.totalItems = results.length;
            _results1 = [];
            for (_j = 0, _len = results.length; _j < _len; _j++) {
              value = results[_j];
              _this.stats.totalItemCount += 1;
              _this.stats.currentId = value.aid;
              if (value.album_artist.search(/[\".+\"]/g) !== 1) {
                if (value.album_artist.search(" ft. ") > -1) {
                  artist = JSON.stringify(value.album_artist.trim().split(' ft. '));
                } else {
                  artist = JSON.stringify(value.album_artist.trim().split(','));
                }
                _u = ("update " + _this.table.Albums + " SET ") + ("album_artist=" + (_this.connection.escape(artist)) + " ") + ("where aid=" + value.aid);
                _this.connection.query(_u, function(err) {
                  if (err) {
                    return console.log("Cannt update lyric " + value.sid);
                  }
                });
              }
              _this.stats.passedItemCount += 1;
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                _results1.push(_this.utils.printFinalResult(_this.stats));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }));
      }
      return _results;
    };

    Zing.prototype.updatevid = function() {
      var _q,
        _this = this;
      this.connect();
      _q = "select videoid from ZIVideos";
      return this.connection.query(_q, function(err, results) {
        var video, _i, _len, _results, _temp, _u;
        if (err) {
          return console.log("cannt fetch videos");
        } else {
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            video = results[_i];
            _temp = _this._convertToInt(video.videoid);
            _u = "update ZIVideos set vid=" + _temp + " where videoid=" + (_this.connection.escape(video.videoid));
            _results.push(_this.connection.query(_u, function(err) {
              if (err) {
                return console.log("cannt update video");
              }
            }));
          }
          return _results;
        }
      });
    };

    Zing.prototype.updateCreatedTime = function() {
      var i, _i, _q, _results,
        _this = this;
      this.connect();
      _results = [];
      for (i = _i = 0; _i <= 30000; i = _i += 1000) {
        _q = "select videoid, link from ZIVideos LIMIT " + i + ",1000 ";
        _results.push(this.connection.query(_q, function(err, results) {
          var created, link, video, _j, _len, _results1, _u;
          if (err) {
            return console.log("cannt fetch videos");
          } else {
            console.log("anbinh");
            _results1 = [];
            for (_j = 0, _len = results.length; _j < _len; _j++) {
              video = results[_j];
              link = video.link;
              if (link.match(/\d{4}\/\d{1}/g)) {
                created = link.match(/\d{4}\/\d{1}/g)[0];
              }
              if (link.match(/\d{4}\/\d{2}/g)) {
                created = link.match(/\d{4}\/\d{2}/g)[0];
              }
              if (link.match(/\d{4}\/\d{1}\/\d{1}/g)) {
                created = link.match(/\d{4}\/\d{1}\/\d{1}/g)[0];
              }
              if (link.match(/\d{4}\/\d{1}\/\d{2}/g)) {
                created = link.match(/\d{4}\/\d{1}\/\d{2}/g)[0];
              }
              if (link.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                created = link.match(/\d{4}\/\d{2}\/\d{2}/g)[0];
              }
              if (created != null) {
                _u = "update ZIVideos set created=" + (_this.connection.escape(created)) + " where videoid=" + (_this.connection.escape(video.videoid));
                _results1.push(_this.connection.query(_u, function(err) {
                  if (err) {
                    return console.log("cannt update video");
                  }
                }));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }));
      }
      return _results;
    };

    Zing.prototype._updateLyricForVideo = function(vid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/ajax/lyric-v2/lyrics?id=" + (this._convertToId(vid)) + "&from=0";
      return this._getFileByHTTP(link, function(data) {
        var arr, bbb, index, t, zeroCount, _u;
        try {
          if (data !== null) {
            arr = JSON.parse(data).result;
            bbb = arr.map(function(v) {
              var _ref, _ref1;
              v = (_ref = v.match(/score\">\d+<\/span>/g)) != null ? (_ref1 = _ref[0].match(/\d+/g)) != null ? _ref1[0] : void 0 : void 0;
              if (v !== void 0) {
                return parseInt(v, 10);
              } else {
                return 0;
              }
            });
            zeroCount = 0;
            bbb.map(function(v) {
              if (v === 0) {
                return zeroCount += 1;
              }
            });
            index = bbb.indexOf(Math.max.apply(Math, bbb));
            if (zeroCount === bbb.length) {
              index = bbb.length - 1;
            }
            t = JSON.stringify(arr[index]).replace(/^.+<\/span><\/span>/g, '').replace(/<\/div>.+$/g, '').replace(/<\/p>\\n/g, '').replace(/\\r/g, '').replace(/\\t/g, '').replace(/\\n/g, '');
            if (t.search("Hiện chưa có lời bài hát") > -1) {
              t = "";
            }
            t = encoder.htmlDecode(t);
            _u = "UPDATE " + _this.table.Videos + " SET lyric=" + (_this.connection.escape(t)) + " where vid=" + vid;
            return _this.connection.query(_u, function(err) {
              if (err) {
                return console.log("Cannt update lyric " + video.vid);
              }
            });
          }
        } catch (_error) {}
      });
    };

    Zing.prototype.updateVideos = function() {
      var nItems, range0, range1, round, startingNumber, vid, _i, _ref, _results,
        _this = this;
      this.connect();
      this.stats.currentTable = this.table.Videos;
      nItems = 100000;
      startingNumber = 1381585048;
      round = 8;
      range0 = startingNumber + round * nItems;
      range1 = startingNumber + (round + 1) * nItems;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |Starting from " + range0 + " -> " + range1 + ". Round is " + round + ", nItems is " + nItems);
      console.log(" |" + ("Update video to table  : " + this.table.Videos).magenta);
      this.stats.totalItems = nItems + 1;
      _results = [];
      for (vid = _i = range0, _ref = range1 - 80000; range0 <= _ref ? _i <= _ref : _i >= _ref; vid = range0 <= _ref ? ++_i : --_i) {
        _results.push((function(vid) {
          var link;
          link = "http://mp3.zing.vn/video-clip/joke-link/" + (_this._convertToId(vid)) + ".html";
          return _this._getFileByHTTP(link, function(data) {
            var arr, _date, _j, _len, _temp, _timestamp, _topic, _topics, _video;
            _this.stats.totalItemCount += 1;
            _this.stats.currentId = vid;
            if (data !== null) {
              if (data.match(/xmlURL.+\&amp\;/g) === null) {
                console.log(("ERROR : video " + video.videoid + ": " + video.title + " of " + video.artist + " does not exist").red);
              } else {
                _video = {
                  vid: vid
                };
                if (data.match(/Thể\sloại\:/g)) {
                  _temp = data.match(/Thể\sloại\:.+/g)[0];
                  _topics = _temp.split('|')[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
                  _video.plays = _temp.split('|')[1].replace(/Lượt\sxem\:|\s|\<\/p\>|\./g, '');
                  arr = [];
                  for (_j = 0, _len = _topics.length; _j < _len; _j++) {
                    _topic = _topics[_j];
                    arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                  }
                  _video.topic = JSON.stringify(arr);
                } else {
                  _video.topic = '';
                }
                if (data.match(/detail-title.+/g)) {
                  _temp = data.match(/detail-title.+/g)[0].replace(/detail-title"/g, '');
                  _temp = _temp.split(/<span>-<\/span>/g);
                  _video.title = _temp[0].replace(/<\/h1>|>/g, '');
                  _video.artists = JSON.stringify(_temp[1].match(/Tìm\sbài\shát\scủa.+"/g)[0].replace(/"$/g, '').replace(/Tìm\sbài\shát\scủa\s/g, '').split(' ft. '));
                }
                if (data.match(/og:image/g)) {
                  _video.thumbnail = data.match(/og:image.+/g)[0].match(/http.+"/g)[0].replace('"', '');
                }
                _video.created = "0000-00-00";
                link = _video.thumbnail;
                if (link.match(/\d{10}\.jpg/g)) {
                  _timestamp = link.match(/\d{10}\.jpg/g)[0].replace(/\.jpg/g, '');
                  _date = new Date(parseInt(_timestamp, 10) * 1000);
                  _video.created = _date.getFullYear() + "-" + (_date.getMonth() + 1) + "-" + _date.getDate();
                }
                if (link.match(/\d{4}\/\d{1}/g)) {
                  _video.created = link.match(/\d{4}\/\d{1}/g)[0];
                }
                if (link.match(/\d{4}\/\d{2}/g)) {
                  _video.created = link.match(/\d{4}\/\d{2}/g)[0];
                }
                if (link.match(/\d{4}\/\d{1}\/\d{1}/g)) {
                  _video.created = link.match(/\d{4}\/\d{1}\/\d{1}/g)[0];
                }
                if (link.match(/\d{4}\/\d{1}\/\d{2}/g)) {
                  _video.created = link.match(/\d{4}\/\d{1}\/\d{2}/g)[0];
                }
                if (link.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                  _video.created = link.match(/\d{4}\/\d{2}\/\d{2}/g)[0];
                }
                if (link.match(/\d{4}\/\d{2}_\d{2}/g)) {
                  _video.created = link.match(/\d{4}\/\d{2}\_\d{2}/g)[0].replace(/\//, '-').replace(/_/, '-');
                }
                _video.link = "http://mp3.zing.vn/html5/video/" + _this.encryptId(vid);
                _this.connection.query(_this.query._insertIntoZIVideos, _video, function(err) {
                  if (err) {
                    return console.log("Cannot insert video " + video.videoid + " into table. Error: " + err);
                  } else {
                    return this._updateLyricForVideo(_video.vid);
                  }
                });
              }
              _this.stats.passedItemCount += 1;
            } else {
              _this.stats.failedItemCount += 1;
            }
            _this.utils.printRunning(_this.stats);
            if (_this.stats.totalItems === _this.stats.totalItemCount) {
              return _this.utils.printFinalResult(_this.stats);
            }
          });
        })(vid));
      }
      return _results;
    };

    Zing.prototype._processAlbum = function(albumid, data) {
      var album, arr, item, songids, _created, _i, _j, _len, _len1, _songid, _songids, _t, _temp, _tempArr, _temp_artist, _topic, _topics,
        _this = this;
      album = {
        aid: albumid,
        albumid: this._convertToId(albumid)
      };
      album.album_encodedId = data.match(/xmlURL.+\&amp\;/g)[0].replace(/xmlURL\=http\:\/\/mp3\.zing\.vn\/xml\/album\-xml\//g, '').replace(/\&amp\;/, '');
      if (data.match(/Lượt\snghe\:\<\/span\>.+/g)) {
        album.plays = data.match(/Lượt\snghe\:\<\/span\>.+/g)[0].replace(/Lượt\snghe\:\<\/span\>\s|\<\/p\>|\./g, '').trim();
      } else {
        album.plays = 0;
      }
      if (data.match(/Năm\sphát\shành\:.+/g)) {
        album.released_year = data.match(/Năm\sphát\shành\:.+/g)[0].replace(/Năm\sphát\shành\:/g, '').replace(/\<\/p\>|\<\/span\>/g, '').trim();
      } else {
        album.released_year = '';
      }
      if (data.match(/Số\sbài\shát\:/g)) {
        album.nsongs = data.match(/Số\sbài\shát\:.+/g)[0].replace(/Số\sbài\shát\:|\<\/span\>\s|\<\/p\>/g, '');
      } else {
        album.nsongs = '';
      }
      if (data.match(/Thể\sloại\:/g)) {
        _topics = data.match(/Thể\sloại\:.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/p\>/g, '').split(',');
        arr = [];
        for (_i = 0, _len = _topics.length; _i < _len; _i++) {
          _topic = _topics[_i];
          arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
        }
        album.topic = JSON.stringify(arr);
      } else {
        album.topic = '';
      }
      if (data.match(/_albumIntro\"\sclass\=\"rows2.+/g)) {
        album.description = encoder.htmlDecode(data.match(/_albumIntro\"\sclass\=\"rows2.+/g)[0].replace(/_albumIntro.+\"\>|\<br\s\/\>|\<\/p\>/g, ''));
      }
      if (data.match(/detail-title.+/g)) {
        item = data.match(/detail-title.+/g)[0].replace(/detail-title\">|<\/h1>/g, '');
        _tempArr = item.split(' - ');
        _temp_artist = encoder.htmlDecode(_tempArr[_tempArr.length - 1]);
        if (_temp_artist.search(" ft. ") > -1) {
          album.album_artist = JSON.stringify(_temp_artist.trim().split(' ft. '));
        } else {
          album.album_artist = JSON.stringify(_temp_artist.trim().split(','));
        }
        _tempArr.splice(-1);
        album.album_name = encoder.htmlDecode(_tempArr.join(' - '));
      }
      if (data.match(/album-detail-img/g)) {
        _temp = data.match(/album-detail-img.+/g)[0].replace(/album-detail-img|/);
        album.album_thumbnail = _temp.match(/src\=\".+/g)[0].replace(/album-detail-img.+src\=/g, '').replace(/alt.+|\"|src\=/g, '').trim();
        if (album.album_thumbnail.match(/_\d+\..+$/)) {
          _t = album.album_thumbnail.match(/_\d+\..+$/)[0].replace(/_|\..+$/, '');
          _t = new Date(parseInt(_t, 10) * 1000);
          _created = _t.getFullYear() + "-" + (_t.getMonth() + 1) + "-" + _t.getDate() + " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
          album.created = _created;
        }
      }
      if (data.match(/_divPlsLite.+\"\sclass/g)) {
        arr = [];
        _songids = data.match(/_divPlsLite.+\"\sclass/g);
        for (_j = 0, _len1 = _songids.length; _j < _len1; _j++) {
          _songid = _songids[_j];
          arr.push(_songid.replace(/_divPlsLite|\"\sclass/g, ''));
        }
        songids = arr.map(function(v) {
          return _this._convertToInt(v);
        });
      } else {
        album.description = "";
      }
      data = "";
      this.connection.query(this.query._insertIntoZIAlbums, album, function(err) {
        var sid, _k, _len2, _results;
        if (!err) {
          _results = [];
          for (_k = 0, _len2 = songids.length; _k < _len2; _k++) {
            sid = songids[_k];
            _results.push((function(sid, albumid) {
              var _item;
              _item = {
                aid: albumid,
                sid: sid
              };
              return _this.connection.query(_this.query._insertIntoZISongs_Albums, _item, function(err) {
                if (err) {
                  return console.log("Cannot insert new record: " + (JSON.stringify(_item)) + " into Songs_Albums. ERROR: " + err);
                }
              });
            })(sid, albumid));
          }
          return _results;
        }
      });
      return album;
    };

    Zing.prototype._updateAlbums = function(albumid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/album/joke-link/" + (this._convertToId(albumid)) + ".html";
      return this._getFileByHTTP(link, function(data) {
        try {
          _this.stats.totalItemCount += 1;
          _this.stats.currentId = albumid;
          if (data !== null) {
            if (data.match(/xmlURL.+\&amp\;/g) === null) {
              _this.stats.failedItemCount += 1;
              _this.temp.totalFail += 1;
            } else {
              _this.temp.totalFail = 0;
              _this.log.lastAlbumId = albumid;
              _this.stats.passedItemCount += 1;
              _this._processAlbum(albumid, data);
            }
          } else {
            _this.temp.totalFail += 1;
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printUpdateRunning(albumid, _this.stats, "Fetching...");
          if (_this.temp.totalFail >= 1000) {
            _this.utils.printFinalResult(_this.stats);
            return _this._writeLog(_this.log);
          } else {
            return _this._updateAlbums(albumid + 1);
          }
        } catch (e) {
          console.log("CANNOT fetch albumid : " + albumid + ". ERROR: " + e);
          _this.stats.failedItemCount += 1;
          return _this.temp.totalFail += 1;
        }
      });
    };

    Zing.prototype.updateAlbums = function() {
      this.connect();
      this.resetStats();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Albums and Songs_Albums to tables: " + this.table.Albums + " & " + this.table.Songs_Albums).magenta);
      this.temp = {};
      this.temp.totalFail = 0;
      this.stats.currentTable = this.table.Albums + " & " + this.table.Songs_Albums;
      return this._updateAlbums(this.log.lastAlbumId + 1);
    };

    Zing.prototype._processSong = function(songid, data) {
      var arr, _i, _len, _link, _song, _topic, _topics,
        _this = this;
      _song = {
        sid: songid,
        songid: this._convertToId(songid)
      };
      if (data.match(/Lượt\snghe\:.+<\/p>/g)) {
        _song.plays = data.match(/Lượt\snghe\:.+<\/p>/g)[0].replace(/Lượt\snghe\:|<\/p>|\./g, '').trim();
      } else {
        _song.plays = 0;
      }
      if (data.match(/Sáng\stác\:.+<\/a><\/a>/g)) {
        _song.author = encoder.htmlDecode(data.match(/Sáng\stác\:.+<\/a><\/a>/g)[0].replace(/^.+\">|<.+$/g, '').trim());
      } else {
        _song.author = '';
      }
      if (data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)) {
        _topics = data.match(/Thể\sloại\:.+\|\sLượt\snghe/g)[0].replace(/Thể\sloại\:|\s\|\sLượt\snghe/g, '').split(',');
        arr = [];
        for (_i = 0, _len = _topics.length; _i < _len; _i++) {
          _topic = _topics[_i];
          arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
        }
        _song.topic = JSON.stringify(arr);
      } else {
        _song.topic = '';
      }
      if (data.match(/xmlURL.+/)) {
        _link = data.match(/xmlURL.+/)[0].match(/http:\/\/mp3\.zing\.vn\/xml\/song-xml\/[a-zA-Z]+/)[0];
        _link = _link.replace(/song-xml/, 'song').replace(/mp3/, 'm.mp3');
      }
      data = "";
      (function(_song) {
        return _this._getFileByHTTP(_link, function(data) {
          var created, i, path, testArr, _j, _ref, _ref1, _str, _tempSong;
          try {
            data = JSON.parse(data);
            _song.song_name = encoder.htmlDecode(data.data[0].title.trim());
            _song.song_artist = JSON.stringify(encoder.htmlDecode(data.data[0].performer.trim()).split(','));
            _song.song_link = data.data[0].source;
            _str = _song.song_link.replace(/^.+load-song\//g, '').replace(/^.+song-load\//g, '');
            testArr = [];
            for (i = _j = 0, _ref = _str.length - 1; _j <= _ref; i = _j += 4) {
              testArr.push(_this._decodeString(_str.slice(i, i + 4)));
            }
            path = decodeURIComponent(testArr.join('').match(/.+mp3/g));
            created = (_ref1 = path.match(/^\d{4}\/\d{2}\/\d{2}/)) != null ? _ref1[0].replace(/\//g, "-") : void 0;
            _song.path = path;
            _song.created = created;
            _tempSong = {
              sid: _song.sid
            };
            _this.song = _song;
            return _this.connection.query(_this.query._insertIntoZISongs, _song, function(err) {
              if (err) {
                return console.log("Cannot insert song: " + _song.songid + " into table");
              } else {
                return _this._updateLyric(_tempSong);
              }
            });
          } catch (_error) {}
        });
      })(_song);
      return _song = "";
    };

    Zing.prototype._updateSongs = function(songid) {
      var link,
        _this = this;
      link = "http://mp3.zing.vn/bai-hat/joke-link/" + (this._convertToId(songid)) + ".html";
      return this._getFileByHTTP(link, function(data) {
        try {
          _this.stats.totalItemCount += 1;
          _this.stats.currentId = songid;
          if (data !== null) {
            _this._processSong(songid, data);
            data = "";
            _this.stats.passedItemCount += 1;
            _this.log.lastSongId = songid;
            _this.temp.totalFail = 0;
            _this._updateSongs(songid + 1);
          } else {
            _this.stats.failedItemCount += 1;
            _this.temp.totalFail += 1;
            if (_this.temp.totalFail < 2000) {
              _this._updateSongs(songid + 1);
            }
          }
          _this.utils.printUpdateRunning(songid, _this.stats, "Fetching.....");
          if (_this.temp.totalFail === 2000) {
            _this.utils.printFinalResult(_this.stats);
            _this._writeLog(_this.log);
            return _this.updateAlbums();
          }
        } catch (_error) {}
      });
    };

    Zing.prototype.updateSongs = function() {
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Update Songs to table: " + this.table.Songs).magenta);
      this.temp = {};
      this.temp.totalFail = 0;
      this.stats.currentTable = this.table.Songs;
      return this._updateSongs(this.log.lastSongId + 1);
    };

    Zing.prototype._updateSongsOrAlbumsWithRange = function(range0, range1, type) {
      var _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      if (type === 1) {
        console.log(" |" + ("Update Songs to table: " + this.table.Songs).magenta);
        this.stats.currentTable = this.table.Songs;
      } else if (type === 2) {
        console.log(" |" + ("Update Albums to table: " + this.table.Albums).magenta);
        this.stats.currentTable = this.table.Albums;
      }
      return this.fetchRows(range0, range1, type, function(arr) {
        var id, _i, _len, _results;
        console.log("The # of items is: " + arr.length);
        _this.stats.totalItems = arr.length;
        _results = [];
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          id = arr[_i];
          _results.push((function(id) {
            var link;
            if (type === 1) {
              link = "http://mp3.zing.vn/bai-hat/joke-link/" + (_this._convertToId(id)) + ".html";
            } else if (type === 2) {
              link = "http://mp3.zing.vn/album/joke-link/" + (_this._convertToId(id)) + ".html";
            }
            return _this._getFileByHTTP(link, function(data) {
              try {
                _this.stats.totalItemCount += 1;
                _this.stats.currentId = id;
                if (data !== null) {
                  if (type === 1) {
                    _this._processSong(id, data);
                  } else if (type === 2) {
                    _this._processAlbum(id, data);
                  }
                  _this.stats.passedItemCount += 1;
                  data = "";
                } else {
                  _this.stats.failedItemCount += 1;
                }
                _this.utils.printRunning(_this.stats);
                if (_this.stats.totalItems === _this.stats.totalItemCount) {
                  return _this.utils.printFinalResult(_this.stats);
                }
              } catch (_error) {}
            });
          })(id));
        }
        return _results;
      });
    };

    Zing.prototype.updateSongsWithRange = function(range0, range1) {
      return this._updateSongsOrAlbumsWithRange(range0, range1, 1);
    };

    Zing.prototype.updateAlbumsWithRange = function(range0, range1) {
      return this._updateSongsOrAlbumsWithRange(range0, range1, 2);
    };

    Zing.prototype.fetchRows = function(range0, range1, type, onSuccess) {
      var i, nSteps, resultArray, table, typeId, _i, _results,
        _this = this;
      if (type === 1) {
        typeId = "sid";
        table = this.table.Songs;
      } else if (type === 2) {
        typeId = "aid";
        table = this.table.Albums;
      } else if (type === 3) {
        typeId = "vid";
        table = this.table.Videos;
      }
      nSteps = (range1 - range0 + 1) / 1000 | 0 + 1;
      resultArray = [];
      console.log("nsteps is " + nSteps);
      _results = [];
      for (i = _i = 1; 1 <= nSteps ? _i <= nSteps : _i >= nSteps; i = 1 <= nSteps ? ++_i : --_i) {
        _results.push((function(i) {
          var firstId, lastId, _q;
          if ((range1 - range0) >= 1000) {
            firstId = range0 + 1000 * (i - 1);
            lastId = range0 + 1000 * i;
            if (i === nSteps) {
              lastId = range1;
            }
          } else {
            firstId = range0;
            lastId = range1;
          }
          _q = "select " + typeId + " from " + table + " where " + typeId + " < " + lastId + " and " + typeId + " >= " + firstId;
          return _this.connection.query(_q, function(err, results) {
            var b, item, value, _j, _k, _len;
            if (err) {
              return console.log("cannot fetch the results");
            } else {
              b = [];
              for (_j = 0, _len = results.length; _j < _len; _j++) {
                item = results[_j];
                b.push(item[typeId]);
              }
              for (value = _k = firstId; firstId <= lastId ? _k <= lastId : _k >= lastId; value = firstId <= lastId ? ++_k : --_k) {
                if (b.indexOf(value) === -1) {
                  resultArray.push(value);
                }
              }
              if (lastId === range1) {
                return onSuccess(resultArray);
              }
            }
          });
        })(i));
      }
      return _results;
    };

    Zing.prototype.findDiffenceBetween2Strings = function(s1, s2) {
      var arr, i, _i, _ref;
      if (s1.length === s2.length) {
        arr = [];
        for (i = _i = 0, _ref = s1.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (s1[i] !== s2[i]) {
            arr.push(i);
          }
        }
        return arr;
      } else {
        return [];
      }
    };

    /**
    	 * TO GET PATTERN LIKE (38:M,c)----18-----=>(I,b)
    	 * @return {[type]} [description]
    */


    Zing.prototype.test1 = function() {
      var base, base62, originalLink, query,
        _this = this;
      base = "http://mp3.zing.vn/blog?";
      query = "DY4MMy8wMi8xMS84L2EvInagaMEOGFlMDY4MjdhNmQwMzExNDk1YmNjZTIyOTU5ODViOGUdUngWeBXAzfEZvInagaMEmUsICmV2ZXIgQWxvInagaMEWeBmV8SnVzdGFUZWV8MXwy";
      base62 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      originalLink = base + query;
      console.log(originalLink);
      return this._getFileByHTTP(originalLink, function(data) {
        var i, j, link, originalData, _i, _ref, _results;
        console.log(data);
        originalData = JSON.stringify(data).replace(/fsfsdfdsfdserwrwq3\/[a-f0-9]+\/[a-f0-9]+/g, '').replace(/\?q\=[a-f0-9]+\&amp;t\=[0-9]+/g, '');
        _results = [];
        for (i = _i = 0, _ref = query.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          link = query.split('');
          _results.push((function() {
            var _j, _ref1, _results1,
              _this = this;
            _results1 = [];
            for (j = _j = 0, _ref1 = base62.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              if (query[i] !== base62[j]) {
                _results1.push((function(i, j) {
                  var l;
                  link[i] = base62[j];
                  l = base + link.join('');
                  return _this._getFileByHTTP(l, function(d) {
                    var arrayS, indexes, secondaryData, _ref2;
                    if (d !== void 0) {
                      secondaryData = JSON.stringify(d).replace(/fsfsdfdsfdserwrwq3\/[a-f0-9]+\/[a-f0-9]+/g, '').replace(/\?q\=[a-f0-9]+\&amp;t\=[0-9]+/g, '');
                      indexes = _this.findDiffenceBetween2Strings(originalData, secondaryData);
                      if (indexes.length === 1) {
                        arrayS = "0123456789abcdefmp/.".split('');
                        if (_ref2 = indexes.map(function(index) {
                          return secondaryData[index];
                        }).join(' '), __indexOf.call(arrayS, _ref2) >= 0) {
                          return console.log("(" + i + ":" + query[i] + "," + (indexes.map(function(index) {
                            return originalData[index];
                          }).join(' ')) + ")----" + (indexes[0] - 28) + "-----=>(" + base62[j] + "," + (indexes.map(function(index) {
                            return secondaryData[index];
                          }).join(' ')) + ")");
                        }
                      }
                    }
                  });
                })(i, j));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(_this));
        }
        return _results;
      });
    };

    Zing.prototype.test = function() {
      var base, base24_A, base24_B, base62, baseC, basei, basej, basek, i, j, k, nCounts, originalLink, query, suffix, suffix1, uri, _i, _len, _results;
      base = "http://mp3.zing.vn/blog?";
      query = "MjAxMyUyRjAzJTJGMDklMkY5JTJGYyUyRjljYmQzM2I4OWE4ZWUyOTU1YTcyZjI3MTU0ZGIzMTk1Lm1wMyU3QzI";
      suffix = "**4MMy8wMi8xMS84L2EvInagaMEOGFlMDY4MjdhNmQwMzExNDk1YmNjZTIyOTU5ODViOGUdUngWeBXAzfEZvInagaMEmUsICmV2ZXIgQWxvInagaMEWeBmV8SnVzdGFUZWV8MXwy";
      base62 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=";
      base24_A = "IJKLMNOPQRSTUVWXYZabcdef";
      base24_B = "CDEFGHSTUVWXijklmnyz0123";
      originalLink = base + query;
      base62 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      basei = "ABCDEFGH";
      basej = "ABCDEFGHQRSTUVWXghijklmnwxyz0123";
      basek = "ABEFIJMNQRUVYZcdghklopstwx014589";
      baseC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      nCounts = 0;
      suffix1 = "åæøxMyUyRjAzJTJGMDklMkY5JTJGYyUyRjljYmQzM2I4OWE4ZWUyOTU1YTcyZjI3MTU0ZGIzMTk1Lm1wMyU3QzI";
      _results = [];
      for (_i = 0, _len = basei.length; _i < _len; _i++) {
        i = basei[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = basej.length; _j < _len1; _j++) {
            j = basej[_j];
            _results1.push((function() {
              var _k, _len2, _results2,
                _this = this;
              _results2 = [];
              for (_k = 0, _len2 = basek.length; _k < _len2; _k++) {
                k = basek[_k];
                uri = suffix1.replace(/[å]+/g, i).replace(/[æ]+/g, j).replace(/[ø]+/g, k);
                _results2.push((function(i, j, k, uri) {
                  var link;
                  link = base + uri;
                  process.stdout.write("(" + i + "," + j + "," + k + ")\r");
                  return _this._getFileByHTTP(link, function(data) {
                    if (data !== void 0) {
                      data = JSON.stringify(data).replace(/fsfsdfdsfdserwrwq3\/[a-f0-9]+\/[a-f0-9]+/g, '').replace(/^..+zdn\.vn\/\//g, '').replace(/\?q\=.+/, '');
                      process.stdout.write("(" + i + "," + j + "," + k + ")\r");
                      nCounts += 1;
                      data = encoder.htmlDecode(data);
                      if (data[0] !== "�" && data[1] !== "�" && data[2] !== "�") {
                        return console.log(("(" + (uri.substr(0, 4)) + ")=>(" + (data.substr(0, 14)) + ")---") + ("(" + (uri.substr(0, 4).split('').map(function(v) {
                          return v.charCodeAt(0);
                        })) + ")=>") + ("(" + (data.substr(0, 14).split('').map(function(v) {
                          return v.charCodeAt(0);
                        })) + ")"));
                      }
                    }
                  });
                })(i, j, k, uri));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Zing.prototype.showStats = function() {
      return this._printTableStats(ZI_CONFIG.table);
    };

    return Zing;

  })(Module);

  module.exports = Zing;

}).call(this);
