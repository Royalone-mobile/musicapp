// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, Module, Site, Utils, colors, encoder, http, xml2js,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  Site = (function(_super) {

    __extends(Site, _super);

    function Site(PREFIX) {
      if (PREFIX != null) {
        this.table = {
          Songs: PREFIX + "Songs",
          Albums: PREFIX + "Albums",
          Songs_Albums: PREFIX + "Songs_Albums",
          Videos: PREFIX + "Videos"
        };
        this.query = {
          _insertIntoSongs: "INSERT IGNORE INTO " + this.table.Songs + " SET ?",
          _insertIntoAlbums: "INSERT IGNORE INTO " + this.table.Albums + " SET ?",
          _insertIntoSongs_Albums: "INSERT IGNORE INTO " + this.table.Songs_Albums + " SET ?",
          _insertIntoVideos: "INSERT IGNORE INTO " + this.table.Videos + " SET ?"
        };
        this.utils = new Utils();
        this.parser = new xml2js.Parser();
        Site.__super__.constructor.call(this);
      } else {
        console.log("You do not specify any PREFIX".red);
      }
    }

    Site.prototype.getFileByHTTP = function(link, onSucess, onFail, options) {
      var _this = this;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        if (res.statusCode !== 302) {
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            return onSucess(data, options);
          });
        } else {
          return onFail("The link is temporary moved", options);
        }
      }).on('error', function(e) {
        return onFail("Cannot get file from server. ERROR: " + e.message, options);
      });
    };

    /**
    	 * Process the string or an Array of string: HTML decode, trim
    	 * @param  {[string] | [array]} 
    	 * @return {[string]}  [resulted string]
    */


    Site.prototype.processStringorArray = function(a) {
      if (a instanceof Array) {
        return JSON.stringify(a.map(function(v) {
          return encoder.htmlDecode(v).trim();
        }));
      } else {
        return encoder.htmlDecode(a).trim();
      }
    };

    Site.prototype.formatDate = function(dt) {
      return dt.getFullYear() + "-" + (dt.getMonth() + 1) + "-" + dt.getDay() + " " + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
    };

    Site.prototype.showStartupMessage = function(message, table) {
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("" + message + " " + table).magenta);
      return this.stats.currentTable = table;
    };

    Site.prototype.showStats = function() {
      return this._printTableStats(this.table);
    };

    return Site;

  })(Module);

  module.exports = Site;

}).call(this);
