// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, KE_CONFIG, Keeng, Module, Utils, atob, colors, encoder, fs, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  atob = require('atob');

  fs = require('fs');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  KE_CONFIG = {
    table: {
      Songs: "KESongs",
      Videos: "KEVideos"
    }
  };

  Keeng = (function(_super) {

    __extends(Keeng, _super);

    function Keeng(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : KE_CONFIG;
      this.fetchVideos = __bind(this.fetchVideos, this);

      this.fetchAlbums = __bind(this.fetchAlbums, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoKESongs: "INSERT IGNORE INTO " + this.table.Songs + " SET ?",
        _insertIntoKEVideos: "INSERT IGNORE INTO " + this.table.Videos + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      Keeng.__super__.constructor.call(this, this.mysqlConfig);
    }

    Keeng.prototype._getFileByHTTP = function(link, callback) {
      var _this = this;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        if (res.statusCode !== 302) {
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            return callback(data);
          });
        } else {
          return callback(null);
        }
      }).on('error', function(e) {
        return console.log("Cannot get file. ERROR: " + e.message);
      });
    };

    Keeng.prototype.createTables = function() {
      var songsQuery,
        _this = this;
      this.connect();
      songsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Songs + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					albumid varchar(20),					album_name varchar(255),					songid varchar(20),					song_name varchar(255),					artist_name varchar(255),					album_plays int,					album_link varchar(255),					song_link varchar(255)					);";
      return this.connection.query(songsQuery, function(err, result) {
        if (err) {
          console.log("Cannot create table");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been created!");
        }
        return _this.end();
      });
    };

    Keeng.prototype.resetTables = function() {
      var songsQuery,
        _this = this;
      this.connect();
      songsQuery = "truncate table " + this.table.Songs + " ;";
      return this.connection.query(songsQuery, function(err, result) {
        if (err) {
          console.log("Cannot truncate tables");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been truncated!");
        }
        return _this.end();
      });
    };

    Keeng.prototype._updateAlbum = function(pageId) {
      var link,
        _this = this;
      link = "http://www.keeng.vn/album/album-moi.html?page=" + pageId;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, i, item, items, _i, _len, _results;
          items = data.match(/class\=\"link\sname-song\sunder\".+/g);
          data = "";
          _results = [];
          for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
            item = items[i];
            album = {
              title: item.match(/^class.+name-single/g)[0].match(/^class.+\<\/a\>/g)[0].replace(/^class.+\"\>/, '').replace(/\<\/a\>/, '').trim(),
              artist_name: item.replace(/^class.+\"\>/g, '').replace(/\<\/a\>\<\/p\>/, '').trim(),
              id: item.match(/^.+name-single/g)[0].match(/^.+ title/)[0].replace(/^.+\/.+\/.+\//, '').replace(/\.html.+/, '')
            };
            if (_this.temp.isNewPage) {
              _results.push((function(album, i) {
                var _query;
                _query = "select * from " + _this.table.Songs + " where albumid=" + (_this.connection.escape(album.id));
                return _this.connection.query(_query, function(err, result) {
                  var _j, _len1, _ref, _results1;
                  if (err) {
                    return console.log("We have error: " + err);
                  } else {
                    if (result.toString() === '') {
                      _this.temp.albumList.push(album);
                      if (i === items.length - 1) {
                        return _this._updateAlbum(pageId + 1);
                      }
                    } else {
                      if (pageId === 1 && i === 0) {
                        console.log("Table: " + _this.table.Songs + " is up-to-date");
                      }
                      _this.temp.isNewPage = false;
                      if (_this.temp.check === false) {
                        _this.temp.check = true;
                        _ref = _this.temp.albumList;
                        _results1 = [];
                        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                          album = _ref[_j];
                          _results1.push(_this._updateSongs(album));
                        }
                        return _results1;
                      }
                    }
                  }
                });
              })(album, i));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Keeng.prototype._updateSongs = function(album) {
      var link,
        _this = this;
      link = "http://www.keeng.vn/album/get-album-xml?album_identify=" + album.id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var i, ids, locations, song, titles, _i, _ref;
          data = data.replace(/\r/g, '');
          titles = data.match(/\<title\>.+\<\/title\>/g);
          locations = data.match(/\<location\>.+\<\/location\>/g);
          ids = data.match(/\<info\>.+\<\/info\>/g);
          _this.stats.totalItemCount += 1;
          if (locations !== null) {
            _this.stats.passedItemCount += 1;
            for (i = _i = 0, _ref = locations.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              song = {
                albumid: album.id,
                album_name: encoder.htmlDecode(album.title),
                songid: ids[i + 1].replace(/\<info\>/, '').replace(/<\/info\>/, '').trim(),
                song_name: encoder.htmlDecode(titles[i + 1].replace(/\<title\>/, '').replace(/<\/title\>/, '').trim()),
                song_link: locations[i].replace(/\<location\>/, '').replace(/<\/location\>/, '').trim(),
                artist_name: encoder.htmlDecode(album.artist_name)
              };
              if (song.song_link.match(/\d{4}\/\d{2}\/\d{2}/) !== null) {
                song.created = song.song_link.match(/\d{4}\/\d{2}\/\d{2}/)[0].replace(/\//g, '-');
              }
              _this.connection.query(_this.query._insertIntoKESongs, song, function(err) {
                if (err) {
                  return console.log(("CANNOT insert songid " + song.songid + ". ERROR: " + err).red);
                }
              });
            }
            _this.utils.printUpdateRunning(album.id, _this.stats, "Fetching");
          } else {
            _this.stats.failedItemCount += 1;
          }
          if (_this.stats.totalItemCount === _this.temp.albumList.length) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Keeng.prototype._fetchAlbum = function(pageId) {
      var link,
        _this = this;
      link = "http://www.keeng.vn/album/album-moi.html?page=" + pageId;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, i, item, items, _i, _len, _results;
          items = data.match(/class\=\"link\sname-song\sunder\".+/g);
          data = "";
          _results = [];
          for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
            item = items[i];
            album = {
              title: item.match(/^class.+name-single/g)[0].match(/^class.+\<\/a\>/g)[0].replace(/^class.+\"\>/, '').replace(/\<\/a\>/, '').trim(),
              artist_name: item.replace(/^class.+\"\>/g, '').replace(/\<\/a\>\<\/p\>/, '').trim(),
              id: item.match(/^.+name-single/g)[0].match(/^.+ title/)[0].replace(/^.+\/.+\/.+\//, '').replace(/\.html.+/, '')
            };
            _results.push(_this._fetchSongs(album));
          }
          return _results;
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Keeng.prototype._fetchSongs = function(album) {
      var link,
        _this = this;
      link = "http://www.keeng.vn/album/get-album-xml?album_identify=" + album.id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var i, ids, locations, song, titles, _i, _ref;
          data = data.replace(/\r/g, '');
          titles = data.match(/\<title\>.+\<\/title\>/g);
          locations = data.match(/\<location\>.+\<\/location\>/g);
          ids = data.match(/\<info\>.+\<\/info\>/g);
          _this.stats.totalItemCount += 1;
          if (locations !== null) {
            _this.stats.passedItemCount += 1;
            for (i = _i = 0, _ref = locations.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              song = {
                albumid: album.id,
                album_name: album.title,
                songid: ids[i + 1].replace(/\<info\>/, '').replace(/<\/info\>/, '').trim(),
                song_name: titles[i + 1].replace(/\<title\>/, '').replace(/<\/title\>/, '').trim(),
                song_link: locations[i].replace(/\<location\>/, '').replace(/<\/location\>/, '').trim(),
                artist_name: album.artist_name
              };
              if (song.song_link.match(/\d{4}\/\d{2}\/\d{2}/) !== null) {
                song.created = song.song_link.match(/\d{4}\/\d{2}\/\d{2}/)[0].replace(/\//g, '-');
              }
              _this.connection.query(_this.query._insertIntoKESongs, song, function(err) {
                if (err) {
                  return console.log(("CANNOT insert songid " + song.songid).red);
                }
              });
            }
            _this.utils.printRunning(_this.stats);
          } else {
            _this.stats.failedItemCount += 1;
          }
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Keeng.prototype.fetchAlbums = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching songid: " + range0 + ".." + range1 + " to table: " + this.table.Songs).magenta);
      this.stats.totalItems = (range1 - range0 + 1) * 25;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Albums;
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchAlbum(id);
      }
      return null;
    };

    Keeng.prototype._fetchVideos = function(pageId) {
      var link,
        _this = this;
      link = "http://www.keeng.vn/video/video-moi.html?page=" + pageId;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var i, item, items, video, _i, _len;
          items = data.match(/class\=\"link\sname-song\sunder\".+/g);
          data = "";
          for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
            item = items[i];
            _this.stats.totalItemCount += 1;
            _this.stats.passedItemCount += 1;
            video = {
              vid: item.match(/^.+name-single/g)[0].match(/^.+ title/)[0].replace(/^.+\/.+\/.+\//, '').replace(/\.html.+/, '')
            };
            _this.connection.query(_this.query._insertIntoKEVideos, video, function(err) {
              if (err) {
                return console.log("cannt insert video id: " + video.vid);
              }
            });
            _this.utils.printRunning(_this.stats);
          }
          if (_this.stats.totalItems === _this.stats.totalItemCount) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Keeng.prototype.fetchVideos = function(range0, range1) {
      var id, _i, _ref, _results;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching videoid: " + range0 + ".." + range1 + " to table: " + this.table.Videos).magenta);
      this.stats.totalItems = (range1 - range0 + 1) * 28;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Videos;
      _results = [];
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _results.push(this._fetchVideos(id));
      }
      return _results;
    };

    Keeng.prototype._updateVideos = function() {
      var _q,
        _this = this;
      _q = "select vid from KEVideos_test LIMIT 7";
      return this.connection.query(_q, function(err, results) {
        var index, video, _i, _len, _results;
        if (err) {
          return console.log("cannt fetch videos from table");
        } else {
          _this.stats.totalItems = results.length;
          _results = [];
          for (index = _i = 0, _len = results.length; _i < _len; index = ++_i) {
            video = results[index];
            _results.push((function(video, index) {
              var link;
              link = "http://www.keeng.vn/video/joke-link/" + video.vid + ".html";
              return _this._getFileByHTTP(link, function(data) {
                var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _t, _temp, _video;
                _video = {
                  vid: video.vid
                };
                _this.stats.totalItemCount++;
                if (data !== null) {
                  if (data.match(/name-song\".+/g)) {
                    _temp = data.match(/name-song\".+/g)[0];
                    _video.name = encoder.htmlDecode(_temp.replace(/<\/span>.+$/g, '').replace(/^.+>/g, ''));
                    _t = _temp.replace(/^.+<\/span>/g, '').split(" ft ");
                    _video.artists = JSON.stringify(_t.map(function(v) {
                      return encoder.htmlDecode(v.replace(/<\/a>.+$/g, '').replace(/^.+>/g, ''));
                    }));
                    _video.playingid = (_ref = _temp.match(/playingid=\d+/g)) != null ? (_ref1 = _ref[0].match(/\d+/g)) != null ? _ref1[0] : void 0 : void 0;
                  }
                  if (data.match(/Lượt\snghe:.+/g)) {
                    _video.plays = (_ref2 = data.match(/Lượt\snghe:.+/g)[0].match(/\d+/g)) != null ? _ref2[0] : void 0;
                  }
                  if (data.match(/videoPlayerLink.+/g)) {
                    _video.link = (_ref3 = data.match(/videoPlayerLink.+/g)) != null ? (_ref4 = _ref3[0].match(/http.+/)) != null ? _ref4[0].replace(/\';/g, '') : void 0 : void 0;
                  }
                  if (data.match(/videoImageLink.+/g)) {
                    _video.thumbnail = atob((_ref5 = data.match(/videoImageLink.+/g)) != null ? _ref5[0].replace(/\";/g, '').replace(/^.+\"/g, '').trim() : void 0);
                    _video.created = (_ref6 = _video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) != null ? _ref6[0] : void 0;
                  }
                  if (data.match(/link\stl\sunder.+/g)) {
                    _video.topic = encoder.htmlDecode(data.match(/link\stl\sunder.+/g)[0].replace(/<\/a>.+$/g, '').replace(/^.+>/g, ''));
                  }
                  data = JSON.stringify(data);
                  if (data.match(/statis.+link\stl\sunder/g)) {
                    _video.author = data.match(/statis.+link\stl\sunder/g)[0].replace(/<\/a>.+$/g, '').replace(/^.+>/g, '');
                    if (_video.author.search(/Đang\scập\snhật/) > -1) {
                      _video.author = "";
                    }
                  }
                  _this.stats.passedItemCount++;
                  _this.connection.query(_this.query._insertIntoKEVideos, _video, function(err) {
                    if (err) {
                      return console.log("cannt insert new videoid " + _video.vid + " into table. ERROR: " + err);
                    } else {
                      return _this.connection.query("delete from KEVideos_test where vid=" + (_this.connection.escape(_video.vid)));
                    }
                  });
                } else {
                  _this.stats.failedItemCount++;
                }
                _this.utils.printRunning(_this.stats);
                if (index === 6) {
                  _this._updateVideos();
                }
                if (_this.stats.totalItems === _this.stats.totalItemCount) {
                  return _this.utils.printFinalResult(_this.stats);
                }
              });
            })(video, index));
          }
          return _results;
        }
      });
    };

    Keeng.prototype.updateVideos = function() {
      var _q;
      this.connect();
      console.log(" |" + ("Update videos to table: " + this.table.Videos).magenta);
      _q = "select vid from KEVideos_test LIMIT 7";
      return this._updateVideos();
    };

    Keeng.prototype.update = function() {
      this.connect();
      this.stats.currentTable = this.table.Songs;
      this.temp = {
        albumList: [],
        check: false,
        isNewPage: true
      };
      console.log(" |" + ("Updating Albums + Songs to table: " + this.table.Songs).magenta);
      return this._updateAlbum(1);
    };

    Keeng.prototype.showStats = function() {
      return this._printTableStats(KE_CONFIG.table);
    };

    return Keeng;

  })(Module);

  module.exports = Keeng;

}).call(this);
