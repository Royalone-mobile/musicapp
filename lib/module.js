// Generated by CoffeeScript 1.4.0
(function() {
  var MYSQL_DEFAULT_CONFIG, Module, fs, moduleKeywords, mysql,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mysql = require('mysql');

  fs = require('fs');

  moduleKeywords = ['extended', 'included'];

  MYSQL_DEFAULT_CONFIG = {
    user: 'root',
    password: 'root',
    database: 'anbinh',
    port: '8889'
  };

  Module = (function() {

    function Module(serverConfig) {
      this.serverConfig = serverConfig != null ? serverConfig : MYSQL_DEFAULT_CONFIG;
      this.stats = {
        totalItemCount: 0,
        passedItemCount: 0,
        failedItemCount: 0,
        markedTimer: Date.now(),
        totalDuration: 0,
        totalItems: 0,
        range0: 0,
        range1: 0,
        currentId: 0,
        currentTable: ""
      };
      this.logPath = "";
    }

    Module.prototype.connect = function() {
      this.connection = mysql.createConnection(this.serverConfig);
      this.connection.connect();
      return this;
    };

    Module.prototype.resetStats = function() {
      return this.stats = {
        totalItemCount: 0,
        passedItemCount: 0,
        failedItemCount: 0,
        markedTimer: Date.now(),
        totalDuration: 0,
        totalItems: 0,
        range0: 0,
        range1: 0
      };
    };

    Module.prototype.end = function() {
      this.connection.end();
      return this;
    };

    Module.prototype._readLog = function() {
      var data;
      data = fs.readFileSync(this.logPath, "utf8");
      return this.log = JSON.parse(data);
    };

    Module.prototype._writeLog = function(log) {
      log.updated_at = new Date().getTime();
      return fs.writeFileSync(this.logPath, JSON.stringify(log), "utf8");
    };

    Module.prototype._printTableStats = function(tables) {
      var key, value, _results,
        _this = this;
      this.connect();
      _results = [];
      for (key in tables) {
        value = tables[key];
        _results.push((function(key, value) {
          var _query;
          _query = "Select count(*) count from " + value;
          return _this.connection.query(_query, function(err, result) {
            return console.log("Total records of " + value + ": " + result[0].count);
          });
        })(key, value));
      }
      return _results;
    };

    Module.extend = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.include = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    return Module;

  })();

  module.exports = Module;

}).call(this);
