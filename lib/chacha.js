// Generated by CoffeeScript 1.4.0
(function() {
  var CC_CONFIG, Chacha, Encoder, Module, Utils, colors, encoder, events, fs, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  fs = require('fs');

  events = require('events');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  CC_CONFIG = {
    table: {
      Songs: "CCSongs",
      Albums: "CCAlbums",
      Songs_Albums: "CCSongs_Albums"
    },
    logPath: "./log/CCLog.txt"
  };

  Chacha = (function(_super) {

    __extends(Chacha, _super);

    function Chacha(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : CC_CONFIG;
      this.fetchSongs = __bind(this.fetchSongs, this);

      this.fetchAlbums = __bind(this.fetchAlbums, this);

      this.processAlbum = __bind(this.processAlbum, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoCCSongs: "INSERT INTO " + this.table.Songs + " SET ?",
        _insertIntoCCAlbums: "INSERT INTO " + this.table.Albums + " SET ?",
        _insertIntoCCSongs_Albums: "INSERT INTO " + this.table.Songs_Albums + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      this.eventEmitter = new events.EventEmitter();
      Chacha.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Chacha.prototype.createTables = function() {
      var albumsQuery, songsQuery, _query,
        _this = this;
      this.connect();
      songsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Songs + " (					songid int NOT NULL,					song_name varchar(255),					album varchar(200),					artistid int,					artist_name varchar(255),					duration int,					bitrate int,					thumbnail varchar(255),					link varchar(255)					);";
      albumsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Albums + " (					albumid int NOT NULL,					album_name varchar(255),					album_artist varchar(200),					songid int					);";
      _query = songsQuery + albumsQuery;
      return this.connection.query(_query, function(err, result) {
        if (err) {
          console.log("Cannot create table");
        } else {
          console.log("Tables: " + _this.table.Songs + " and " + _this.table.Albums + " have been created!");
        }
        return _this.end();
      });
    };

    Chacha.prototype.resetTables = function() {
      var songsQuery,
        _this = this;
      this.connect();
      songsQuery = "truncate table " + this.table.Songs + " ;";
      return this.connection.query(songsQuery, function(err, result) {
        if (err) {
          console.log("Cannot truncate tables");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been truncated!");
        }
        return _this.end();
      });
    };

    Chacha.prototype.getFileByHTTP = function(link, onSucess, onFail, options) {
      var _this = this;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        if (res.statusCode !== 302) {
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            return onSucess(data, options);
          });
        } else {
          return onFail("The link is temporarily moved", options);
        }
      }).on('error', function(e) {
        return onFail("Cannot get file from server. ERROR: " + e.message, options);
      });
    };

    Chacha.prototype._storeSong = function(song) {
      var _artistid, _duration, _item;
      if (song.thumb.match(/artists\/\/s5\/\d+/)) {
        _artistid = parseInt(song.thumb.match(/artists\/\/s5\/\d+/)[0].replace(/artists\/\/s5\//, ''));
      } else {
        _artistid = 0;
      }
      _duration = parseInt(song.duration.split(':')[0]) * 60 + parseInt(song.duration.split(':')[1]);
      _item = {
        songid: song.id,
        song_name: song.name.trim(),
        artistid: _artistid,
        artist_name: song.artist.trim(),
        duration: _duration,
        bitrate: parseInt(song.bitrate),
        thumbnail: song.thumb,
        link: song.url
      };
      return this.connection.query(this.query._insertIntoCCSongs, _item, function(err) {
        if (err) {
          return console.log("Cannot insert the song into table. ERROR: " + err);
        }
      });
    };

    Chacha.prototype._storeAlbum = function(id, album, name, artist) {
      var index, song, _artistid, _duration, _i, _item, _len, _results,
        _this = this;
      _results = [];
      for (index = _i = 0, _len = album.length; _i < _len; index = ++_i) {
        song = album[index];
        if (song.thumb.match(/artists\/\/s5\/\d+/)) {
          _artistid = parseInt(song.thumb.match(/artists\/\/s5\/\d+/)[0].replace(/artists\/\/s5\//, ''));
        } else {
          _artistid = 0;
        }
        _duration = parseInt(song.duration.split(':')[0]) * 60 + parseInt(song.duration.split(':')[1]);
        _item = {
          albumid: id,
          album_name: name,
          album_artist: artist,
          songid: song.id
        };
        _results.push(this.connection.query(this.query._insertIntoCCAlbums, _item, function(err) {
          if (err) {
            return console.log(("Cannot insert the song into table: " + _this.table.Albums + ". ERROR: ") + err);
          }
        }));
      }
      return _results;
    };

    Chacha.prototype._updateSong = function(id) {
      var link,
        _this = this;
      link = "http://www.chacha.vn/song/play/" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          _this.stats.totalItemCount += 1;
          _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
          if (res.statusCode === 200) {
            _this.stats.passedItemCount += 1;
            data = JSON.parse(data);
            _this._storeSong(data);
            _this.log.lastSongId = id;
            _this._updateSong(id + 1);
            return _this.temp.totalFail = 0;
          } else {
            _this.stats.failedItemCount += 1;
            _this.temp.totalFail += 1;
            _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
            if (_this.temp.totalFail === 100) {
              if (_this.stats.passedItemCount !== 0) {
                _this.utils.printFinalResult(_this.stats);
                _this._writeLog(_this.log);
              } else {
                console.log("");
                console.log("Table: " + _this.table.Songs + " is up-to-date");
              }
              _this.resetStats();
              return _this.updateAlbums();
            } else {
              return _this._updateSong(id + 1);
            }
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Chacha.prototype.processAlbum = function(data, options) {
      var album, arr, plays, songs, sum, _ref, _ref1, _ref2, _ref3;
      if (data !== null) {
        album = {
          albumid: options.id,
          album_name: "",
          album_artist: "",
          nsongs: 0,
          thumbnail: "",
          plays: 0
        };
        arr = data.match(/\<meta\sname\=\"title\".+\/\>/g)[0].replace(/\<meta\sname\=\"title\"\scontent\=\"/, '').match(/^.+\|/)[0].replace(/\|/, '').trim().split('-');
        album.album_name = (_ref = arr[0]) != null ? _ref.trim() : void 0;
        album.album_artist = (_ref1 = arr[1]) != null ? _ref1.trim() : void 0;
        album.thumbnail = (_ref2 = data.match(/album-image.+[\r\n\t]+.+/g)) != null ? _ref2[0] : void 0;
        if (album.thumbnail !== void 0) {
          album.thumbnail = album.thumbnail.replace(/\?.+/g, '').replace(/album-image.+[\r\n\t]+.+\"/g, '');
        } else {
          album.thumbnail = "";
        }
        album.description = (_ref3 = data.match(/full-desc.+/)) != null ? _ref3[0] : void 0;
        if (album.description !== void 0) {
          album.description = encoder.htmlDecode(album.description.replace(/<br\/><a.+view-more-full.+$/g, '').replace(/full-desc\">/g, '').replace(/<\/p>$/g, '').replace(/^<p>/g, '').replace(/<\/span>$/g, '').replace(/^<span.+\">/g, '').replace(/<\/p>$/g, '').replace(/^<p.+\">/g, ''));
          if (album.description.match(/songLyric/) || album.description.match(/Đang cập nhật thông tin/ig)) {
            album.description = "";
          }
        }
        plays = data.match(/total-played.+/g);
        sum = 0;
        if (plays !== null) {
          plays = plays.map(function(v) {
            return v.replace(/<\/span>/g, '').replace(/total-played\">/g, '');
          });
          plays.forEach(function(v) {
            if (v !== '') {
              return sum += parseInt(v);
            }
          });
          album.nsongs = plays.length - 1;
          if (plays.length > 1) {
            sum = sum / album.nsongs;
          }
        }
        album.plays = sum;
        songs = data.match(/avatar\sinline\splayer\ssong\d+/g);
        if (songs !== null) {
          songs = songs.map(function(v) {
            return v.replace(/avatar\sinline\splayer\ssong/g, '');
          });
        }
        album.songs = songs;
      } else {
        album = null;
      }
      this.eventEmitter.emit('result', album);
      return album;
    };

    Chacha.prototype._updateAlbum = function(id) {
      var link, onFail, options,
        _this = this;
      link = "http://www.chacha.vn/album/fake-link," + id + ".html";
      options = {
        id: id
      };
      this.stats.totalItemCount += 1;
      this.utils.printUpdateRunning(id, this.stats, "Fetching...");
      onFail = function(err, options) {
        _this.stats.failedItemCount += 1;
        _this.temp.totalFail += 1;
        if (_this.temp.totalFail < 100) {
          return _this._updateAlbum(options.id + 1);
        } else {
          _this.utils.printFinalResult(_this.stats);
          return _this._writeLog(_this.log);
        }
      };
      return this.getFileByHTTP(link, this.processAlbum, onFail, options);
    };

    Chacha.prototype._updateAlbumName = function(id, album) {
      var link,
        _this = this;
      link = "http://www.chacha.vn/album/fake-link," + id + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, artist, name;
          if (res.statusCode === 410) {
            _this.stats.passedItemCount -= 1;
            _this.stats.failedItemCount += 1;
            return _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
          } else {
            arr = data.match(/\<meta\sname\=\"title\".+\/\>/g)[0].replace(/\<meta\sname\=\"title\"\scontent\=\"/, '').match(/^.+\|/)[0].replace(/\|/, '').trim().split('-');
            name = arr[0].trim();
            artist = arr[1].trim();
            data = "";
            return _this._storeAlbum(id, album, name, artist);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Chacha.prototype._fetchSongs = function(id) {
      var link,
        _this = this;
      link = "http://www.chacha.vn/song/play/" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          _this.stats.totalItemCount += 1;
          if (res.statusCode === 200) {
            _this.stats.passedItemCount += 1;
            data = JSON.parse(data);
            _this._storeSong(data);
            _this.utils.printRunning(_this.stats);
          } else {
            _this.stats.failedItemCount += 1;
          }
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Chacha.prototype.fetchAlbums = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching songid: " + range0 + ".." + range1 + " to table: " + this.table.Songs).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Albums;
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchAlbum(id);
      }
      return null;
    };

    Chacha.prototype.fetchSongs = function(range0, range1) {
      var id, _fn, _i, _ref,
        _this = this;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching songid: " + range0 + ".." + range1 + " to table: " + this.table.Songs).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Songs;
      _fn = function(id) {
        return _this._fetchSongs(id);
      };
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _fn(id);
      }
      return null;
    };

    Chacha.prototype.update = function() {
      this.connect();
      this._readLog();
      this.temp = {};
      this.temp.totalFail = 0;
      this.stats.currentTable = this.table.Songs;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Songs to table: " + this.table.Songs).magenta);
      return this._updateSong(this.log.lastSongId + 1);
    };

    Chacha.prototype.updateAlbums = function() {
      var _this = this;
      this.connect();
      this._readLog();
      this.temp = {};
      this.temp.totalFail = 0;
      this.stats.currentTable = this.table.Albums;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Albums to table: " + this.table.Albums).magenta);
      this.temp = {
        totalFail: 0
      };
      this.eventEmitter.on('result', function(result) {
        var songs;
        if (result !== null) {
          _this.stats.passedItemCount += 1;
          _this.temp.totalFail += 0;
          _this.log.lastAlbumId = result.albumid;
          songs = result.songs;
          delete result.songs;
          if (songs !== null) {
            _this.connection.query(_this.query._insertIntoCCAlbums, result, function(err) {
              var song, _i, _len, _results;
              if (err) {
                return console.log("cannt insert album: " + result.albumid + " into table. ERROR " + err);
              } else {
                _results = [];
                for (_i = 0, _len = songs.length; _i < _len; _i++) {
                  song = songs[_i];
                  _results.push((function(song) {
                    return _this.connection.query(_this.query._insertIntoCCSongs_Albums, {
                      albumid: result.albumid,
                      songid: song
                    }, function(err) {
                      if (err) {
                        return console.log("cannt insert song " + song + " into table. ERROR " + err);
                      }
                    });
                  })(song));
                }
                return _results;
              }
            });
          } else {
            _this.stats.passedItemCount -= 1;
            _this.stats.failedItemCount += 1;
            _this.temp.totalFail += 1;
          }
        } else {
          _this.stats.failedItemCount += 1;
          _this.temp.totalFail += 1;
        }
        return _this._updateAlbum(result.albumid + 1);
      });
      return this._updateAlbum(this.log.lastAlbumId + 1);
    };

    Chacha.prototype.showStats = function() {
      return this._printTableStats(CC_CONFIG.table);
    };

    return Chacha;

  })(Module);

  module.exports = Chacha;

}).call(this);
