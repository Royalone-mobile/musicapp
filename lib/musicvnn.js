// Generated by CoffeeScript 1.4.0
(function() {
  var MusicVNN, Site, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Site = require("./Site");

  fs = require('fs');

  MusicVNN = (function(_super) {

    __extends(MusicVNN, _super);

    function MusicVNN() {
      MusicVNN.__super__.constructor.call(this, "MV");
    }

    MusicVNN.prototype.fetchSongs = function() {
      var callbackOnFail, callbackOnSucess, id, link, options, range0, range1, _fn, _i, _ref, _results,
        _this = this;
      this.showStartupMessage("Fetching Songs from table", this.table.Songs);
      _ref = [72197, 72197], range0 = _ref[0], range1 = _ref[1];
      this.connect();
      this.stats.totalItems = range1 - range0 + 1;
      _fn = function(id) {};
      _results = [];
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _fn(id);
        link = "http://music.vnn.vn/nhac/detail/" + id + "/joke.link-.htm";
        options = {
          id: id
        };
        callbackOnSucess = function(data, options) {
          var _info, _item, _ref1, _ref2, _ref3;
          _this.stats.totalItemCount++;
          if (data.search("Object reference not set to an instance of an object") === -1) {
            try {
              data = JSON.stringify(data);
              _item = {
                id: options.id
              };
              _info = (_ref1 = data.match(/title_song.+lượt\snghe\s\|/)) != null ? _ref1[0].trim() : void 0;
              _info = _info.replace(/\\r|\\t|\\n/g, '');
              _item.name = _this.processStringorArray((_ref2 = _info.match(/^.+<\/a>\s-\s<span>/)) != null ? _ref2[0].replace(/<\/a>\s-\s<span>/g, '').replace(/^.+>/g, '') : void 0);
              _item.name = _item.name.replace(/Gieohạt/i, "gieo hạt");
              _item.artists = _this.processStringorArray(_info.replace(/<\/a><\/span>.+$/g, '').replace(/^.+>/g, '').split(" ft. "));
              _item.plays = _this.processStringorArray(_info.replace(/lượt\snghe.+$/g, '').replace(/^.+\||\./g, ''));
              if (_info.search(/<\/a>\s+\|.+$/g, '') > -1) {
                _item.topic = _this.processStringorArray(_info.replace(/<\/a>\s+\|.+$/g, '').replace(/^.+>/g, ''));
              } else {
                _item.topic = '';
              }
              _item.link = _this.processStringorArray("http://music.vnn.vn" + ((_ref3 = data.match(/file.+controlbar/)) != null ? _ref3[0].replace(/',.+$/g, '').replace(/^.+'/g, '') : void 0));
              _this.stats.passedItemCount++;
              if (_item.link.search(/mp4/g) > -1 || _item.link.search(/flv/g) > -1) {
                _this.connection.query(_this.query._insertIntoVideos, _item, function(err) {
                  if (err) {
                    return console.log("Cannt insert. ERROR: " + err);
                  }
                });
              } else {
                _this.connection.query(_this.query._insertIntoSongs, _item, function(err) {
                  if (err) {
                    return console.log("Cannt insert. ERROR: " + err);
                  }
                });
              }
            } catch (_error) {}
          } else {
            _this.stats.failedItemCount++;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        };
        callbackOnFail = function(ErrorMessage) {
          console.log(ErrorMessage);
          return _this.stats.failedItemCount++;
        };
        _results.push(this.getFileByHTTP(link, callbackOnSucess, callbackOnFail, options));
      }
      return _results;
    };

    return MusicVNN;

  })(Site);

  module.exports = MusicVNN;

}).call(this);
