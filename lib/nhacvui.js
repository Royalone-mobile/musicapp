// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, Module, NV_CONFIG, Nhacvui, Utils, colors, encoder, events, fs, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  fs = require('fs');

  events = require('events');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  NV_CONFIG = {
    table: {
      Songs: "NVSongs",
      Albums: "NVAlbums",
      Songs_Albums: "NVSongs_Albums"
    },
    logPath: "./log/NVLog.txt"
  };

  Nhacvui = (function(_super) {

    __extends(Nhacvui, _super);

    function Nhacvui(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : NV_CONFIG;
      this.processAlbumData = __bind(this.processAlbumData, this);

      this.fetchAlbumName = __bind(this.fetchAlbumName, this);

      this.fetchAlbums = __bind(this.fetchAlbums, this);

      this.fetchSongs = __bind(this.fetchSongs, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoNVSongs: "INSERT INTO " + this.table.Songs + " SET ?",
        _insertIntoNVAlbums: "INSERT INTO " + this.table.Albums + " SET ?",
        _insertIntoNVSongs_Albums: "INSERT INTO " + this.table.Songs_Albums + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      this.eventEmitter = new events.EventEmitter();
      Nhacvui.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Nhacvui.prototype.getFileByHTTP = function(link, onSucess, onFail, options) {
      var _this = this;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        if (res.statusCode !== 302) {
          res.on('data', function(chunk) {
            return data += chunk;
          });
          return res.on('end', function() {
            return onSucess(data, options);
          });
        } else {
          return onFail("The link is temporary moved", options);
        }
      }).on('error', function(e) {
        return onFail("Cannot get file from server. ERROR: " + e.message, options);
      });
    };

    Nhacvui.prototype.getFiles = function(range, processLinkCallback, processDataCallback) {
      var id, _i, _ref, _ref1, _results,
        _this = this;
      _results = [];
      for (id = _i = _ref = range.first, _ref1 = range.last; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; id = _ref <= _ref1 ? ++_i : --_i) {
        _results.push((function(id) {
          var href;
          href = processLinkCallback(id);
          return _this.getFileByHTTP(href, (function(data) {
            var result;
            _this.stats.totalItemCount += 1;
            if (data !== null) {
              _this.stats.passedItemCount += 1;
              result = processDataCallback(id, data);
              _this.eventEmitter.emit('result', result);
            } else {
              _this.stats.failedItemCount += 1;
            }
            _this.utils.printRunning(_this.stats);
            _this.stats.currentId = id;
            if (_this.stats.totalItemCount === _this.stats.totalItems) {
              return _this.utils.printFinalResult(_this.stats);
            }
          }), function(err) {
            return console.log("We have an error while fetching files");
          });
        })(id));
      }
      return _results;
    };

    Nhacvui.prototype.formatDate = function(dt) {
      return dt.getFullYear() + "-" + (dt.getMonth() + 1) + "-" + dt.getDay() + " " + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
    };

    Nhacvui.prototype._storeSong = function(id, song) {
      var href, range, _item,
        _this = this;
      _item = {
        songid: id,
        song_name: encoder.htmlDecode(song.title[0].trim()),
        artist_name: encoder.htmlDecode(song.description[0].replace("Thể hiện: ", "").trim()),
        link: song['jwplayer:file'][0]
      };
      range = {
        first: id,
        last: id
      };
      href = "http://hcm.nhac.vui.vn/-m" + id + "c2p1a1.html";
      this.stats.currentId = id;
      return this.getFileByHTTP(href, function(data) {
        var processDataCallback, result;
        _this.stats.totalItemCount += 1;
        _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
        if (data !== null) {
          _this.stats.passedItemCount += 1;
          processDataCallback = function(id, data) {
            var _ref, _ref1, _t;
            if (!data.match(/Bài\shát\skhông\stồn\stại/)) {
              _t = (_ref = data.match(/Nhạc\ssĩ:.+/g)) != null ? _ref[0] : void 0;
              song = {
                songid: id,
                song_name: _item.song_name,
                artist_name: _item.artist_name,
                plays: 0,
                topic: "",
                author: "",
                link: _item.link,
                lyric: ""
              };
              if (_t !== void 0) {
                song.plays = _t.match(/Lượt\snghe.+/g)[0].replace(/<\/div>.+/g, '').replace(/Lượt\snghe:|,/g, '').trim();
                song.topic = _t.replace(/<\/a>.+$/g, '').replace(/^.+>/g, '').trim();
                song.author = encoder.htmlDecode(_t.replace(/<\/span>.+/g, '').replace(/^.+>/g, '').trim());
              }
              song.lyric = encoder.htmlDecode((_ref1 = data.match(/media_title.+/g)) != null ? _ref1[0].replace(/<\/div><div\s.+$/g, '').replace(/^.+<\/span><\/i><\/div>/g, '').trim() : void 0);
              if (song.lyric.match(/Hiện\sbài\shát.+chưa\scó\slời/)) {
                song.lyric = "";
              }
              if (song.author.match(/Đang\sCập\sNhật/i)) {
                song.author = "";
              }
            } else {
              song = null;
            }
            return song;
          };
          result = processDataCallback(id, data);
          if (result !== null) {
            return _this.connection.query(_this.query._insertIntoNVSongs, result, function(err) {
              if (err) {
                return console.log("Can not insert new song");
              }
            });
          } else {
            _this.stats.failedItemCount += 1;
            return _this.stats.passedItemCount -= 1;
          }
        } else {
          return _this.stats.failedItemCount += 1;
        }
      });
    };

    Nhacvui.prototype._storeSong320 = function(id, song) {
      var _item, _query;
      _item = {
        songid: id,
        annotation: encoder.htmlDecode(song.annotation[0].replace("Thể hiện: ", "").trim()),
        link320: song.location[0]
      };
      _query = "update " + this.table.Songs + " set annotation=" + (this.connection.escape(_item.annotation)) + ", link320=" + (this.connection.escape(_item.link320)) + " where songid=" + _item.songid;
      return this.connection.query(_query, function(err) {
        if (err) {
          return console.log(("Cannot update the song: " + _item.songid + " into table. ERROR: ") + err + "....." + _query);
        }
      });
    };

    Nhacvui.prototype._storeAlbum = function(id, album) {
      var song, _i, _item, _len, _results,
        _this = this;
      _results = [];
      for (_i = 0, _len = album.length; _i < _len; _i++) {
        song = album[_i];
        _item = {
          albumid: id,
          song_name: encoder.htmlDecode(song.title[0].trim()),
          artist_name: encoder.htmlDecode(song.description[0].replace("Thể hiện: ", "").trim()),
          link: song['jwplayer:file'][0]
        };
        _results.push(this.connection.query(this.query._insertIntoNVAlbums, _item, function(err) {
          if (err) {
            return console.log(("Cannot get albumid: " + _item.albumid + ". ERROR: ").red + err);
          } else {
            return _this._updateAlbumName(_item.albumid);
          }
        }));
      }
      return _results;
    };

    Nhacvui.prototype._storeAlbumName = function(id, album) {
      var _query;
      _query = ("UPDATE " + this.table.Albums + " SET ") + (" album_name   = " + (this.connection.escape(album.album_name)) + ",") + (" album_artist = " + (this.connection.escape(album.album_artist)) + ",") + (" topic = " + (this.connection.escape(album.topic)) + ",") + (" plays = " + album.plays) + (" where albumid = " + id + ";");
      return this.connection.query(_query, function(err) {
        if (err) {
          return console.log(("Cant not update albumid: " + id + ". ERROR: ") + err);
        }
      });
    };

    Nhacvui.prototype._updateSong = function(id) {
      var link,
        _this = this;
      link = "http://hcm.nhac.vui.vn/asx2.php?type=1&id=" + id;
      this.stats.currentTable = this.table.Songs;
      return this.getFileByHTTP(link, function(data) {
        return _this.parser.parseString(data, function(err, result) {
          var song;
          song = result.rss.channel[0].item[0];
          _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
          if (typeof song.title[0] !== 'object') {
            _this.stats.currentId = id;
            _this._storeSong(id, song);
            _this._updateSong(id + 1);
            return _this.log.lastSongId = id;
          } else {
            _this.stats.failedItemCount += 1;
            _this.temp.totalFail += 1;
            if (_this.temp.totalFail < 100) {
              return _this._updateSong(id + 1);
            } else {
              if (_this.stats.passedItemCount === 0) {
                console.log("");
                console.log("Table: " + _this.table.Songs + " is up-to-date");
              } else {
                _this.utils.printFinalResult(_this.stats);
                _this._writeLog(_this.log);
              }
              _this.end();
              _this.resetStats();
              return _this.updateAlbums();
            }
          }
        });
      });
    };

    Nhacvui.prototype._updateSong320 = function(id) {
      var link,
        _this = this;
      link = "http://hcm.nhac.vui.vn/asx2.php?type=5&id=" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          return _this.parser.parseString(data, function(err, result) {
            var song;
            song = result.rss.channel[0].track[0];
            data = "";
            if (typeof song.title[0] !== 'object') {
              return _this._storeSong320(id, song);
            }
          });
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhacvui.prototype._updateAlbum = function(id) {
      var href,
        _this = this;
      href = "http://hcm.nhac.vui.vn/-a" + id + "p1.html";
      return this.getFileByHTTP(href, (function(data) {
        var result;
        _this.stats.totalItemCount += 1;
        if (data !== null) {
          _this.stats.passedItemCount += 1;
          result = _this.processAlbumData(id, data);
          _this.log.lastAlbumId = id;
          _this.eventEmitter.emit('result', result);
        } else {
          _this.stats.failedItemCount += 1;
        }
        _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
        if (_this.temp.totalFail < 100) {
          return _this._updateAlbum(id + 1);
        } else {
          _this.utils.printFinalResult(_this.stats);
          return _this._writeLog(_this.log);
        }
      }), function(err) {
        return console.log("We have an error while fetching files");
      });
    };

    Nhacvui.prototype._updateAlbumName = function(id) {
      var link,
        _this = this;
      link = "http://hcm.nhac.vui.vn/-a" + id + "p1.html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, plays, title_artist, topic, _arr, _artist, _name, _ref, _ref1;
          if (data.search('Album không tồn tại.') === -1) {
            title_artist = data.match(/nghenhac-baihat.+/g)[0].replace(/\<\/h\d\>\<\/div\>/g, '').replace(/^.+>/g, '');
            plays = (_ref = data.match(/Lượt\snghe:.+/g)) != null ? _ref[0].replace(/<\/p>/g, '').replace(/^.+>/g, '').replace(/,/g, '').trim() : void 0;
            topic = (_ref1 = data.match(/Thể\sloại:.+/g)) != null ? _ref1[0].replace(/<\/a><\/p>.+$/g, '').replace(/^.+>/g, '') : void 0;
            data = "";
            _arr = title_artist.split(/\s\-\s/);
            _artist = _arr[_arr.length - 1];
            _arr.splice(_arr.length - 1, 1);
            _name = _arr.join(" - ");
            _arr = "";
            album = {
              album_name: encoder.htmlDecode(_name.trim()),
              album_artist: encoder.htmlDecode(_artist.trim()),
              topic: topic,
              plays: plays
            };
            return _this._storeAlbumName(id, album);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacvui.prototype._fetchSong = function(id) {
      var link,
        _this = this;
      link = "http://hcm.nhac.vui.vn/asx2.php?type=1&id=" + id;
      this.stats.currentTable = this.table.Songs;
      this.stats.currentId = id;
      return this.getFileByHTTP(link, function(data) {
        _this.parser.parseString(data, function(err, result) {
          var song;
          song = result.rss.channel[0].item[0];
          _this.utils.printRunning(_this.stats);
          if (typeof song.title[0] !== 'object') {
            _this.stats.currentId = id;
            return _this._storeSong(id, song);
          } else {
            return _this.stats.failedItemCount += 1;
          }
        });
        if (_this.stats.totalItems === _this.stats.totalItemCount) {
          return _this.utils.printFinalResult(_this.stats);
        }
      });
    };

    Nhacvui.prototype._fetchAlbum = function(range0, range1) {
      var processLinkCallback, range;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      range = {
        first: range0,
        last: range1
      };
      processLinkCallback = function(id) {
        return "http://hcm.nhac.vui.vn/-a" + id + "p1.html";
      };
      return this.getFiles(range, processLinkCallback, this.processAlbumData);
    };

    Nhacvui.prototype._fetchAlbumName = function(id) {
      var link,
        _this = this;
      link = "http://hcm.nhac.vui.vn/-a" + id + "p1.html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, title_artist, type_plays, _arr, _artist, _name;
          _this.stats.totalItemCount += 1;
          if (data.search('Album không tồn tại.') === -1) {
            _this.stats.passedItemCount += 1;
            title_artist = data.match(/\<div\sclass=\"nghenhac-baihat\"\>\<h2\>.+/)[0].replace(/\<div\sclass=\"nghenhac-baihat\"\>\<h2\>/, '').replace(/\<\/h2\>\<\/div\>/, '');
            type_plays = data.match(/\<div\sclass=\"nghenhac-info\"\>.+/)[0].replace(/\<div\sclass=\"nghenhac-info\"\>/, '').replace(/Thể loại:\s\<a\shref=\"\/.+\.html\"\stitle=\".+\"\>/, '').replace(/\<\/a\>\s/, '').replace(/Nghe:\s/, '').replace(/\<\/div\>/, '');
            data = "";
            _arr = title_artist.split(/\s\-\s/);
            _artist = _arr[_arr.length - 1];
            _arr.splice(_arr.length - 1, 1);
            _name = _arr.join(" - ");
            _arr = "";
            album = {
              album_name: encoder.htmlDecode(_name.trim()),
              album_artist: encoder.htmlDecode(_artist.trim()),
              topic: encoder.htmlDecode(type_plays.split('|')[0].trim()),
              plays: type_plays.split('|')[1].replace(/\,/g, '').trim()
            };
            _this._storeAlbumName(id, album);
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacvui.prototype.fetchSongs = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching songid: " + range0 + ".." + range1 + " to table: " + this.table.Songs).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Songs;
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchSong(id);
      }
      return null;
    };

    Nhacvui.prototype.fetchAlbums = function(range0, range1) {
      var id, _fn, _i, _ref,
        _this = this;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching albumid: " + range0 + ".." + range1 + " to table: " + this.table.Albums).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Albums;
      this.stats.totalItems = range1 - range0 + 1;
      console.log("THE # OF ALBUMS IS " + this.stats.totalItems);
      this.eventEmitter.on('result', function(result) {
        if (result !== null) {
          return _this.connection.query(_this.query._insertIntoNVAlbums, result.album, function(err) {
            var sid, _i, _len, _ref1, _results;
            if (err) {
              return console.log("cannt insert album: " + result.album.aid + " into table. ERROR: " + err);
            } else {
              _ref1 = result.songids;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                sid = _ref1[_i];
                _results.push((function(sid, result) {
                  return _this.connection.query(_this.query._insertIntoNVSongs_Albums, {
                    "sid": sid,
                    "aid": result.album.aid
                  }, function(err) {
                    if (err) {
                      return console.log("cannt insert song: " + sid + " - album: " + result.album.aid);
                    }
                  });
                })(sid, result));
              }
              return _results;
            }
          });
        } else {
          _this.stats.failedItemCount += 1;
          return _this.stats.passedItemCount -= 1;
        }
      });
      _fn = function(id) {
        return _this._fetchAlbum(id, id);
      };
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _fn(id);
      }
      return null;
    };

    Nhacvui.prototype.fetchAlbumName = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching album's names from id: " + range0 + ".." + range1 + " to table: " + this.table.Albums).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.stats.currentTable = this.table.Albums;
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchAlbumName(id);
      }
      return null;
    };

    Nhacvui.prototype.processAlbumData = function(id, data) {
      var album, created, nsongs, plays, result, songids, thumbnail, title_artist, topic, _arr, _artist, _name, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (data.search('Album không tồn tại.') === -1) {
        title_artist = data.match(/nghenhac-baihat.+/g)[0].replace(/\<\/h\d\>\<\/div\>/g, '').replace(/^.+>/g, '');
        plays = (_ref = data.match(/Lượt\snghe:.+/g)) != null ? _ref[0].replace(/<\/p>/g, '').replace(/^.+>/g, '').replace(/,/g, '').trim() : void 0;
        topic = (_ref1 = data.match(/Thể\sloại:.+/g)) != null ? _ref1[0].replace(/<\/a><\/p>.+$/g, '').replace(/^.+>/g, '') : void 0;
        nsongs = (_ref2 = data.match(/Số\sbài\shát:\s.+/g)) != null ? _ref2[0].replace(/<\/p>$/g, '').replace(/^.+>/g, '') : void 0;
        thumbnail = (_ref3 = data.match(/albumInfo-img.+[\n\t\r]+.+/g)) != null ? _ref3[0].replace(/\"\salt.+$/g, '').replace(/^.+\s.+\"/g, '') : void 0;
        created = "";
        if (thumbnail != null ? thumbnail.match(/\d+_/g) : void 0) {
          created = (_ref4 = thumbnail.match(/\d{10,14}_/g)) != null ? (_ref5 = _ref4[0]) != null ? _ref5.replace(/_/g, '') : void 0 : void 0;
        }
        if (!(thumbnail != null ? thumbnail.match(/http/) : void 0)) {
          thumbnail = "http://hcm.nhac.vui.vn" + thumbnail;
        }
        songids = data.match(/javascript:liked_onclick\(\'\d+\'\)/g);
        songids = songids != null ? songids.map(function(v) {
          return v.match(/\d+/)[0];
        }) : void 0;
        data = "";
        _arr = title_artist.split(/\s\-\s/);
        _artist = _arr[_arr.length - 1];
        _arr.splice(_arr.length - 1, 1);
        _name = _arr.join(" - ");
        _arr = "";
        album = {
          aid: id,
          album_name: encoder.htmlDecode(_name.trim()),
          album_artist: encoder.htmlDecode(_artist.trim()),
          topic: topic,
          plays: plays,
          nsongs: nsongs,
          thumbnail: thumbnail
        };
        if (created !== "") {
          album.created = this.formatDate(new Date(parseInt(created, 0) * 1000));
        } else {
          album.created = "";
        }
        return result = {
          album: album,
          songids: songids
        };
      } else {
        return null;
      }
    };

    Nhacvui.prototype.update = function() {
      this.connect();
      this._readLog();
      this.temp = {};
      this.temp.totalFail = 0;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Songs to table: " + this.table.Songs).magenta);
      return this._updateSong(this.log.lastSongId + 1);
    };

    Nhacvui.prototype.updateAlbums = function() {
      var _this = this;
      this.connect();
      this._readLog();
      this.temp = {};
      this.temp.totalFail = 0;
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Albums to table: " + this.table.Albums).magenta);
      this.eventEmitter.on('result', function(result) {
        if (result !== null) {
          return _this.connection.query(_this.query._insertIntoNVAlbums, result.album, function(err) {
            var sid, _i, _len, _ref, _results;
            if (err) {
              return console.log("cannt insert album: " + result.album.aid + " into table. ERROR: " + err);
            } else {
              _ref = result.songids;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                sid = _ref[_i];
                _results.push((function(sid, result) {
                  return _this.connection.query(_this.query._insertIntoNVSongs_Albums, {
                    "sid": sid,
                    "aid": result.album.aid
                  }, function(err) {
                    if (err) {
                      return console.log("cannt insert song: " + sid + " - album: " + result.album.aid);
                    }
                  });
                })(sid, result));
              }
              return _results;
            }
          });
        } else {
          _this.stats.failedItemCount += 1;
          _this.stats.passedItemCount -= 1;
          return _this.temp.totalFail += 1;
        }
      });
      return this._updateAlbum(this.log.lastAlbumId + 1);
    };

    Nhacvui.prototype.updateSongsStats = function() {
      var processDataCallback, processLinkCallback, range,
        _this = this;
      range = {
        first: 314048,
        last: 314116
      };
      this.stats.totalItems = range.last - range.first + 1;
      this.stats.currentTable = this.table.Songs;
      console.log("THE # OF ITEMS IS " + this.stats.totalItems);
      this.connect();
      processLinkCallback = function(id) {
        return "http://hcm.nhac.vui.vn/-m" + id + "c2p1a1.html";
      };
      processDataCallback = function(id, data) {
        var song, _ref, _ref1, _t;
        if (!data.match(/Bài\shát\skhông\stồn\stại/)) {
          _t = (_ref = data.match(/Nhạc\ssĩ:.+/g)) != null ? _ref[0] : void 0;
          song = {
            songid: id,
            plays: 0,
            topic: "",
            author: "",
            lyric: ""
          };
          if (_t !== void 0) {
            song.plays = _t.match(/Lượt\snghe.+/g)[0].replace(/<\/div>.+/g, '').replace(/Lượt\snghe:|,/g, '').trim();
            song.topic = _t.replace(/<\/a>.+$/g, '').replace(/^.+>/g, '').trim();
            song.author = encoder.htmlDecode(_t.replace(/<\/span>.+/g, '').replace(/^.+>/g, '').trim());
          }
          song.lyric = (_ref1 = data.match(/media_title.+/g)) != null ? _ref1[0].replace(/<\/div><div\s.+$/g, '').replace(/^.+<\/span><\/i><\/div>/g, '').trim() : void 0;
          if (song.lyric.match(/Hiện\sbài\shát.+chưa\scó\slời/)) {
            song.lyric = "";
          }
          if (song.author.match(/Đang\sCập\sNhật/)) {
            song.author = "";
          }
          song;

        } else {
          song = null;
        }
        return song;
      };
      this.eventEmitter.on('result', function(result) {
        var _q;
        if (result !== null) {
          _q = ("update " + _this.table.Songs + " set ") + ("plays = " + (_this.connection.escape(result.plays)) + ", ") + ("topic = " + (_this.connection.escape(result.topic)) + ", ") + ("author = " + (_this.connection.escape(result.author)) + ", ") + ("lyric = " + (_this.connection.escape(result.lyric)) + " ") + ("where songid = " + result.songid + " ");
          return _this.connection.query(_q, function(err) {
            if (err) {
              return console.log("cannt insert into databaseq");
            }
          });
        } else {
          _this.stats.failedItemCount += 1;
          return _this.stats.passedItemCount -= 1;
        }
      });
      return this.getFiles(range, processLinkCallback, processDataCallback);
    };

    Nhacvui.prototype.showStats = function() {
      return this._printTableStats(NV_CONFIG.table);
    };

    return Nhacvui;

  })(Module);

  module.exports = Nhacvui;

}).call(this);
