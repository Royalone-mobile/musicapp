// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, Module, NCT_CONFIG, Nhaccuatui, Utils, colors, encoder, fs, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  fs = require('fs');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  NCT_CONFIG = {
    table: {
      Songs: "NCTSongs",
      Albums: "NCTAlbums",
      Videos: "NCTVideos",
      MVs: "NCTMVs",
      MVPlaylists: "NCTMVPlaylists",
      MVs_MVPlaylists: "NCTMVs_MVPlaylists",
      Songs_Albums: "NCTSongs_Albums"
    },
    logPath: "./log/NCTLog.txt"
  };

  Nhaccuatui = (function(_super) {

    __extends(Nhaccuatui, _super);

    function Nhaccuatui(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : NCT_CONFIG;
      this.fetchVideosByArtist = __bind(this.fetchVideosByArtist, this);

      this.fetchArtist = __bind(this.fetchArtist, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoNCTSongs: "INSERT IGNORE INTO " + this.table.Songs + " SET ?",
        _insertIntoNCTAlbums: "INSERT IGNORE INTO " + this.table.Albums + " SET ?",
        _insertIntoNCTVideos: "INSERT IGNORE INTO " + this.table.Videos + " SET ?",
        _insertIntoNCTSongs_Albums: "INSERT INTO " + this.table.Songs_Albums + " SET ?",
        _insertIntoNCTMVs: "INSERT INTO " + this.table.MVs + " SET ?",
        _insertIntoNCTMVPlaylists: "INSERT INTO " + this.table.MVPlaylists + " SET ?",
        _insertIntoNCTMVs_MVPlaylists: "INSERT INTO " + this.table.MVs_MVPlaylists + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      Nhaccuatui.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Nhaccuatui.prototype.createTables = function() {
      var artistsQuery, artistsVideos, songsQuery, _query,
        _this = this;
      this.connect();
      songsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Songs + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					songid int,					song_key varchar(100),					song_name varchar(255),					song_artists varchar(150),					artists varchar(150),					topic varchar(100),					genre varchar(100),					albumid int,					album_key varchar(100)					);";
      artistsQuery = "CREATE TABLE IF NOT EXISTS " + this.table.Artists + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					name varchar(100),					real_name varchar(100),					dateofbirth varchar(100),					publisher varchar(50),					country varchar(300),					topic varchar(255),					description text					);";
      artistsVideos = "CREATE TABLE IF NOT EXISTS " + this.table.Videos + " (					id int NOT NULL AUTO_INCREMENT PRIMARY KEY,					videoid varchar(150),					video_key varchar(150),					title varchar(150),					artist varchar(100),					video_artist varchar(100),					thumbnail varchar(255),					topic varchar(150),					plays int,					link varchar(300)					);";
      _query = songsQuery;
      return this.connection.query(_query, function(err, result) {
        if (err) {
          console.log("Cannot create table");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been created!");
        }
        return _this.end();
      });
    };

    Nhaccuatui.prototype.resetTables = function() {
      var songsQuery,
        _this = this;
      this.connect();
      songsQuery = "truncate table " + this.table.Songs + " ;";
      return this.connection.query(songsQuery, function(err, result) {
        if (err) {
          console.log("Cannot truncate tables");
        } else {
          console.log("Tables: " + _this.table.Songs + " have been truncated!");
        }
        return _this.end();
      });
    };

    Nhaccuatui.prototype._printUpdateAlbum = function(info) {
      var message, tempDuration;
      tempDuration = Date.now() - this.stats.markedTimer;
      message = " |" + ("" + info).inverse.magenta;
      message += " | t:" + this.utils._getTime(tempDuration);
      message += "\r";
      return process.stdout.write(message);
    };

    Nhaccuatui.prototype._storeSong = function(songs) {
      var song, _i, _len, _results,
        _this = this;
      try {
        _results = [];
        for (_i = 0, _len = songs.length; _i < _len; _i++) {
          song = songs[_i];
          _results.push((function(song) {
            return _this.connection.query(_this.query._insertIntoNCTSongs, song, function(err) {
              if (err) {
                return console.log("Cannot insert song " + song.song_key);
              } else {
                return _this._updateSongPlays(song.songid);
              }
            });
          })(song));
        }
        return _results;
      } catch (e) {
        return console.log("Cannt insert new song in album: " + songs[0].album_key + ". ERROR: " + e + " ");
      }
    };

    Nhaccuatui.prototype._updateSongPlays = function(songid) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/wg/get-counter?listSongIds=" + songid;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _q;
          try {
            data = JSON.parse(data);
            _q = "update " + _this.table.Songs + " SET plays=" + data.data.songs[songid] + " where songid=" + songid;
            data = "";
            return _this.connection.query(_q, function(err) {
              if (err) {
                return console.log("Cannt update the total plays of the song " + songid + " into database. ERROR: " + err);
              }
            });
          } catch (e) {
            return console.log("Cannot udpate plays of the song: " + songid + " has an error: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype._updateAlbumPlays = function(albumid) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/wg/get-counter?listPlaylistIds=" + albumid;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _q;
          try {
            data = JSON.parse(data);
            _q = "update " + _this.table.Albums + " SET plays=" + data.data.playlists[albumid] + " where albumid=" + albumid;
            data = "";
            return _this.connection.query(_q, function(err) {
              if (err) {
                return console.log("Cannt update the total plays of the Album " + albumid + " into database. ERROR: " + err);
              }
            });
          } catch (e) {
            return console.log("Album " + albumid + " has an error: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype._updateAlbumTopic = function(album) {
      var _q,
        _this = this;
      try {
        _q = ("update " + this.table.Albums + " SET albumid=" + album.albumid + ", ") + (" nsongs=" + album.nsongs + ", ") + (" topic=" + (this.connection.escape(album.topic)) + ", ") + (" genre=" + (this.connection.escape(album.genre)) + ", ") + (" artist_list=" + (this.connection.escape(album.artist_list)) + ",") + (" link_key=" + (this.connection.escape(album.link_key))) + (" WHERE album_key=" + (this.connection.escape(album.album_key)));
        return this.connection.query(_q, function(err) {
          if (err) {
            return console.log("Cannot update album topic " + album.album_key + ". ERROR: " + err);
          } else {
            return _this._updateAlbumPlays(album.albumid);
          }
        });
      } catch (e) {
        return console.log("Cannt update album topic: " + album.album_key + ". ERROR: " + e + " ");
      }
    };

    Nhaccuatui.prototype._fetchVideosByArtist = function(artistName, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = "http://www.nhaccuatui.com/tim-kiem/mv?q=" + artistName + "&b=singer&page=" + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, durations, foundItems, i, index, item, p, thumb, thumbs, totalPage, video, video_artists, videos, _artist, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _p, _video;
          _this.stats.totalItemCount += 1;
          if (!data.match(/Tìm\sđược\s0\skết\squả/) && data !== '') {
            if (data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g)) {
              arr = data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g);
              videos = [];
              thumbs = [];
              durations = [];
              for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
                item = arr[index];
                if (index % 2 === 0) {
                  videos.push(item);
                }
              }
              if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
                thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
                for (i = _j = 0, _len1 = thumbs.length; _j < _len1; i = ++_j) {
                  thumb = thumbs[i];
                  thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
                }
              } else {
                for (i = _k = 0, _len2 = videos.length; _k < _len2; i = ++_k) {
                  video = videos[i];
                  thumbs[i] = '';
                }
                console.log("" + artistName + ": current Page: " + page + " has no thummbinial");
              }
              if (data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
                video_artists = data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
                for (index = _l = 0, _len3 = video_artists.length; _l < _len3; index = ++_l) {
                  _artist = video_artists[index];
                  video_artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                    return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<|\>/g, '');
                  });
                }
              } else {
                for (i = _m = 0, _len4 = albums.length; _m < _len4; i = ++_m) {
                  video = albums[i];
                  video_artists[i] = '';
                }
                console.log("" + XXXXXXXX + ": current Page: " + page + " has no artists names");
              }
              if (data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g)) {
                durations = data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g).map(function(v) {
                  var time;
                  v = v.replace(/<\!\-\-<div\sclass\=\"times\"\>|<\/div\>\-\-\>/g, '').split(':');
                  return time = parseInt(v[0], 10) * 60 + parseInt(v[1], 10);
                });
              } else {
                for (i = _n = 0, _len5 = videos.length; _n < _len5; i = ++_n) {
                  video = videos[i];
                  durations[i] = '';
                }
              }
              _this.stats.passedItemCount += 1;
              for (index = _o = 0, _len6 = videos.length; _o < _len6; index = ++_o) {
                video = videos[index];
                _video = {
                  artist: encoder.htmlDecode(artistName)
                };
                if (video.match(/<a.+\.html/)) {
                  _video.video_key = video.match(/<a.+\.html/)[0].replace(/\.html/g, '').replace(/<a.+\./, '');
                } else {
                  _video.video_key = '';
                }
                if (video.match(/title\=.+\"\>/)) {
                  _video.video_name = encoder.htmlDecode(video.match(/title\=.+\"\>/)[0].replace(/title\=\"|\"\>/g, ''));
                } else {
                  _video.video_name = '';
                }
                _video.thumbnail = thumbs[index];
                _video.video_artists = JSON.stringify(video_artists[index]);
                _video.duration = durations[index];
                if (_video.thumbnail) {
                  if (_video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                    _video.created = _video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
                  } else if (_video.thumbnail.match(/\d{4}_\d{2}\//g)) {
                    _video.created = _video.thumbnail.match(/\d{4}_\d{2}\//g)[0].replace(/_/g, ':').replace(/\//g, '');
                    _video.created += ":01";
                  }
                }
                _this.connection.query(_this.query._insertIntoNCTVideos, _video, function(err) {
                  if (err) {
                    return console.log(("Cannot insert video:" + _video.videoid + " to table. ERROR: " + err).red);
                  }
                });
              }
            } else {
              console.log(("" + artistName + ": has no video at current Page: " + page + " ").red);
            }
            if (page === 1) {
              if (data.match(/Tìm\sđược\s.+\skết\squả/g)) {
                foundItems = data.match(/Tìm\sđược\s.+\skết\squả/g)[0].replace(/Tìm\sđược\s|\skết\squả|\,/g, '');
                foundItems = parseInt(foundItems, 10);
                if (foundItems % 20 === 0) {
                  totalPage = foundItems / 20;
                } else {
                  totalPage = Math.floor(foundItems / 20) + 1;
                }
                if (totalPage > 50) {
                  totalPage = 50;
                }
              } else {
                totalPage = 1;
              }
              if (totalPage > 1) {
                for (p = _p = 2; 2 <= totalPage ? _p <= totalPage : _p >= totalPage; p = 2 <= totalPage ? ++_p : --_p) {
                  _this._fetchVideosByArtist(artistName, p);
                }
              }
            }
            data = "";
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype._fetchAlbumByTopic = function(topicLink, page) {
      var XXXXXXXX, link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = topicLink + page;
      XXXXXXXX = "FAKE VAR";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, artists, i, index, thumb, thumbs, _album, _artist, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _t;
          if (data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g)) {
            albums = data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g);
            thumbs = [];
            artists = [];
            if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
              thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
              for (i = _i = 0, _len = thumbs.length; _i < _len; i = ++_i) {
                thumb = thumbs[i];
                thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
              }
            } else {
              for (i = _j = 0, _len1 = albums.length; _j < _len1; i = ++_j) {
                album = albums[i];
                thumbs[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no thumbnail");
            }
            if (data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
              artists = data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
              for (index = _k = 0, _len2 = artists.length; _k < _len2; index = ++_k) {
                _artist = artists[index];
                artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                  return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<|\>/g, '');
                });
              }
            } else {
              for (i = _l = 0, _len3 = albums.length; _l < _len3; i = ++_l) {
                album = albums[i];
                artists[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no artists names");
            }
            for (index = _m = 0, _len4 = albums.length; _m < _len4; index = ++_m) {
              album = albums[index];
              _this.stats.totalItemCount += 1;
              _this.stats.passedItemCount += 1;
              _album = {
                artist: encoder.htmlDecode(JSON.stringify(artists[index]))
              };
              if (album.match(/<a.+\.html/)) {
                _album.album_key = album.match(/<a.+\.html/)[0].replace(/\.html/g, '').replace(/<a.+\./, '');
              } else {
                _album.album_key = '';
              }
              if (album.match(/title\=.+\"\>/)) {
                _album.title = encoder.htmlDecode(album.match(/title\=.+\"\>/)[0].replace(/title\=\"|\"\>/g, ''));
              } else {
                _album.title = '';
              }
              _album.thumbnail = thumbs[index];
              if (_album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                _album.created = _album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
              }
              if (_album.thumbnail.match(/\/\d+\.jpg$/g)) {
                _t = new Date(parseInt(_album.thumbnail.match(/\/\d+\.jpg/g)[0].replace(/\/|\.jpg/g, '')));
                _album.created += " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
              }
              _this.connection.query(_this.query._insertIntoNCTAlbums, _album, function(err) {
                if (err) {
                  return console.log(("Cannot insert album:" + _album.album_key + " to table. ERROR: " + err).red);
                }
              });
              _this.utils.printRunning(_this.stats);
            }
          } else {
            console.log(("" + XXXXXXXX + ": has no album at current Page: " + page + " ").red);
          }
          data = "";
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.fetchAlbumByTopic = function() {
      var link1, link2, link3, link4, page, topic, topics, url, _i, _j, _len;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Albums).magenta);
      topics = "ana".split(',');
      url = "http://www.nhaccuatui.com/playlist/";
      this.stats.totalItems = 123617263187;
      this.stats.currentTable = this.table.Albums;
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        link1 = "http://www.nhaccuatui.com/tim-nang-cao?title=&singer=&user=lee_00&kbit=&type=3&sort=&direction=&page=";
        link2 = "http://www.nhaccuatui.com/tim-nang-cao?title=&singer=&user=thienhasaxoi&kbit=&type=2&sort=&direction=&page=";
        link3 = "http://www.nhaccuatui.com/tim-nang-cao?title=&singer=&user=anime-club&kbit=&type=2&sort=&direction=&page=";
        link4 = "http://www.nhaccuatui.com/tim-nang-cao?title=&singer=&user=belinh909&kbit=&type=2&sort=&direction=&page=";
        for (page = _j = 1; _j <= 34; page = ++_j) {
          this._fetchAlbumByTopic(link1, page);
          this._fetchAlbumByTopic(link2, page);
          this._fetchAlbumByTopic(link3, page);
          this._fetchAlbumByTopic(link4, page);
        }
      }
      return null;
    };

    Nhaccuatui.prototype._fetchAlbumByAuthor = function(topicLink, page) {
      var XXXXXXXX, link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = topicLink + page;
      XXXXXXXX = "FAKE VAR";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, artists, i, index, thumb, thumbs, _album, _artist, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _t;
          if (data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g)) {
            albums = data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g);
            thumbs = [];
            artists = [];
            if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
              thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
              for (i = _i = 0, _len = thumbs.length; _i < _len; i = ++_i) {
                thumb = thumbs[i];
                thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
              }
            } else {
              for (i = _j = 0, _len1 = albums.length; _j < _len1; i = ++_j) {
                album = albums[i];
                thumbs[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no thumbnail");
            }
            if (data.match(/<p\><a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
              artists = data.match(/<p\><a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
              for (index = _k = 0, _len2 = artists.length; _k < _len2; index = ++_k) {
                _artist = artists[index];
                artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                  return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<p\>|<|\>/g, '');
                });
              }
            } else {
              for (i = _l = 0, _len3 = albums.length; _l < _len3; i = ++_l) {
                album = albums[i];
                artists[i] = '';
              }
            }
            for (index = _m = 0, _len4 = albums.length; _m < _len4; index = ++_m) {
              album = albums[index];
              _this.stats.totalItemCount += 1;
              _this.stats.passedItemCount += 1;
              _album = {
                artist: encoder.htmlDecode(JSON.stringify(artists[index]))
              };
              if (album.match(/<a.+\.html/)) {
                _album.album_key = album.match(/<a.+\.html/)[0].replace(/\.html/g, '').replace(/<a.+\./, '');
              } else {
                _album.album_key = '';
              }
              if (album.match(/title\=.+\"\>/)) {
                _album.title = encoder.htmlDecode(album.match(/title\=.+\"\>/)[0].replace(/title\=\"|\"\>/g, ''));
              } else {
                _album.title = '';
              }
              _album.thumbnail = thumbs[index];
              if (_album.thumbnail) {
                if (_album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                  _album.created = _album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
                }
                if (_album.thumbnail.match(/\/\d+\.jpg$/g)) {
                  _t = new Date(parseInt(_album.thumbnail.match(/\/\d+\.jpg/g)[0].replace(/\/|\.jpg/g, '')));
                  _album.created += " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
                }
              }
              _this.connection.query(_this.query._insertIntoNCTAlbums, _album, function(err) {
                if (err) {
                  return console.log(("Cannot insert album:" + _album.album_key + " to table. ERROR: " + err).red);
                }
              });
              _this.utils.printRunning(_this.stats);
            }
          }
          data = "";
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.fetchAlbumByAuthor = function() {
      var author, authors, link, page, url, _i, _j, _len;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Albums).magenta);
      authors = "lee_00 thienhasaxoi anime-club belinh909 anime47 bluemoon_xx thangtin00 hestiasama witaolaonct iamjustguysbaka xuka_333 tinhlagi03357 ancotls m0nk3yt diaphilong3 quocbao88513 thansam962 loveforever010609012012 hongmiu1137 dacvu121 nguyenpro221992 nhutno.one annabelle_nguyen gared99 saovayhuy suzeria iambota91".split(' ');
      url = "http://www.nhaccuatui.com/playlist/";
      console.log(authors.length);
      this.stats.totalItems = 123617263187;
      this.stats.currentTable = this.table.Albums;
      for (_i = 0, _len = authors.length; _i < _len; _i++) {
        author = authors[_i];
        for (page = _j = 1; _j <= 34; page = ++_j) {
          link = "http://www.nhaccuatui.com/tim-nang-cao?title=&singer=&user=" + author + "&kbit=&type=2&sort=&direction=&page=";
          this._fetchAlbumByAuthor(link, page);
        }
      }
      return null;
    };

    Nhaccuatui.prototype._fetchArtist = function(artistName, page) {
      var link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = "http://www.nhaccuatui.com/tim-kiem/playlist?q=" + artistName + "&b=singer&page=" + page;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albums, arr, foundItems, i, index, item, p, thumb, thumbs, totalPage, _album, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m;
          _this.stats.totalItemCount += 1;
          if (!data.match(/Tìm\sđược\s0\skết\squả/) && data !== '') {
            if (data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g)) {
              arr = data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g);
              albums = [];
              thumbs = [];
              for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
                item = arr[index];
                if (index % 2 === 0) {
                  albums.push(item);
                }
              }
              if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
                thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
                for (i = _j = 0, _len1 = thumbs.length; _j < _len1; i = ++_j) {
                  thumb = thumbs[i];
                  thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
                }
              } else {
                for (i = _k = 0, _len2 = albums.length; _k < _len2; i = ++_k) {
                  album = albums[i];
                  thumbs[i] = '';
                }
                console.log("" + artistName + ": current Page: " + page + " has no thummbinial");
              }
              _this.stats.passedItemCount += 1;
              for (index = _l = 0, _len3 = albums.length; _l < _len3; index = ++_l) {
                album = albums[index];
                _album = {
                  artist: encoder.htmlDecode(artistName)
                };
                if (album.match(/<a.+\.html/)) {
                  _album.albumid = album.match(/<a.+\.html/)[0].replace(/\.html/g, '').replace(/<a.+\./, '');
                } else {
                  _album.albumid = '';
                }
                if (album.match(/title\=.+\"\>/)) {
                  _album.title = encoder.htmlDecode(album.match(/title\=.+\"\>/)[0].replace(/title\=\"|\"\>/g, ''));
                } else {
                  _album.title = '';
                }
                _album.thumbnail = thumbs[index];
                _this.connection.query(_this.query._insertIntoNCTAlbums, _album, function(err) {
                  if (err) {
                    return console.log(("Cannot insert album:" + _album.albumid + " to table. ERROR: " + err).red);
                  }
                });
              }
            } else {
              console.log(("" + artistName + ": has no album at current Page: " + page + " ").red);
            }
            if (page === 1) {
              if (data.match(/Tìm\sđược\s.+\skết\squả/g)) {
                foundItems = data.match(/Tìm\sđược\s.+\skết\squả/g)[0].replace(/Tìm\sđược\s|\skết\squả|\,/g, '');
                foundItems = parseInt(foundItems, 10);
                if (foundItems % 20 === 0) {
                  totalPage = foundItems / 20;
                } else {
                  totalPage = Math.floor(foundItems / 20) + 1;
                }
                if (totalPage > 50) {
                  totalPage = 50;
                }
              } else {
                totalPage = 1;
              }
              if (totalPage > 1) {
                for (p = _m = 2; 2 <= totalPage ? _m <= totalPage : _m >= totalPage; p = 2 <= totalPage ? ++_m : --_m) {
                  _this._fetchArtist(artistName, p);
                }
              }
            }
            data = "";
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.fetchArtist = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/test/artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log(" |" + ("Fetching artists, albums  to table: " + this.table.Albums).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Songs;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchArtist(name);
      }
      return null;
    };

    Nhaccuatui.prototype._updateAlbumStatsAndInsertSongs = function(album) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/playlist/joke-link." + album.album_key + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var index, song, songs, songs_albums, _d, _i, _info, _j, _len, _len1, _results, _song, _songs, _songs_albums, _temp;
          try {
            if (data.match(/<p\sclass\=\"category\"\>Thể\sloại\:.+/g)) {
              _info = data.match(/<p\sclass\=\"category\"\>Thể\sloại\:.+/g)[0].split('|');
              album.topic = _info[0].replace(/<p.+\"\>|<\/a\>/g, '').trim();
              album.nsongs = parseInt(_info[2].replace(/Số\sbài\:\s|<\/p\>/g, '').trim(), 10);
            } else {
              album.topic = '';
              album.nsongs = 0;
            }
            if (data.match(/flashPlayer\"\,\s\"playlist.+/g)) {
              album.link_key = data.match(/flashPlayer\"\,\s\"playlist.+/g)[0].replace(/flashPlayer.+playlist|0\..+|\s|\"|\,/g, '');
            } else {
              album.link_key = "";
            }
            if (data.match(/inpHiddenGenre/g)) {
              album.genre = data.match(/inpHiddenGenre.+/g)[0].replace(/inpHiddenGenre.+value\=|\"|\s\/\>/g, '');
            } else {
              album.genre = '';
            }
            if (data.match(/inpHiddenSingerIds/g)) {
              album.artist_list = JSON.stringify(data.match(/inpHiddenSingerIds.+/g)[0].replace(/inpHiddenSingerIds.+value\=|\"|\s\/\>/g, '').split(',').map(function(v) {
                return encoder.htmlDecode(v);
              }));
            } else {
              album.artist_list = '';
            }
            if (data.match(/rel\=\"\d+\"\skey=.+/g)) {
              _songs = data.match(/rel\=\"\d+\"\skey=.+/g);
              songs = [];
              for (index = _i = 0, _len = _songs.length; _i < _len; index = ++_i) {
                _song = _songs[index];
                _temp = _song.replace(/class.+/g, '');
                _d = {
                  albumid: album.albumid,
                  album_key: album.album_key,
                  genre: album.genre,
                  topic: album.topic,
                  artists: album.artist_list,
                  song_artists: JSON.stringify(_temp.match(/singer.+/)[0].replace(/singer\=\"|\"/g, '').split(',').map(function(v) {
                    v = v.trim();
                    return encoder.htmlDecode(v);
                  })),
                  song_name: encoder.htmlDecode(_temp.match(/relTitle.+singer/g)[0].replace(/relTitle\=\"|\"\ssinger/g, '')),
                  song_key: _temp.match(/key.+relTitle/g)[0].replace(/key\=\"|\"\srelTitle/g, ''),
                  songid: _temp.match(/rel.+key/g)[0].replace(/rel\=\"|\"\skey/g, '')
                };
                songs.push(_d);
              }
            } else {
              _songs = '';
            }
            data = '';
            album.totalMvs = 0;
            songs_albums = [];
            _results = [];
            for (index = _j = 0, _len1 = songs.length; _j < _len1; index = ++_j) {
              song = songs[index];
              _songs_albums = {
                songid: song.songid,
                albumid: song.albumid
              };
              delete song.albumid;
              delete song.album_key;
              songs_albums.push(_songs_albums);
              if (index === songs.length - 1) {
                _results.push(_this._updateSongLinkKey(song, songs, album, songs_albums, true));
              } else {
                _results.push(_this._updateSongLinkKey(song, songs, album, songs_albums));
              }
            }
            return _results;
          } catch (e) {
            console.log("");
            return console.log("ERROR while updating Album Stats And Inserting Songs. Album key: " + album.album_key + ". ERROR: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.updateAlbumStatsAndInsertSongs = function() {
      var _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Albums).magenta);
      this.connection.query("select album_key from NCTAlbums where plays is null", function(err, albums) {
        var album, index, _i, _len, _results;
        if (err) {
          return console.log("CANNT get albums from database");
        } else {
          _this.stats.totalItems = albums.length;
          console.log(albums.length + "----------");
          _this.stats.currentTable = _this.table.Albums;
          _results = [];
          for (index = _i = 0, _len = albums.length; _i < _len; index = ++_i) {
            album = albums[index];
            _results.push(_this._updateAlbumStatsAndInsertSongs(album.album_key));
          }
          return _results;
        }
      });
      return null;
    };

    Nhaccuatui.prototype._fetchArtistProfile = function(artistName) {
      var link,
        _this = this;
      link = "http://mp3.Nhaccuatui.vn/nghe-si/" + artistName + "/tieu-su";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, artist, _chunk, _chunks, _i, _j, _len, _len1, _topic, _topics;
          _this.stats.totalItemCount += 1;
          if (res.statusCode !== 302 && res.statusCode !== 400) {
            try {
              _this.stats.passedItemCount += 1;
              artist = {
                name: artistName
              };
              if (data.match(/\<li\>\<span\>Tên\sthật\:.+/g)) {
                artist.real_name = data.match(/\<li\>\<span\>Tên\sthật\:.+/g)[0].replace(/\<li\>\<span\>Tên\sthật\:|\<\/span\>|\<\/li\>/g, '').trim();
              } else {
                artist.real_name = "";
              }
              if (data.match(/\<li\>\<span\>Ngày\ssinh\:.+/g)) {
                artist.dateofbirth = data.match(/\<li\>\<span\>Ngày\ssinh\:.+/g)[0].replace(/\<li\>\<span\>Ngày\ssinh\:|\<\/span\>|\<\/li\>/g, '').trim().split('/').reverse().join('-');
              } else {
                artist.dateofbirth = "";
              }
              if (data.match(/Công\sty\sđại\sdiện\:.+/)) {
                artist.publisher = data.match(/Công\sty\sđại\sdiện\:.+/)[0].replace(/Công\sty\sđại\sdiện\:|\<\/span\>|\<\/p\>/g, '').trim();
              } else {
                artist.publisher = '';
              }
              if (data.match(/\<li\>\<span\>Quốc\sGia\:.+/g)) {
                artist.country = data.match(/\<li\>\<span\>Quốc\sGia\:.+/g)[0].replace(/\<li\>\<span\>Quốc\sGia\:|\<\/li\>|\<\/span\>/g, '').trim();
              } else {
                artist.country = '';
              }
              if (data.match(/Thể\sloại\:\<\/span\>.+/g)) {
                _topics = data.match(/Thể\sloại\:\<\/span\>.+/g)[0].replace(/Thể\sloại\:.|\/span\>|\<\/li\>/g, '').split(',');
                arr = [];
                for (_i = 0, _len = _topics.length; _i < _len; _i++) {
                  _topic = _topics[_i];
                  arr.push(_topic.replace(/\<a.+\"\>|\<\/a\>/g, '').trim());
                }
                artist.topic = JSON.stringify(arr);
              } else {
                artist.topic = '';
              }
              data = data.replace(/\r|\t|\n/g, '');
              if (data.match(/Thông\stin\schi\stiết.+\<div\sclass\=\"new\-sidebar\"\>/)) {
                _chunks = data.match(/Thông\stin\schi\stiết.+\<div\sclass\=\"new\-sidebar\"\>/g)[0].replace(/Thông\stin\schi\stiết\<\/span\>\<\/p\>\<div\sclass\=\"clear\-fix\"\>\<\/div\>|\<div\sclass\=\"new\-sidebar\"\>/g, '').replace(/\<\/div\>\<\/div\>\<\/div\>/, '').split(/\<a\shref/);
                arr = [];
                for (_j = 0, _len1 = _chunks.length; _j < _len1; _j++) {
                  _chunk = _chunks[_j];
                  arr.push(_chunk.replace(/\=\"\/tim\-kiem.+\"\>|\<\/a\>|\<strong\>|\<\/strong\>/g, '').trim());
                }
                artist.description = arr.join(' ');
              }
              _this.connection.query(_this.query._insertIntoZIArtists, artist, function(err) {
                if (err) {
                  return console.log("Cannot insert artist " + artistName + " into table. Error: " + err);
                }
              });
            } catch (e) {
              ("ERROR: Cannot fetch a profile of artist: " + artistName).red;
            }
          } else {
            _this.stats.failedItemCount += 1;
          }
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.fetchArtistProfile = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/test/artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log(" |" + ("Fetching artists profile table: " + this.table.Artists).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Artists;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchArtistProfile(name);
      }
      return null;
    };

    Nhaccuatui.prototype._fetchSongsPlays = function(ids) {
      var idList, link,
        _this = this;
      idList = ids.join(',');
      link = "http://www.nhaccuatui.com/wg/get-counter?listSongIds=" + idList;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var id, _i, _len, _q;
          try {
            data = JSON.parse(data);
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              _q = "update " + _this.table.Songs + " SET plays=" + data.data.songs[id] + " where songid=" + id + ";";
              _this.stats.passedItemCount += 1;
              _this.stats.totalItemCount += 1;
              _this.stats.currentId = id;
              _this.utils.printRunning(_this.stats);
              _this.connection.query(_q, function(err) {
                if (err) {
                  return _this.stats.failedItemCount += 1;
                }
              });
            }
            data = "";
            if (_this.stats.totalItems === _this.stats.totalItemCount) {
              return _this.utils.printFinalResult(_this.stats);
            }
          } catch (e) {
            return console.log("Album has an error: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.fetchSongsPlays = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Songs).magenta);
      _q = "Select songid from NCTSongs where plays is null";
      return this.connection.query(_q, function(err, songs) {
        var a, index, song, _i, _len, _results;
        if (err) {
          return console.log("CANNT get songs from database");
        } else {
          _this.stats.totalItems = songs.length;
          console.log(songs.length + "----------");
          _this.stats.currentTable = _this.table.songs;
          a = [];
          _results = [];
          for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
            song = songs[index];
            a.push(song.songid);
            if (index % 200 === 0) {
              _this._fetchSongsPlays(a);
              _results.push(a = []);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype._updateSongIds = function(item) {
      var _query,
        _this = this;
      try {
        _query = "select id from " + this.table.Songs + " where albumid=" + (this.connection.escape(item.albumid)) + " order by id asc";
        return this.connection.query(_query, function(err, songs) {
          var i, _i, _q, _ref, _results;
          if (err) {
            return console.log("Cannt update songids, ERROR: " + err);
          } else {
            _results = [];
            for (i = _i = 0, _ref = songs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              _q = "update " + _this.table.Songs + " set songid=" + (_this.connection.escape(item.songids[i])) + " where id=" + songs[i].id;
              _results.push(_this.connection.query(_q, function(err) {
                if (err) {
                  return console.log("CANNT UPDATE songid. ERROR: " + err);
                }
              }));
            }
            return _results;
          }
        });
      } catch (e) {
        return console.log(("CAN NOT update songids in album: " + item.albumid + ". ERROR: " + e).red);
      }
    };

    Nhaccuatui.prototype._updateAlbumLinkKey = function(album_key) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/playlist/joke-link." + album_key + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var link_key, _q;
          try {
            if (data.match(/flashPlayer\"\,\s\"playlist.+/g)) {
              link_key = data.match(/flashPlayer\"\,\s\"playlist.+/g)[0].replace(/flashPlayer.+playlist|0\..+|\s|\"|\,/g, '');
            } else {
              link_key = "";
            }
            data = "";
            _q = "update " + _this.table.Albums + " SET link_key=" + (_this.connection.escape(link_key)) + " where album_key=" + (_this.connection.escape(album_key)) + ";";
            _this.connection.query(_q, function(err) {
              if (err) {
                return consolqe.log("Cannot update the link key of the Album " + album_key + " into database. ERROR: " + err);
              }
            });
            return data = "";
          } catch (e) {
            return console.log("Album has an error: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.updateAlbumLinkKey = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Albums).magenta);
      _q = "Select album_key from " + this.table.Albums;
      return this.connection.query(_q, function(err, albums) {
        var album, index, _i, _len, _results;
        if (err) {
          return console.log("CANNT get albums from database");
        } else {
          _this.stats.totalItems = albums.length;
          console.log(albums.length + "----------");
          _this.stats.currentTable = _this.table.Albums;
          _results = [];
          for (index = _i = 0, _len = albums.length; _i < _len; index = ++_i) {
            album = albums[index];
            _results.push(_this._updateAlbumLinkKey(album.album_key));
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype._updateSongLinkKey = function(song, songs, album, songs_albums, isLastItem) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/bai-hat/joke-link." + song.song_key + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          try {
            if (data.match(/value.+inpHiddenType/g)) {
              song.type = data.match(/value.+inpHiddenType/g)[0].replace(/value\=\"|\"\sid\=\"inpHiddenType/g, '');
            } else {
              song.type = "";
            }
            if (data.match(/flashPlayer\"\,\s\".+/g)) {
              song.link_key = data.match(/flashPlayer\"\,\s\".+/g)[0].replace(/0\..+/g, '').replace(/\s\"/g, '').replace(/\"\,$/g, '').replace(/flashPlayer.+\,/g, '');
            } else {
              song.link_key = "";
            }
            data = "";
            if (song.type === 'mv') {
              album.totalMvs += 1;
            }
            if (isLastItem === true) {
              _this._writeLog(_this.log);
            }
            if (isLastItem === true && album.totalMvs === 0) {
              delete album.totalMvs;
              return _this.connection.query(_this.query._insertIntoNCTAlbums, album, function(err) {
                var index, _i, _len, _results;
                if (err) {
                  return console.log("Cannt insert album into table. ERROR: " + err);
                } else {
                  _this._updateAlbumPlays(album.albumid);
                  _results = [];
                  for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
                    song = songs[index];
                    _results.push((function(song, index) {
                      _this.connection.query(_this.query._insertIntoNCTSongs, song, function(err) {});
                      if (err) {
                        return console.log("Cannot insert song " + song.song_key + ". Error: " + err);
                      } else {
                        _this._updateSongPlays(song.songid);
                        return _this.connection.query(_this.query._insertIntoNCTSongs_Albums, songs_albums[index], function(err) {
                          if (err) {
                            return console.log("cannt insert into songs_albums. " + (JSON.stringify(songs_albums[index])) + " Error: " + err);
                          }
                        });
                      }
                    })(song, index));
                  }
                  return _results;
                }
              });
            } else {
              if (isLastItem === true && album.totalMvs !== 0) {
                if (album.totalMvs === album.nsongs) {
                  delete album.totalMvs;
                  return _this.connection.query(_this.query._insertIntoNCTMVPlaylists, album, function(err) {
                    var index, _i, _len, _results;
                    if (err) {
                      return console.log("Cannt insert album into table. ERROR: " + err);
                    } else {
                      _results = [];
                      for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
                        song = songs[index];
                        _results.push((function(song, index) {
                          var video, video_album;
                          video = {
                            videoid: song.songid,
                            video_key: song.song_key,
                            video_name: song.song_name,
                            video_artists: song.song_artists,
                            plays: song.plays,
                            artists: song.artists,
                            topic: song.topic,
                            genre: song.genre,
                            type: song.type,
                            link_key: song.link_key
                          };
                          _this.connection.query(_this.query._insertIntoNCTMVs, video, function(err) {});
                          if (err) {
                            return console.log("Cannot insert video " + video.video_key + ". Error: " + err);
                          } else {
                            _this._updateVideosPlays(video.videoid);
                            video_album = {
                              videoid: songs_albums[index].songid,
                              albumid: songs_albums[index].albumid
                            };
                            return _this.connection.query(_this.query._insertIntoNCTMVs_MVPlaylists, video_album, function(err) {
                              if (err) {
                                return console.log("cannt insert into video_album. " + (JSON.stringify(songs_albums[index])) + " Error: " + err);
                              }
                            });
                          }
                        })(song, index));
                      }
                      return _results;
                    }
                  });
                } else {
                  delete album.totalMvs;
                  return _this.connection.query(_this.query._insertIntoNCTAlbums, album, function(err) {
                    var index, _i, _len, _results;
                    if (err) {
                      return console.log("Cannt insert album into table. ERROR: " + err);
                    } else {
                      _this._updateAlbumPlays(album.albumid);
                      _results = [];
                      for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
                        song = songs[index];
                        _results.push((function(song, index) {
                          if (song.type !== 'mv') {
                            _this.connection.query(_this.query._insertIntoNCTSongs, song, function(err) {});
                            if (err) {
                              return console.log("Cannot insert song " + song.song_key + ". Error: " + err);
                            } else {
                              _this._updateSongPlays(song.songid);
                              return _this.connection.query(_this.query._insertIntoNCTSongs_Albums, songs_albums[index], function(err) {
                                if (err) {
                                  return console.log("cannt insert into songs_albums. " + (JSON.stringify(songs_albums[index])) + " Error: " + err);
                                }
                              });
                            }
                          }
                        })(song, index));
                      }
                      return _results;
                    }
                  });
                }
              }
            }
          } catch (e) {
            console.log("Album has an error: " + e);
            return console.log(("" + (JSON.stringify(album))).red);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.updateSongLinkKey = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Songs).magenta);
      _q = "Select song_key from " + this.table.Songs + "exit";
      return this.connection.query(_q, function(err, songs) {
        var index, song, _i, _len, _results;
        if (err) {
          return console.log("CANNT get songs from database");
        } else {
          _this.stats.totalItems = songs.length;
          console.log(songs.length + "----------");
          _this.stats.currentTable = _this.table.Songs;
          _results = [];
          for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
            song = songs[index];
            _results.push(_this._updateSongLinkKey(song.song_key));
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype._updateVideoLinkKey = function(video) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/mv/joke-link." + video.video_key + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var genre, link_key, type, videoid;
          try {
            if (data.match(/value.+inpHiddenType/g)) {
              type = data.match(/value.+inpHiddenType/g)[0].replace(/value\=\"|\"\sid\=\"inpHiddenType/g, '');
            } else {
              type = "";
            }
            if (data.match(/value.+inpHiddenId/g)) {
              videoid = data.match(/value.+inpHiddenId/g)[0].replace(/value\=\"|\"\sid\=\"inpHiddenId/g, '');
            } else {
              videoid = "";
            }
            if (data.match(/flashPlayer\"\,\s\".+/g)) {
              link_key = data.match(/flashPlayer\"\,\s\".+/g)[0].replace(/0\.\d.+/g, '').replace(/\s\"/g, '').replace(/\"\,$/g, '').replace(/flashPlayer.+\,/g, '');
            } else {
              link_key = "";
            }
            if (data.match(/inpHiddenGenre.+/g)) {
              genre = data.match(/inpHiddenGenre.+/g)[0].replace(/inpHiddenGenre.+value\=|\"|\"\s\/\>|\s\/\>/g, '');
            } else {
              genre = '';
            }
            data = "";
            video.type = type;
            video.link_key = link_key;
            video.videoid = videoid;
            video.genre = genre;
            _this.stats.passedItemCount += 1;
            _this.stats.totalItemCount += 1;
            _this.connection.query(_this.query._insertIntoNCTVideos, video, function(err) {
              if (err) {
                return console.log(("Cannot insert video:" + _video.videoid + " to table. ERROR: " + err).red);
              } else {
                return _this._updateVideosPlays(video.videoid);
              }
            });
            _this.utils.printUpdateRunning(video.video_key, _this.stats, "Fetching...");
            if (_this.stats.totalItemCount === _this.stats.totalItems) {
              return _this.utils.printFinalResult(_this.stats);
            }
          } catch (e) {
            console.log("Video has an error: " + e);
            return _this.stats.failedItemCount += 1;
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.updateVideoLinkKey = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching Videos'data  to table: " + this.table.Videos).magenta);
      _q = "Select video_key from " + this.table.Videos;
      return this.connection.query(_q, function(err, videos) {
        var album, index, _i, _len, _results;
        if (err) {
          return console.log("CANNT get videos from database");
        } else {
          _this.stats.totalItems = videos.length;
          console.log(videos.length + "----------");
          _this.stats.currentTable = _this.table.Videos;
          _results = [];
          for (index = _i = 0, _len = videos.length; _i < _len; index = ++_i) {
            album = videos[index];
            _results.push(_this._updateVideoLinkKey(album.video_key));
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype.fetchVideosByArtist = function() {
      var artists, name, _i, _len;
      this.connect();
      artists = fs.readFileSync("./log/test/artist.txt", "utf8");
      artists = JSON.parse(artists);
      console.log(" |" + ("Fetching artists, albums  to table: " + this.table.Videos).magenta);
      this.stats.totalItems = artists.length;
      this.stats.currentTable = this.table.Songs;
      for (_i = 0, _len = artists.length; _i < _len; _i++) {
        name = artists[_i];
        this._fetchVideosByArtist(name);
      }
      return null;
    };

    Nhaccuatui.prototype._updateVideosPlays = function(ids) {
      var idList, link,
        _this = this;
      if (ids.join != null) {
        idList = typeof ids.join === "function" ? ids.join(',') : void 0;
      } else {
        idList = ids;
        ids = ids.split(' ');
      }
      link = "http://www.nhaccuatui.com/wg/get-counter?listSongIds=" + idList;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var id, _i, _len, _q;
          try {
            data = JSON.parse(data);
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              _q = "update " + _this.table.Videos + " SET plays=" + data.data.songs[id] + " where videoid=" + id + ";";
              _this.connection.query(_q, function(err) {
                if (err) {
                  return console.log("Cannot update the total plays of the Video " + id + " into database. ERROR: " + err);
                }
              });
            }
            return data = "";
          } catch (e) {
            return console.log("Video has an error: " + e);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.updateVideosPlays = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Videos).magenta);
      _q = "Select videoid from NCTVideos";
      return this.connection.query(_q, function(err, videos) {
        var a, index, video, _i, _len, _results;
        if (err) {
          return console.log("CANNT get videos from database");
        } else {
          _this.stats.totalItems = videos.length;
          console.log(videos.length + "----------");
          _this.stats.currentTable = _this.table.Videos;
          a = [];
          _results = [];
          for (index = _i = 0, _len = videos.length; _i < _len; index = ++_i) {
            video = videos[index];
            a.push(video.videoid);
            if (index % 1 === 0) {
              _this._updateVideosPlays(a);
              _results.push(a = []);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype._fetchVideoByTopic = function(topicLink, page) {
      var XXXXXXXX, link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = topicLink + page;
      XXXXXXXX = "FAKE VAR";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var arr, durations, i, index, item, thumb, thumbs, video, video_artists, videos, _artist, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _video;
          if (data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g)) {
            arr = data.match(/<a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g);
            videos = [];
            thumbs = [];
            durations = [];
            video_artists = [];
            for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
              item = arr[index];
              if (index % 2 === 0) {
                videos.push(item);
              }
            }
            if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
              thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
              for (i = _j = 0, _len1 = thumbs.length; _j < _len1; i = ++_j) {
                thumb = thumbs[i];
                thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
              }
            } else {
              for (i = _k = 0, _len2 = videos.length; _k < _len2; i = ++_k) {
                video = videos[i];
                thumbs[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no thummbinial");
            }
            if (data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
              video_artists = data.match(/<a\s.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
              for (index = _l = 0, _len3 = video_artists.length; _l < _len3; index = ++_l) {
                _artist = video_artists[index];
                video_artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                  return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<|\>/g, '');
                });
              }
            } else {
              for (i = _m = 0, _len4 = videos.length; _m < _len4; i = ++_m) {
                video = videos[i];
                video_artists[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no artists names");
            }
            if (data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g)) {
              durations = data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g).map(function(v) {
                var time;
                v = v.replace(/<\!\-\-<div\sclass\=\"times\"\>|<\/div\>\-\-\>/g, '').split(':');
                return time = parseInt(v[0], 10) * 60 + parseInt(v[1], 10);
              });
            } else {
              for (i = _n = 0, _len5 = videos.length; _n < _len5; i = ++_n) {
                video = videos[i];
                durations[i] = '';
              }
            }
            _this.stats.passedItemCount += 1;
            for (index = _o = 0, _len6 = videos.length; _o < _len6; index = ++_o) {
              video = videos[index];
              _video = {};
              if (video.match(/<a.+\.html\"\stitle\=/g)) {
                _video.video_key = video.match(/<a.+\.html\"\stitle\=/g)[0].replace(/\.html|\"\stitle\=/g, '').replace(/<a.+\./, '');
              } else {
                _video.video_key = '';
              }
              if (video.match(/<a\shref.+title\=.+\"\>/)) {
                _video.video_name = encoder.htmlDecode(video.match(/<a\shref.+title\=.+\"\>/)[0].replace(/<a\shref.+title\=\"|\"\>/g, ''));
              } else {
                _video.video_name = '';
              }
              _video.thumbnail = thumbs[index];
              _video.video_artists = JSON.stringify(video_artists[index]);
              _video.duration = durations[index];
              if (_video.thumbnail) {
                if (_video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                  _video.created = _video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
                } else if (_video.thumbnail.match(/\d{4}_\d{2}\//g)) {
                  _video.created = _video.thumbnail.match(/\d{4}_\d{2}\//g)[0].replace(/_/g, ':').replace(/\//g, '');
                  _video.created += ":01";
                }
              }
              _this.connection.query(_this.query._insertIntoNCTVideos, _video, function(err) {
                if (err) {
                  return console.log(("Cannot insert video:" + _video.videoid + " to table. ERROR: " + err).red);
                }
              });
            }
          }
          data = "";
          _this.utils.printRunning(_this.stats);
          if (_this.stats.totalItemCount === _this.stats.totalItems) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.fetchVideoByTopic = function() {
      var page, topic, topics, url, _i, _j, _len;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching albums'data  to table: " + this.table.Videos).magenta);
      topics = "the-loai-khac".split(' ');
      url = "http://www.nhaccuatui.com/mv/";
      this.stats.totalItems = 123617263187;
      this.stats.currentTable = this.table.Videos;
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        for (page = _j = 1; _j <= 34; page = ++_j) {
          this._fetchVideoByTopic(link1, page);
          this._fetchVideoByTopic(link2, page);
        }
      }
      return null;
    };

    Nhaccuatui.prototype._updateAlbumsAndSongs = function(topicLink, page) {
      var XXXXXXXX, link,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = topicLink + page;
      XXXXXXXX = link;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album, albumids, albums, artists, i, index, thumb, thumbs, _album, _artist, _fn, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _t;
          if (data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g)) {
            albums = data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/playlist.+/g);
            thumbs = [];
            artists = [];
            if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
              thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
              for (i = _i = 0, _len = thumbs.length; _i < _len; i = ++_i) {
                thumb = thumbs[i];
                thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
              }
            } else {
              for (i = _j = 0, _len1 = albums.length; _j < _len1; i = ++_j) {
                album = albums[i];
                thumbs[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no thumbnail");
            }
            if (data.match(/<a\shref.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
              artists = data.match(/<a\shref.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
              for (index = _k = 0, _len2 = artists.length; _k < _len2; index = ++_k) {
                _artist = artists[index];
                artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                  return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<|\>/g, '');
                });
              }
            } else {
              for (i = _l = 0, _len3 = albums.length; _l < _len3; i = ++_l) {
                album = albums[i];
                artists[i] = '';
              }
              console.log("" + XXXXXXXX + ": current Page: " + page + " has no artists names");
            }
            if (data.match(/NCTCounter_pl_\d+/g)) {
              albumids = data.match(/NCTCounter_pl_\d+/g);
            } else {
              for (i = _m = 0, _len4 = albumids.length; _m < _len4; i = ++_m) {
                album = albumids[i];
                albumids[i] = '0';
              }
            }
            _fn = function(_album) {
              _this.stats.totalItemCount += 1;
              if (_album.albumid > _this.log.maxAlbumId) {
                if (_album.albumid > _this.log.tempMaxAlbumId) {
                  _this.log.tempMaxAlbumId = _album.albumid;
                }
                _this.stats.passedItemCount += 1;
                _this._updateAlbumStatsAndInsertSongs(_album);
              } else {
                _this.stats.failedItemCount += 1;
              }
              _this.utils.printUpdateRunning(_album.album_key, _this.stats, "Fetching...");
              if (_this.stats.totalItemCount === 9590) {
                return _this.utils.printFinalResult(_this.stats);
              }
            };
            for (index = _n = 0, _len5 = albums.length; _n < _len5; index = ++_n) {
              album = albums[index];
              _album = {
                artist: encoder.htmlDecode(JSON.stringify(artists[index])),
                albumid: parseInt(albumids[index].replace(/NCTCounter_pl_/g, ''), 10)
              };
              if (album.match(/<a.+\.html/)) {
                _album.album_key = album.match(/<a.+\.html/)[0].replace(/\.html/g, '').replace(/<a.+\./, '');
              } else {
                _album.album_key = '';
              }
              if (album.match(/title\=.+\"\>/)) {
                _album.title = encoder.htmlDecode(album.match(/title\=.+\"\>/)[0].replace(/title\=\"|\"\>/g, ''));
              } else {
                _album.title = '';
              }
              _album.thumbnail = thumbs[index];
              if (_album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                _album.created = _album.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
              }
              if (_album.thumbnail.match(/\/\d+\.jpg$/g)) {
                _t = new Date(parseInt(_album.thumbnail.match(/\/\d+\.jpg/g)[0].replace(/\/|\.jpg/g, '')));
                _album.created += " " + _t.getHours() + ":" + _t.getMinutes() + ":" + _t.getSeconds();
              }
              _fn(_album);
              _this.utils.printUpdateRunning(_album.album_key, _this.stats, "Fetching...");
            }
          }
          return data = "";
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    /**
    	 * updateAlbumsAndSongs()  
    	 *   _updateAlbumsAndSongs(topic,link) - insert new albums into table
    	 *     _updateAlbumStatsAndInsertSongs() - http://www.nhaccuatui.com/playlist/joke-link.#{album_key}.html
    	 *        _updateAlbumTopic()
    	 *        _updateSongLinkKey() - "http://www.nhaccuatui.com/bai-hat/joke-link.#{song_key}.html"
    	 *            _updateSongPlays() - http://www.nhaccuatui.com/wg/get-counter?listSongIds=#{songid}
    */


    Nhaccuatui.prototype.updateAlbumsAndSongs = function() {
      var link, page, topic, topics, url, _i, _j, _len;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating albums and songs to table: " + this.table.Albums).magenta);
      topics = "playlist-moi nhac-tre tru-tinh cach-mang tien-chien nhac-trinh thieu-nhi rap-viet rock-viet khong-loi au-my han-quoc nhac-hoa nhac-nhat nhac-phim the-loai-khac";
      topics = topics.split(' ');
      url = "http://www.nhaccuatui.com/playlist/";
      if (this.log.tempMaxAlbumId > this.log.maxAlbumId) {
        this.log.maxAlbumId = this.log.tempMaxAlbumId;
      }
      this.stats.currentTable = this.table.Albums;
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        link = url + topic + ".html" + "?sort=1&page=";
        for (page = _j = 1; _j <= 34; page = ++_j) {
          this._updateAlbumsAndSongs(link, page);
        }
      }
      return null;
    };

    Nhaccuatui.prototype._updateSongs_AlbumsTables = function(album) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/playlist/joke-link." + album.album_key + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var index, songs, _i, _len, _song, _songs, _songs_albums, _temp;
          try {
            if (data.match(/rel\=\"\d+\"\skey=.+/g)) {
              _songs = data.match(/rel\=\"\d+\"\skey=.+/g);
              songs = [];
              _this.stats.totalItemCount += 1;
              _this.stats.passedItemCount += 1;
              for (index = _i = 0, _len = _songs.length; _i < _len; index = ++_i) {
                _song = _songs[index];
                _temp = _song.replace(/class.+/g, '');
                _songs_albums = {
                  songid: _temp.match(/rel.+key/g)[0].replace(/rel\=\"|\"\skey/g, ''),
                  albumid: album.albumid
                };
                _this.connection.query(_this.query._insertIntoNCTSongs_Albums, _songs_albums, function(err) {
                  if (err) {
                    return console.log("cannt insert into songs_albums");
                  }
                });
              }
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                _this.utils.printFinalResult(_this.stats);
              }
            } else {
              _songs = '';
            }
            return data = '';
          } catch (e) {
            console.log("ERROR while updating Album Stats And Inserting Songs.... " + e);
            return _this.stats.failedItemCount += 1;
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhaccuatui.prototype.updateSongs_AlbumsTables = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching songs albums to table: " + this.table.Albums).magenta);
      _q = "Select albumid, album_key from " + this.table.Albums;
      return this.connection.query(_q, function(err, albums) {
        var album, _i, _len, _results;
        if (err) {
          return console.log("CANNT get songs albums from database");
        } else {
          _this.stats.totalItems = albums.length;
          _this.stats.currentTable = _this.table.Albums;
          _results = [];
          for (_i = 0, _len = albums.length; _i < _len; _i++) {
            album = albums[_i];
            _results.push(_this._updateSongs_AlbumsTables(album));
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype._updateVideos = function(topicLink, page) {
      var link, _nonsense,
        _this = this;
      if (page == null) {
        page = 1;
      }
      link = topicLink + page;
      _nonsense = "Video";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var durations, i, index, thumb, thumbs, video, video_artists, videos, _artist, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _video;
          if (data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g)) {
            videos = data.match(/<h3\><a\shref\=\"http\:\/\/www\.nhaccuatui\.com\/mv.+/g);
            thumbs = [];
            durations = [];
            video_artists = [];
            if (data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g)) {
              thumbs = data.match(/src\=\"http\:\/\/.+nct\.nixcdn\.com.+\"\swidth/g);
              for (i = _i = 0, _len = thumbs.length; _i < _len; i = ++_i) {
                thumb = thumbs[i];
                thumbs[i] = thumb.replace(/src\=\"|\"\swidth/g, '');
              }
            } else {
              for (i = _j = 0, _len1 = videos.length; _j < _len1; i = ++_j) {
                video = videos[i];
                thumbs[i] = '';
              }
              console.log("" + _nonsense + ": current Page: " + page + " has no thummbinial");
            }
            if (data.match(/<a\shref.+www\.nhaccuatui\.com\/tim\-kiem.+/g)) {
              video_artists = data.match(/<a\shref.+www\.nhaccuatui\.com\/tim\-kiem.+/g);
              for (index = _k = 0, _len2 = video_artists.length; _k < _len2; index = ++_k) {
                _artist = video_artists[index];
                video_artists[index] = _artist.split(/\>\,\s</g).map(function(v) {
                  return v.replace(/a\shref.+_blank\"\>|\/a|<\/p\>|<|\>/g, '');
                });
              }
            } else {
              for (i = _l = 0, _len3 = videos.length; _l < _len3; i = ++_l) {
                video = videos[i];
                video_artists[i] = '';
              }
              console.log("" + _nonsense + ": current Page: " + page + " has no artists names");
            }
            if (data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g)) {
              durations = data.match(/<\!\-\-<div\sclass\=\"times\"\>.+/g).map(function(v) {
                var time;
                v = v.replace(/<\!\-\-<div\sclass\=\"times\"\>|<\/div\>\-\-\>/g, '').split(':');
                return time = parseInt(v[0], 10) * 60 + parseInt(v[1], 10);
              });
            } else {
              for (i = _m = 0, _len4 = videos.length; _m < _len4; i = ++_m) {
                video = videos[i];
                durations[i] = '';
              }
            }
            for (index = _n = 0, _len5 = videos.length; _n < _len5; index = ++_n) {
              video = videos[index];
              _video = {};
              if (video.match(/<h3\><a.+\.html\"\stitle\=/g)) {
                _video.video_key = video.match(/<h3\><a.+\.html\"\stitle\=/g)[0].replace(/<h3\>|\.html|\"\stitle\=/g, '').replace(/<a.+\./, '');
              } else {
                _video.video_key = '';
              }
              if (video.match(/<a\shref.+title\=.+\"\>/)) {
                _video.video_name = encoder.htmlDecode(video.match(/<a\shref.+title\=.+\"\>/)[0].replace(/<a\shref.+title\=\"|\"\>/g, ''));
              } else {
                _video.video_name = '';
              }
              _video.thumbnail = thumbs[index];
              _video.video_artists = JSON.stringify(video_artists[index]);
              _video.duration = durations[index];
              if (_video.thumbnail) {
                if (_video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)) {
                  _video.created = _video.thumbnail.match(/\d{4}\/\d{2}\/\d{2}/g)[0].replace(/\//g, '-');
                } else if (_video.thumbnail.match(/\d{4}_\d{2}\//g)) {
                  _video.created = _video.thumbnail.match(/\d{4}_\d{2}\//g)[0].replace(/_/g, ':').replace(/\//g, '');
                  _video.created += ":01";
                }
              }
              _this._printUpdateAlbum("Fetching pages...");
              if (new Date(_video.created) > new Date(_this.log.lastVideoUpdatedDate)) {
                if (new Date(_video.created) > new Date(_this.log.tempLastVideoUpdatedDate)) {
                  _this.log.tempLastVideoUpdatedDate = _video.created;
                  _this._writeLog(_this.log);
                }
                _this.stats.totalItems += 1;
                _this._updateVideoLinkKey(_video);
              }
            }
          }
          return data = "";
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.updateVideos = function() {
      var link, page, topic, topics, url, _i, _j, _len;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating albums'data  to table: " + this.table.Videos).magenta);
      topics = "video-moi viet-nam au-my han-quoc nhac-nhat nhac-hoa shining-show sea-show house-of-dreams the-loai-khac".split(' ');
      url = "http://www.nhaccuatui.com/mv/";
      if (new Date(this.log.tempLastVideoUpdatedDate) > new Date(this.log.lastVideoUpdatedDate)) {
        this.log.lastVideoUpdatedDate = this.log.tempLastVideoUpdatedDate;
      }
      this.stats.currentTable = this.table.Videos;
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        link = url + topic + ".html" + "?sort=1&page=";
        for (page = _j = 1; _j <= 42; page = ++_j) {
          this._updateVideos(link, page);
        }
      }
      return null;
    };

    Nhaccuatui.prototype._updateLyrics = function(songid) {
      var link,
        _this = this;
      link = "http://www.nhaccuatui.com/ajax/get-lyric?key=" + songid;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var lyric, _u;
          try {
            _this.stats.totalItemCount += 1;
            if (!data.match(/Hiện\schưa\scó\slời\sbài\shát\snào/)) {
              _this.stats.passedItemCount += 1;
              data = JSON.parse(data);
              lyric = encoder.htmlDecode(data.data.html.replace(/\r|\n|\t/g, '').replace(/<div\sclass\=\"more-add\".+/g, '').replace(/<div.+hidden\;\">|<\/div>/g, '').trim());
              data = "";
              _u = "update " + _this.table.Songs + " set lyric=" + (_this.connection.escape(lyric)) + " where songid=" + songid;
              _this.connection.query(_u, function(err) {
                if (err) {
                  return console.log("Cannt insert lyric of the song: " + songid + ". ERROR: " + err);
                }
              });
            } else {
              _this.stats.failedItemCount += 1;
            }
            _this.utils.printRunning(_this.stats);
            if (_this.stats.totalItemCount === _this.stats.totalItems) {
              return _this.utils.printFinalResult(_this.stats);
            }
          } catch (e) {
            console.log("ERROR while updating Lyric of Song: " + songid + ". ERROR: " + e);
            return _this.stats.failedItemCount += 1;
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhaccuatui.prototype.updateLyrics = function() {
      var _q,
        _this = this;
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Fetching songs lyrics to table: " + this.table.Songs).magenta);
      _q = "Select songid from " + this.table.Songs + " order by songid DESC";
      return this.connection.query(_q, function(err, songs) {
        var song, _i, _len, _results;
        if (err) {
          return console.log("CANNT get songs Songs from database");
        } else {
          _this.stats.totalItems = songs.length;
          console.log("Updating lyrics. N:" + _this.stats.totalItems);
          _this.stats.currentTable = _this.table.Songs;
          _results = [];
          for (_i = 0, _len = songs.length; _i < _len; _i++) {
            song = songs[_i];
            _results.push(_this._updateLyrics(song.songid));
          }
          return _results;
        }
      });
    };

    Nhaccuatui.prototype.showStats = function() {
      return this._printTableStats(NCT_CONFIG.table);
    };

    return Nhaccuatui;

  })(Module);

  module.exports = Nhaccuatui;

}).call(this);
