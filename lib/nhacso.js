// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, Module, NS_CONFIG, Nhacso, Utils, colors, encoder, http, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  NS_CONFIG = {
    table: {
      NSSongs: "NSSongs",
      NSAlbums: "NSAlbums",
      NSSongs_Albums: "NSSongs_Albums",
      NSVideos: "NSVideos"
    },
    logPath: "./log/NSLog.txt"
  };

  Nhacso = (function(_super) {

    __extends(Nhacso, _super);

    function Nhacso(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : NS_CONFIG;
      this.fetchLyrics = __bind(this.fetchLyrics, this);

      this.fetchVideos = __bind(this.fetchVideos, this);

      this.fetchAlbums = __bind(this.fetchAlbums, this);

      this.fetchSongs = __bind(this.fetchSongs, this);

      this.fetchSongsStats = __bind(this.fetchSongsStats, this);

      this.table = this.config.table;
      this.query = {
        _insertIntoNSSongs: "INSERT INTO " + this.table.NSSongs + " SET ?",
        _insertIntoNSAlbums: "INSERT INTO " + this.table.NSAlbums + " SET ?",
        _insertIntoNSSongs_Albums: "INSERT INTO " + this.table.NSSongs_Albums + " SET ?",
        _insertIntoNSVideo: "INSERT INTO " + this.table.NSVideos + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      Nhacso.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Nhacso.prototype._decodeId = function(songId) {
      var a, arr, i, songid, _i, _ref;
      arr = Array.prototype.slice.call(songId.toString());
      arr = arr.map(function(value) {
        return parseInt(value);
      });
      a = [];
      songid = "";
      a[1] = ['bw', 'bg', 'bQ', 'bA', 'aw', 'ag', 'aQ', 'aA', 'Zw', 'Zg'];
      a[2] = ['f', 'e', 'd', 'c', 'b', 'a', 'Z', 'Y', 'X', 'W'];
      a[3] = ['N', 'J', 'F', 'B', 'd', 'Z', 'V', 'R', 't', 'p'];
      a[4] = ['U0', 'Uk', 'UU', 'UE', 'V0', 'Vk', 'VU', 'VE', 'W0', 'Wk'];
      a[5] = ['R', 'Q', 'T', 'S', 'V', 'U', 'X', 'W', 'Z', 'Y'];
      a[6] = ['h', 'l', 'p', 't', 'x', '1', '5', '9', 'B', 'F'];
      a[7] = ['', 'X1', 'XF', 'XV', 'Wl', 'W1', 'WF', 'WV', 'Vl', 'V1'];
      for (i = _i = 1, _ref = arr.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        songid += a[7 - i + 1][arr[i - 1]];
      }
      return songid;
    };

    Nhacso.prototype._storeSong = function(song) {
      var date, ts, _formatedDate, _item,
        _this = this;
      _item = {
        songid: parseInt(song.id[0]),
        totaltime: parseInt(song.totalTime[0]),
        name: song.name[0].trim(),
        mp3link: song.mp3link[0]
      };
      ts = _item.mp3link.match(/\/[0-9]+_/g)[0].replace(/\//, "").replace(/_/, "");
      ts = parseInt(ts) * Math.pow(10, 13 - ts.length);
      date = new Date(ts);
      _formatedDate = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
      _item.created = _formatedDate;
      if (typeof song.artist[0] !== "object") {
        _item.artist = song.artist[0].trim();
        _item.artistid = parseInt(song.artistlink[0].match(/-\d+\.html/)[0].replace("-", "").replace(".html", ""));
      } else {
        _item.artist = 0;
        _item.artistid = 0;
      }
      if (typeof song.author[0] !== "object") {
        _item.author = song.author[0].trim();
        _item.authorid = parseInt(song.authorlink[0].match(/-\d+\.html/)[0].replace("-", "").replace(".html", ""));
      } else {
        _item.author = 0;
        _item.authorid = 0;
      }
      return this.connection.query(this.query._insertIntoNSSongs, _item, function(err) {
        if (err) {
          return console.log("Cannot insert the song into table. ERROR: " + err);
        } else {
          _this._updateSongStats(_item.songid);
          return _this._updateSongBitrate(_item.songid);
        }
      });
    };

    Nhacso.prototype._storeSongStats = function(songs, isFinalStep) {
      var index, song, _i, _item, _len, _query, _results,
        _this = this;
      if (isFinalStep == null) {
        isFinalStep = false;
      }
      _query = "";
      _results = [];
      for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
        song = songs[index];
        _item = {
          id: parseInt(song.SongID),
          plays: parseInt(song.TotalFeel) * 3 + parseInt(song.TotalLike) * 3 + parseInt(song.TotalListen) + parseInt(song.TotalDownload) * 2,
          islyric: parseInt(song.TotalLyric)
        };
        _query += "UPDATE " + this.table.NSSongs + " SET ";
        _query += "plays=" + _item.plays + ", ";
        _query += "islyric=" + _item.islyric + ", ";
        _query += "updated=now()";
        _query += " WHERE songid=" + _item.id + "; ";
        if (_item.islyric > 0) {
          this._updateSongLyric(_item.id);
        }
        if (index === (songs.length - 1)) {
          _results.push(this.connection.query(_query, function(err, results) {
            if (err) {
              console.log("Cannot insert the song's stats into table. ERROR: " + err);
              return console.log(_item.id);
            }
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Nhacso.prototype._storeAlbum = function(id, album) {
      var _album,
        _this = this;
      _album = {
        albumid: id,
        album_name: album.name[0].trim(),
        thumbnail: album.img[0]
      };
      if (typeof album.username[0] !== "object") {
        _album.artist = album.username[0].trim();
        _album.artistid = parseInt(album.userlink[0].match(/-\d+\.html/)[0].replace("-", "").replace(".html", ""));
      } else {
        _album.artist = "";
        _album.artistid = "";
      }
      return this.connection.query(this.query._insertIntoNSAlbums, _album, function(err) {
        if (err) {
          return console.log(err);
        } else {
          _this._updateAlbumTopic(id);
          _this._updateAlbumTotalSongs(id);
          return _this._updateAlbumDescAndIssuedTime(id);
        }
      });
    };

    Nhacso.prototype._storeSongs_Album = function(id, songs) {
      var _songlist,
        _this = this;
      _songlist = [];
      return songs.forEach(function(element, index) {
        var _songid;
        _songid = parseInt(element.id[0]);
        if (!isNaN(_songid)) {
          _songlist[index] = {};
          _songlist[index].songid = _songid;
          _songlist[index].albumid = id;
          return _this.connection.query(_this.query._insertIntoNSSongs_Albums, _songlist[index], function(err) {
            if (err) {
              return console.log(err + "at albumid: " + id + " songid: " + _songlist[index].songid + " is not available");
            }
          });
        }
      });
    };

    Nhacso.prototype._storeVideo = function(video) {
      var date, ts, _formatedDate, _item,
        _this = this;
      ts = video.link.match(/\/[0-9]+_/g)[0].replace(/\//, "").replace(/_/, "");
      ts = parseInt(ts) * Math.pow(10, 13 - ts.length);
      date = new Date(ts);
      _formatedDate = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
      _item = {
        videoid: video.id,
        video_name: video.name.trim(),
        link: video.link,
        sublink: video.sublink,
        thumbnail: video.thumbnail,
        plays: video.plays,
        artist_list: video.artist_list,
        created: _formatedDate
      };
      return this.connection.query(this.query._insertIntoNSVideo, _item, function(err) {
        if (err) {
          return console.log(err + " Videoid: " + video.id + " is not ready");
        }
      });
    };

    Nhacso.prototype._updateAlbum = function(id) {
      var album_id, link,
        _this = this;
      link = "http://nhacso.net/flash/album/xnl/1/uid/X1lWW0NabwIBAw==," + this._decodeId(id);
      album_id = id;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          _this.stats.currentTable = _this.table.NSAlbums + " and " + _this.table.NSSongs_Albums;
          if (data.length !== 39) {
            return _this.parser.parseString(data, function(err, result) {
              var album;
              album = result.music.playlist[0];
              _this.stats.totalItemCount += 1;
              if (album.name[0] !== "Playlist Nhạc Số" && album.img[0].search(/_120x90.(jpg|png)$/g) === -1 && (album.song != null)) {
                _this._storeAlbum(album_id, album);
                _this._storeSongs_Album(album_id, album.song);
                _this.stats.passedItemCount += 1;
              } else {
                _this.stats.failedItemCount += 1;
              }
              _this.log.lastAlbumId += 1;
              _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
              return _this._updateAlbum(id + 1);
            });
          } else {
            _this.log.updated_at = Date.now();
            if (_this.stats.totalItemCount === 0) {
              console.log("Table " + _this.table.NSAlbums + " is up-to-date on: " + (new Date(Date.now())));
            } else {
              _this._writeLog(_this.log);
              _this.utils.printFinalResult(_this.stats);
            }
            _this.resetStats();
            return _this.updateSongs();
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._updateSong = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/flash/song/xnl/1/id/" + this._decodeId(id);
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          return _this.parser.parseString(data, function(err, result) {
            var error, song;
            song = result.music.playlist[0].song[0];
            _this.stats.totalItemCount += 1;
            _this.stats.currentTable = _this.table.NSSongs;
            if (typeof song.id[0] !== "object") {
              _this._storeSong(song);
              _this.stats.passedItemCount += 1;
              _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
              _this.log.lastSongId = id;
              return _this._updateSong(id + 1);
            } else {
              _this.stats.totalItemCount -= 1;
              error = true;
              if (_this.stats.totalItemCount === 0) {
                console.log("Table " + _this.table.NSSongs + " is up-to-date on: " + (new Date(Date.now())));
              } else {
                _this.utils.printFinalResult(_this.stats);
              }
              _this.log.totalPassedSongs = _this.stats.passedItemCount;
              return _this._writeLog(_this.log);
            }
          });
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._updateVideo = function(id) {
      var link, link2, link3, videoData,
        _this = this;
      link = "http://nhacso.net/flash/video/xnl/1/id/" + this._decodeId(id);
      link2 = "http://nhacso.net/video/parse?listIds=" + id;
      link3 = "http://nhacso.net/statistic/videostatistic?listIds=" + id;
      videoData = "";
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          _this.stats.currentId = id;
          _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
          return _this.parser.parseString(data, function(err, result) {
            result = result.data.track[0];
            if (typeof result.id[0] !== "object") {
              videoData = {
                id: result.id[0],
                name: result.name[0].trim(),
                link: result.sourceUrl[0],
                thumbnail: result.thumbnailUrl[0]
              };
              if (typeof result.subUrl[0] !== "object") {
                videoData.sublink = result.subUrl[0];
              } else {
                videoData.sublink = "";
              }
              _this.stats.currentId = id;
              _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
              return http.get(link2, function(res2) {
                var data2;
                data2 = '';
                res2.on('data', function(chunk) {
                  return data2 += chunk;
                });
                return res2.on('end', function() {
                  var arr, i, _i, _ref;
                  data2 = JSON.parse(data2);
                  arr = data2[0].ListArtist.split(',');
                  for (i = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    arr[i] = arr[i].replace(/\<a.+\"\>/, '').replace(/\<\/a\>/, '').trim();
                  }
                  videoData.artist_list = arr.reduce(function(x, y) {
                    return x + "," + y;
                  });
                  _this.stats.currentId = id;
                  _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
                  return http.get(link3, function(res3) {
                    var data3;
                    data3 = '';
                    res3.on('data', function(chunk) {
                      return data3 += chunk;
                    });
                    return res3.on('end', function() {
                      data3 = JSON.parse(data3);
                      _this.stats.totalItemCount += 1;
                      videoData.plays = parseInt(data3.result[id.toString()].TotalView);
                      videoData.plays += parseInt(data3.result[id.toString()].TotalLike) * 3;
                      videoData.plays += parseInt(data3.result[id.toString()].TotalComment) * 3;
                      videoData.plays += parseInt(data3.result[id.toString()].TotalDownload) * 3;
                      _this.stats.passedItemCount += 1;
                      _this.stats.currentId = id;
                      _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
                      _this._storeVideo(videoData);
                      _this.log.lastVideoId = id;
                      return _this._updateVideo(id + 1);
                    });
                  }).on('error', function(e) {
                    console.log("Got error: " + e.message);
                    return _this.stats.failedItemCount += 1;
                  });
                });
              }).on('error', function(e) {
                console.log("Got error: " + e.message);
                return _this.stats.failedItemCount += 1;
              });
            } else {
              if (_this.stats.totalItemCount === 0) {
                console.log("");
                console.log("Video is up-to-date".magenta);
              } else {
                _this.stats.failedItemCount += 1;
                _this._writeLog(_this.log);
                _this.utils.printFinalResult(_this.stats);
              }
              return _this.connection.end();
            }
          });
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._fetchItem = function(id, type) {
      var link,
        _this = this;
      if (type === "song") {
        link = "http://nhacso.net/flash/song/xnl/1/id/" + this._decodeId(id);
      } else if (type === "album") {
        link = "http://nhacso.net/flash/album/xnl/1/uid/X1lWW0NabwIBAw==," + this._decodeId(id);
      }
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          return _this.parser.parseString(data, function(err, result) {
            var song, _album;
            if (type === "song") {
              _this.stats.currentTable = _this.table.NSSongs;
              song = result.music.playlist[0].song[0];
              _this.stats.totalItemCount += 1;
              if (typeof song.id[0] !== "object") {
                _this._storeSong(song);
                _this.stats.passedItemCount += 1;
              } else {
                _this.stats.failedItemCount += 1;
              }
            } else if (type === "album") {
              _this.stats.currentTable = _this.table.NSAlbums + " and " + _this.table.NSSongs_Albums;
              _album = result.music.playlist[0];
              _this.stats.totalItemCount += 1;
              if (_album.name[0] !== "Playlist Nhạc Số" && (_album.song != null)) {
                _this._storeAlbum(id, _album);
                _this._storeSongs_Album(id, _album.song);
                _this.stats.passedItemCount += 1;
              } else {
                _this.stats.failedItemCount += 1;
              }
            }
            if (_this.stats.totalItemCount % Math.ceil(0.0001 * _this.stats.totalItems) === 0) {
              _this.stats.currentId = id;
              _this.utils.printRunning(_this.stats);
            }
            if (_this.stats.totalItemCount === _this.stats.totalItems) {
              _this.utils.printFinalResult(_this.stats);
              return _this.connection.end();
            }
          });
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._fetchVideo = function(videoid) {
      var id, link, link2, link3, videoData,
        _this = this;
      id = videoid;
      link = "http://nhacso.net/flash/video/xnl/1/id/" + id;
      link2 = "http://nhacso.net/video/parse?listIds=" + id;
      link3 = "http://nhacso.net/statistic/videostatistic?listIds=" + id;
      videoData = "";
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          _this.stats.currentId = videoid;
          _this.utils.printRunning(_this.stats);
          return _this.parser.parseString(data, function(err, result) {
            result = result.data.track[0];
            if (typeof result.id[0] !== "object") {
              videoData = {
                id: result.id[0],
                name: result.name[0].trim(),
                link: result.sourceUrl[0],
                thumbnail: result.thumbnailUrl[0]
              };
              if (typeof result.subUrl[0] !== "object") {
                videoData.sublink = result.subUrl[0];
              } else {
                videoData.sublink = "";
              }
              _this.stats.currentId = videoid;
              _this.utils.printRunning(_this.stats);
              return http.get(link2, function(res2) {
                var data2;
                data2 = '';
                res2.on('data', function(chunk) {
                  return data2 += chunk;
                });
                return res2.on('end', function() {
                  var arr, i, _i, _ref;
                  data2 = JSON.parse(data2);
                  arr = data2[0].ListArtist.split(',');
                  for (i = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    arr[i] = arr[i].replace(/\<a.+\"\>/, '').replace(/\<\/a\>/, '').trim();
                  }
                  videoData.artist_list = arr.reduce(function(x, y) {
                    return x + "," + y;
                  });
                  _this.stats.currentId = videoid;
                  _this.utils.printRunning(_this.stats);
                  return http.get(link3, function(res3) {
                    var data3;
                    data3 = '';
                    res3.on('data', function(chunk) {
                      return data3 += chunk;
                    });
                    return res3.on('end', function() {
                      data3 = JSON.parse(data3);
                      _this.stats.totalItemCount += 1;
                      videoData.plays = parseInt(data3.result[id.toString()].TotalView);
                      videoData.plays += parseInt(data3.result[id.toString()].TotalLike) * 3;
                      videoData.plays += parseInt(data3.result[id.toString()].TotalComment) * 3;
                      videoData.plays += parseInt(data3.result[id.toString()].TotalDownload) * 3;
                      _this.stats.passedItemCount += 1;
                      _this.stats.currentId = videoid;
                      _this.utils.printRunning(_this.stats);
                      _this._storeVideo(videoData);
                      if (_this.stats.totalItemCount === _this.stats.totalItems) {
                        return _this.utils.printFinalResult(_this.stats);
                      }
                    });
                  }).on('error', function(e) {
                    console.log("Got error: " + e.message);
                    return _this.stats.failedItemCount += 1;
                  });
                });
              }).on('error', function(e) {
                console.log("Got error: " + e.message);
                return _this.stats.failedItemCount += 1;
              });
            } else {
              return _this.stats.failedItemCount += 1;
            }
          });
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._fetchSongStats = function(id) {
      var finalStep, ids, isFinalStep, link, step, _i, _j, _ref, _ref1, _results, _results1,
        _this = this;
      ids = "";
      finalStep = false;
      isFinalStep = false;
      this.currentStep += 1;
      if (this.currentStep !== this.totalSteps) {
        ids = (function() {
          _results = [];
          for (var _i = id, _ref = id + this.step - 1; id <= _ref ? _i <= _ref : _i >= _ref; id <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).join(',');
        step = this.step;
      } else {
        finalStep = this.stats.totalItems - ((this.totalSteps - 1) * this.step);
        step = finalStep;
        isFinalStep = true;
        ids = (function() {
          _results1 = [];
          for (var _j = id, _ref1 = id + finalStep - 1; id <= _ref1 ? _j <= _ref1 : _j >= _ref1; id <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this).join(',');
      }
      link = "http://nhacso.net/statistic/songstatistic?listIds=" + ids;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var songStats;
          songStats = JSON.parse(data);
          _this.stats.currentTable = _this.table.NSSongs;
          _this.stats.totalItemCount += step;
          if (songStats.error === 0) {
            _this.stats.currentId = id;
            _this.stats.passedItemCount += step;
            _this.utils.printRunning(_this.stats);
            _this._storeSongStats(songStats.result);
          } else {
            _this.stats.failedItemCount += step;
            _this.utils.printRunning(_this.stats);
          }
          if (isFinalStep) {
            return _this.utils.printFinalResult(_this.stats);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._fetchLyrics = function(offset, rows) {
      var _query,
        _this = this;
      _query = "select songid from " + this.table.NSSongs + " where islyric > 0 and lyric is null ORDER BY songid DESC LIMIT " + offset + "," + rows;
      return this.connection.query(_query, function(err, results) {
        var song, _i, _len, _results;
        if (err) {
          return console.log("Error at offset: " + offset + " and rows: " + rows);
        } else {
          if (results.length === 0) {
            console.log(" |" + "The lyrics are up-to-date".magenta);
          }
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            song = results[_i];
            if (results.length < rows) {
              _this.stats.totalItems = results.length;
            }
            _results.push((function(song) {
              var link;
              link = "http://nhacso.net/song/lyric?song_id=" + song.songid;
              return song.lyric = http.get(link, function(res) {
                var data;
                res.setEncoding('utf8');
                data = '';
                res.on('data', function(chunk) {
                  return data += chunk;
                });
                return res.on('end', function() {
                  var id, _insertLyric;
                  _this.stats.totalItemCount += 1;
                  id = song.songid;
                  _this.temp.count += 1;
                  data = data.replace(/\r/g, '');
                  data = data.match(/\<p\sclass=\"desc\"\>.+/)[0].replace(/\sclass="desc"/, '');
                  _insertLyric = "UPDATE " + _this.table.NSSongs + " SET lyric = " + (_this.connection.escape(data)) + " where songid = " + id + ";";
                  _this.stats.passedItemCount += 1;
                  return _this.connection.query(_insertLyric, function(err) {
                    if (err) {
                      console.log("Cannot update lyric of songid: " + song.songid + ". ERROR: " + err);
                    } else {
                      _this.stats.currentId = song.songid;
                      _this.utils.printRunning(_this.stats);
                    }
                    if (_this.temp.count === _this.stats.totalItems) {
                      _this.utils.printFinalResult(_this.stats);
                      return _this.connection.end();
                    }
                  });
                });
              }).on('error', function(e) {
                console.log("Got error: " + e.message);
                return _this.stats.failedItemCount += 1;
              });
            })(song));
          }
          return _results;
        }
      });
    };

    Nhacso.prototype._updateAlbumTopic = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/nghe-album/ab." + (this._decodeId(id)) + ".html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _insertTopic, _item;
          if (res.headers.location !== "http://nhacso.net/404") {
            data = data.replace(/\r/g, '');
            _item = {
              id: id
            };
            _item.topic = data.match(/\<li\sclass\=\"bg\".+\<\/li\>/)[0].replace(/\<li\sclass\=\"bg\"\>\<a\shref\s\=\"http\:\/\/nhacso\.net\/.+\"\>/, '').replace(/\<\/a\>\<\/li\>/, '').trim();
            data = "";
            _insertTopic = "UPDATE " + _this.table.NSAlbums + " SET topic = " + (_this.connection.escape(_item.topic)) + " where albumid = " + _item.id + ";";
            return _this.connection.query(_insertTopic, function(err) {
              if (err) {
                return console.log(("Albumid:" + _item.id + " has errors. Error:" + err).red);
              }
            });
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhacso.prototype._updateAlbumDescAndIssuedTime = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/album/getdescandissuetime?listIds=" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _item, _updateDesc;
          data = JSON.parse(data);
          data = data.result[0];
          try {
            _item = {
              id: data.AlbumID,
              issuedAt: data.IssueTime,
              desc: data.AlbumDesc
            };
            _item.desc = encoder.htmlDecode(_item.desc);
            if (_item.desc.search("thưởng thức nhạc chất lượng cao và chia sẻ cảm xúc với bạn bè tại Nhacso.net") > -1) {
              _item.desc = "";
            }
          } catch (e) {
            console.log("Cannot update album description. ERROR: albumid: " + _item.id + " ");
          }
          _updateDesc = ("UPDATE " + _this.table.NSAlbums + " SET description = " + (_this.connection.escape(_item.desc)) + ",") + (" released_date=" + (_this.connection.escape(_item.issuedAt)) + " where albumid = " + _item.id + ";");
          return _this.connection.query(_updateDesc, function(err) {
            if (err) {
              return console.log(("Albumid:" + _item.id + " has errors. Error:" + err).red);
            }
          });
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhacso.prototype._updateAlbumTotalSongs = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/album/gettotalsong?listIds=" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var strId, _item, _query;
          data = JSON.parse(data);
          data = data.result;
          _query = "";
          try {
            strId = "nsn:album:total:song:id:" + id;
            _item = {
              id: data[strId].AlbumID,
              totalSongs: data[strId].TotalSong
            };
            _query = "UPDATE " + _this.table.NSAlbums + " SET total_songs = " + _item.totalSongs + " where albumid = " + _item.id + ";";
            return _this.connection.query(_query, function(err) {
              if (err) {
                return console.log(("Albumid:" + _item.id + " has errors. Error:" + err).red);
              }
            });
          } catch (e) {
            return console.log(("Cannot update total_songs of the album: " + id + ".ERROR: ") + strId);
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Nhacso.prototype._updateSongStats = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/statistic/songstatistic?listIds=" + id;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var songStats;
          songStats = JSON.parse(data);
          if (songStats.error === 0) {
            return _this._storeSongStats(songStats.result);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhacso.prototype._updateSongBitrate = function(songid) {
      var link,
        _this = this;
      link = "http://nhacso.net/nghe-nhac/link-joke." + (this._decodeId(songid)) + "==.html";
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var bitrate, official, topic, _q;
          if (data.match(/\d+kb\/s/g)) {
            bitrate = data.match(/\d+kb\/s/g)[0].replace(/kb\/s/g, '');
            if (data.match(/official/g)) {
              official = true;
            } else {
              official = false;
            }
            if (data.match(/<li><a\shref\=\"http\:\/\/nhacso\.net\/the-loai.+/g)) {
              topic = data.match(/<li><a\shref\=\"http\:\/\/nhacso\.net\/the-loai.+/g)[0].replace(/^.+\">|<\/a><\/li>/g, '').trim();
            } else {
              topic = '';
            }
            data = '';
            _q = "update NSSongs set bitrate=" + bitrate + ", official=" + official + ", topic=" + (_this.connection.escape(topic)) + "  where songid=" + songid;
            return _this.connection.query(_q, function(err) {
              if (err) {
                return console.log("cannt update birate. ERROR: " + err);
              }
            });
          }
        });
      }).on('error', function(e) {
        return console.log("Got error while updating bitrate: " + e.message);
      });
    };

    Nhacso.prototype._updateSongLyric = function(id) {
      var link,
        _this = this;
      link = "http://nhacso.net/song/lyric?song_id=" + id;
      return http.get(link, function(res) {
        var data;
        res.setEncoding('utf8');
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var _insertLyric;
          data = data.replace(/\r/g, '');
          data = data.match(/\<p\sclass=\"desc\"\>.+/)[0].replace(/\sclass="desc"/, '');
          _insertLyric = "UPDATE " + _this.table.NSSongs + " SET lyric = " + (_this.connection.escape(data)) + " where songid = " + id + ";";
          return _this.connection.query(_insertLyric, function(err) {
            if (err) {
              return console.log("Cannot update lyric of songid: " + song.songid + ". ERROR: " + err);
            }
          });
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Nhacso.prototype.fetchSongsStats = function(range0, range1) {
      var id, _i, _ref, _ref1;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching statistics of songid: " + range0 + ".." + range1 + " to table: " + this.table.NSSongs).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      this.step = 50;
      this.currentStep = 0;
      if (this.stats.totalItems % this.step === 0) {
        this.totalSteps = this.stats.totalItems / this.step;
      } else {
        this.totalSteps = Math.floor(this.stats.totalItems / this.step) + 1;
      }
      for (id = _i = range0, _ref1 = this.step; range0 <= range1 ? _i <= range1 : _i >= range1; id = _i += _ref1) {
        this._fetchSongStats(id);
      }
      return null;
    };

    Nhacso.prototype.fetchSongs = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      console.log(" |" + ("Fetching songid: " + range0 + ".." + range1 + " to table: " + this.table.NSSongs).magenta);
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchItem(id, "song");
      }
      return null;
    };

    Nhacso.prototype.fetchAlbums = function(range0, range1) {
      var id, _i, _ref;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      this.stats.totalItems = range1 - range0 + 1;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      console.log(" |" + ("Fetching albumid: " + range0 + ".." + range1 + " to table: " + this.table.NSAlbums).magenta);
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        this._fetchItem(id, "album");
      }
      return null;
    };

    Nhacso.prototype.fetchVideos = function(range0, range1) {
      var id, _fn, _i, _ref,
        _this = this;
      if (range0 == null) {
        range0 = 0;
      }
      if (range1 == null) {
        range1 = 0;
      }
      this.connect();
      this.stats.totalItems = range1 - range0 + 1;
      this.stats.currentTable = this.table.NSVideos;
      _ref = [range0, range1], this.stats.range0 = _ref[0], this.stats.range1 = _ref[1];
      console.log(" |" + ("Fetching videoid: " + range0 + ".." + range1 + " to table: " + this.table.NSVideos).magenta);
      _fn = function() {
        return _this._fetchVideo(id);
      };
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _fn();
      }
      return null;
    };

    Nhacso.prototype.fetchLyrics = function(amount, repetition) {
      var i, _i, _initialOffset, _ref, _results, _rows,
        _this = this;
      if (amount == null) {
        amount = 0;
      }
      if (repetition == null) {
        repetition = 0;
      }
      this.connect();
      _rows = amount;
      _initialOffset = 0;
      this.temp = {
        step: repetition,
        count: 0
      };
      this.stats.totalItems = this.temp.step * _rows;
      this.stats.currentTable = this.table.NSSongs;
      console.log(" |" + ("Fetching songs which have lyrics. Rows: " + (_initialOffset + 1) + ".." + (_initialOffset + this.stats.totalItems) + " to table: " + this.table.NSSongs).magenta);
      _results = [];
      for (i = _i = 1, _ref = this.temp.step; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push((function(i) {
          var _offset;
          _offset = _initialOffset + (i - 1) * _rows;
          return _this._fetchLyrics(_offset, _rows);
        })(i));
      }
      return _results;
    };

    Nhacso.prototype.updateSongs = function() {
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Songs to table: " + this.table.NSSongs).magenta);
      return this._updateSong(this.log.lastSongId + 1);
    };

    Nhacso.prototype.update = function() {
      this.connect();
      console.log("Running on: " + (new Date(Date.now())));
      console.log(" |" + ("Updating Albums to table: " + this.table.NSAlbums).magenta);
      return this._updateAlbum(this.log.lastAlbumId + 1);
    };

    Nhacso.prototype.updateVideos = function() {
      this.connect();
      this._readLog();
      return this._updateVideo(this.log.lastVideoId + 1);
    };

    Nhacso.prototype.updateLyrics = function() {
      return this.fetchLyrics(100, 1);
    };

    Nhacso.prototype.showStats = function() {
      return this._printTableStats(NS_CONFIG.table);
    };

    return Nhacso;

  })(Module);

  module.exports = Nhacso;

}).call(this);
