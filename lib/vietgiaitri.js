// Generated by CoffeeScript 1.4.0
(function() {
  var Site, VietGiaitri, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Site = require("./Site");

  fs = require('fs');

  VietGiaitri = (function(_super) {

    __extends(VietGiaitri, _super);

    function VietGiaitri() {
      VietGiaitri.__super__.constructor.call(this, "VG");
    }

    VietGiaitri.prototype.fetchSongs = function() {
      var callbackOnFail, callbackOnSucess, id, link, options, range0, range1, _fn, _i, _ref, _results,
        _this = this;
      this.showStartupMessage("Fetching Songs from table", this.table.Songs);
      _ref = [100001, 110000], range0 = _ref[0], range1 = _ref[1];
      this.connect();
      this.stats.totalItems = range1 - range0 + 1;
      console.log("The # of items is " + this.stats.totalItems);
      _fn = function(id) {};
      _results = [];
      for (id = _i = range0; range0 <= range1 ? _i <= range1 : _i >= range1; id = range0 <= range1 ? ++_i : --_i) {
        _fn(id);
        link = "http://nhac.vietgiaitri.com/bai-hat/joke-link-" + id + ".vgt";
        options = {
          id: id
        };
        callbackOnSucess = function(data, options) {
          var _callbackOnFail, _callbackOnSuccess, _fields, _item, _link, _options, _ref1, _ref2, _ref3, _ref4, _table;
          try {
            _this.stats.totalItemCount++;
            if (data.search(/Xin lỗi không tồn tại bài hát này/) === -1) {
              data = JSON.stringify(data);
              _item = {
                id: options.id
              };
              _this.stats.currentId = _item.id;
              _item.name = (_ref1 = data.match(/javascript:togglecategory\(\'player\'\,1\).+menu_build_menu/g)) != null ? _ref1[0] : void 0;
              if (_item.name !== void 0) {
                _item.name = _this.processStringorArray(_item.name.replace(/<\/div>\\n\\t<\/div>\\n<script.+$/g, '').replace(/^.+>/g, ''));
              }
              _table = (_ref2 = data.match(/menu_build_menu.+VGT_Music_Player/g)) != null ? _ref2[0] : void 0;
              if (_table !== void 0) {
                _table = _table.replace(/\\r/g, '\r').replace(/\\n/g, '\n').replace(/\\t/g, '\t');
                _fields = _table.match(/row2.+/g);
                if (_fields.length > 7) {
                  _item.authors = _fields[0].replace(/<\/a>.+$/g, '').replace(/^.+>/g, '').trim();
                  if (_item.authors !== "Chưa có" && _item.authors !== "Không biết" && _item.authors !== "không biết") {
                    _item.authors = _this.processStringorArray(_item.authors.split(" - "));
                  } else {
                    _item.authors = "";
                  }
                  _item.created = _this.formatDate(new Date(_fields[1].replace(/<\/td>.+$/g, '').replace(/^.+>/g, '')));
                  _item.artists = _fields[2].replace(/<\/a>.+$/g, '').replace(/^.+>/g, '').trim();
                  if (_item.artists !== "Chưa có" && _item.artists !== "Không biết" && _item.artists !== "không biết") {
                    _item.artists = _this.processStringorArray(_item.artists.split(" - "));
                  } else {
                    _item.artists = "";
                  }
                  _item.plays = _fields[6].replace(/<\/td>/g, '').replace(/^.+>/g, '');
                  _item.topic = _this.processStringorArray(_fields[7].split('br>').map(function(v) {
                    return v.replace(/<\/a>.+$/g, '').replace(/^.+>/g, '');
                  }));
                }
              }
              _link = (_ref3 = data.match(/flashvars\=.+repeat\=/g)) != null ? _ref3[0] : void 0;
              if (_link !== void 0) {
                _link = decodeURIComponent((_ref4 = _link.match(/http.+$/)) != null ? _ref4[0] : void 0);
              }
              data = '';
              _options = {
                item: _item
              };
              _callbackOnSuccess = function(data, _options) {
                try {
                  return _this.parser.parseString(data, function(err, result) {
                    _options.item.link = result.playlist.trackList[0].track[0].location[0];
                    return _this.connection.query(_this.query._insertIntoSongs, _options.item, function(error) {
                      if (error) {
                        return console.log("cannt insert songs into table. ERROR: " + error);
                      }
                    });
                  });
                } catch (e) {
                  return _this.stats.failedItemCount++;
                }
              };
              _callbackOnFail = function(err) {
                console.log(err);
                return _this.stats.failedItemCount++;
              };
              _this.getFileByHTTP(_link, _callbackOnSuccess, _callbackOnFail, _options);
              _this.stats.passedItemCount++;
              _this.utils.printRunning(_this.stats);
              if (_this.stats.totalItemCount === _this.stats.totalItems) {
                return _this.utils.printFinalResult(_this.stats);
              }
            } else {
              return _this.stats.failedItemCount++;
            }
          } catch (e) {
            return _this.stats.failedItemCount++;
          }
        };
        callbackOnFail = function(ErrorMessage) {
          console.log(ErrorMessage);
          return _this.stats.failedItemCount++;
        };
        _results.push(this.getFileByHTTP(link, callbackOnSucess, callbackOnFail, options));
      }
      return _results;
    };

    return VietGiaitri;

  })(Site);

  module.exports = VietGiaitri;

}).call(this);
