// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, GM_CONFIG, Gomusic, Module, Utils, colors, encoder, fs, http, xml2js,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  fs = require('fs');

  xml2js = require('xml2js');

  Module = require('./module');

  Utils = require('./utils');

  colors = require('colors');

  Encoder = require('node-html-encoder').Encoder;

  encoder = new Encoder('entity');

  GM_CONFIG = {
    table: {
      GMSongs: "GMSongs",
      GMAlbums: "GMAlbums",
      GMSongs_Albums: "GMSongs_Albums"
    },
    logPath: "./log/GMLog.txt"
  };

  Gomusic = (function(_super) {

    __extends(Gomusic, _super);

    function Gomusic(mysqlConfig, config) {
      this.mysqlConfig = mysqlConfig;
      this.config = config != null ? config : GM_CONFIG;
      this.table = this.config.table;
      this.query = {
        _insertIntoGMSongs: "INSERT INTO " + this.table.GMSongs + " SET ?",
        _insertIntoGMAlbums: "INSERT INTO " + this.table.GMAlbums + " SET ?",
        _insertIntoGMSongs_Albums: "INSERT INTO " + this.table.GMSongs_Albums + " SET ?"
      };
      this.utils = new Utils();
      this.parser = new xml2js.Parser();
      Gomusic.__super__.constructor.call(this, this.mysqlConfig);
      this.logPath = this.config.logPath;
      this.log = {};
      this._readLog();
    }

    Gomusic.prototype._storeSong = function(song) {
      var _createTime, _item, _updateTime;
      try {
        _createTime = song.CreateTime.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
        _createTime += song.CreateTime.match(/[0-9]+\//g)[1].replace(/\//g, '') + "-";
        _createTime += song.CreateTime.match(/[0-9]+\//g)[0].replace(/\//g, '');
        _updateTime = song.UpdateTime.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
        _updateTime += song.UpdateTime.match(/[0-9]+\//g)[1].replace(/\//g, '') + "-";
        _updateTime += song.UpdateTime.match(/[0-9]+\//g)[0].replace(/\//g, '');
      } catch (e) {
        console.log("");
        console.log("Error while creating Record of Column CreateTime and UpdateTime ");
      }
      _item = {
        SongId: song.Id,
        SongName: song.Name.trim(),
        ArtistId: song.ArtistId,
        ArtistName: song.ArtistName.trim(),
        ArtistDisplayName: song.ArtistDisplayName.trim(),
        TopicId: song.TopicId,
        TopicName: song.TopicName.trim(),
        GenreId: song.GenreId,
        GenreName: song.GenreName.trim(),
        RegionId: song.RegionId,
        RegionName: song.RegionName.trim(),
        Thumbnail: song.Thumbnail,
        Tags: song.Tags,
        Lyric: encoder.htmlDecode(song.Lyric),
        FilePath: song.FilePath,
        Bitrate: song.Bitrate,
        Duration: song.Duration,
        FileSize: song.FileSize,
        PlayCount: song.PlayCount + song.CommentCount * 3 + song.LikeCount * 3 + song.DownloadCount * 2,
        CreateTime: _createTime,
        UpdateTime: _updateTime
      };
      return this.connection.query(this.query._insertIntoGMSongs, _item, function(err) {
        if (err) {
          return console.log("Cannot insert the song into table. ERROR: " + err);
        }
      });
    };

    Gomusic.prototype._storeAlbum = function(album) {
      var _album, _createTime, _releaseDate, _tempAl, _updateTime,
        _this = this;
      _createTime = album.CreateTime.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
      _createTime += album.CreateTime.match(/[0-9]+\//g)[1].replace(/\//g, '') + "-";
      _createTime += album.CreateTime.match(/[0-9]+\//g)[0].replace(/\//g, '');
      _updateTime = album.UpdateTime.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
      _updateTime += album.UpdateTime.match(/[0-9]+\//g)[1].replace(/\//g, '') + "-";
      _updateTime += album.UpdateTime.match(/[0-9]+\//g)[0].replace(/\//g, '');
      if (album.Id === 18429) {
        _tempAl = album.Publisher.trim();
        _tempAl = _tempAl.replace(/\./g, '/');
      } else {
        _tempAl = album.ReleaseDate.trim();
        _tempAl = _tempAl.replace(/\./g, '/');
      }
      if (_tempAl.length > 8) {
        _releaseDate = _tempAl.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
        _releaseDate += _tempAl.match(/[0-9]+\//g)[1].replace(/\//g, '') + "-";
        _releaseDate += _tempAl.match(/[0-9]+\//g)[0].replace(/\//g, '');
      } else if (_tempAl.length > 4) {
        _releaseDate = _tempAl.match(/\/[0-9]+$/g)[0].replace(/\//g, '') + "-";
        _releaseDate += _tempAl.match(/[0-9]+\//g)[0].replace(/\//g, '') + "-01";
      } else {
        _releaseDate = _tempAl + "-01-01";
      }
      _album = {
        AlbumId: album.Id,
        AlbumName: album.Name.trim(),
        MasterArtistId: album.MasterArtistId,
        MasterArtistName: album.MasterArtistName.trim(),
        TopicId: album.TopicId,
        TopicName: album.TopicName.trim(),
        GenreId: album.GenreId,
        GenreName: album.GenreName.trim(),
        RegionId: album.RegionId,
        RegionName: album.RegionName.trim(),
        Duration: album.Duration,
        ReleaseDate: _releaseDate,
        Tags: album.Tags,
        Thumbnail: album.Thumbnail,
        Description: album.Description,
        SongCount: album.SongCount,
        PlayCount: album.PlayCount,
        CreateTime: _createTime,
        UpdateTime: _updateTime
      };
      return this.connection.query(this.query._insertIntoGMAlbums, _album, function(err) {
        if (err) {
          console.log(err);
        } else {
          _this.stats.passedItemCount += 1;
          _this._updateSongs_Albums(_album.AlbumId);
        }
        return _this.utils.printUpdateRunning(_album.AlbumId, _this.stats, "Fetching...");
      });
    };

    Gomusic.prototype._storeSongs_Album = function(songs) {
      var song, _i, _len, _results, _song;
      _results = [];
      for (_i = 0, _len = songs.length; _i < _len; _i++) {
        song = songs[_i];
        _song = {
          AlbumId: song.AlbumId,
          SongId: song.SongId,
          ArtistId: song.ArtistId,
          Position: song.Position,
          AlbumArtistId: song.AlbumArtistId
        };
        _results.push(this.connection.query(this.query._insertIntoGMSongs_Albums, _song, function(err) {
          if (err) {
            return console.log(err + "at albumid: " + id + " songid: " + _song.SongId + " is not available");
          }
        }));
      }
      return _results;
    };

    Gomusic.prototype._updateSongs_Albums = function(id) {
      var link,
        _this = this;
      link = "http://music.go.vn/Ajax/AlbumHandler.ashx?type=getsongbyalbum&album=" + id;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var songs;
          songs = JSON.parse(data);
          if (songs !== null) {
            return _this._storeSongs_Album(songs);
          }
        });
      }).on('error', function(e) {
        return console.log("Got error: " + e.message);
      });
    };

    Gomusic.prototype._updateAlbum = function(id) {
      var link,
        _this = this;
      link = "http://music.go.vn/Ajax/AlbumHandler.ashx?type=getinfo&album=" + id;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var album;
          album = JSON.parse(data);
          _this.stats.totalItemCount += 1;
          if (album !== null) {
            _this.stats.passedItemCount += 1;
            _this._storeAlbum(album);
            _this.log.lastAlbumId = id;
            return _this._updateAlbum(id + 1);
          } else {
            _this.temp.totalFail += 1;
            _this.stats.failedItemCount += 1;
            _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
            if (_this.temp.totalFail === 100) {
              _this.log.updated_at = Date.now();
              if (_this.stats.passedItemCount !== 0) {
                _this.utils.printFinalResult(_this.stats);
              } else {
                console.log("");
                console.log("Table: " + _this.table.GMAlbums + " is up-to-date");
              }
              return _this._writeLog(_this.log);
            } else {
              return _this._updateAlbum(id + 1);
            }
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return _this.stats.failedItemCount += 1;
      });
    };

    Gomusic.prototype._updateSong = function(id) {
      var link,
        _this = this;
      link = "http://music.go.vn/Ajax/SongHandler.ashx?type=getsonginfo&sid=" + id;
      this.stats.currentTable = this.table.GMSongs;
      return http.get(link, function(res) {
        var data;
        data = '';
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var error, song;
          song = JSON.parse(data);
          _this.stats.totalItemCount += 1;
          if (song !== null) {
            _this._storeSong(song);
            _this.stats.passedItemCount += 1;
            _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
            _this.log.lastSongId = id;
            return _this._updateSong(id + 1);
          } else {
            _this.temp.totalFail += 1;
            _this.stats.failedItemCount += 1;
            _this.utils.printUpdateRunning(id, _this.stats, "Fetching...");
            if (_this.temp.totalFail === 100) {
              error = true;
              if (_this.stats.passedItemCount !== 0) {
                _this.utils.printFinalResult(_this.stats);
              } else {
                console.log("");
                console.log("Table: " + _this.table.GMSongs + " is up-to-date");
              }
              _this.log.totalPassedSongs = _this.stats.passedItemCount;
              _this.resetStats();
              console.log(" |" + ("Updating Albums to table: " + _this.table.GMAlbums).magenta);
              _this.temp.totalFail = 0;
              _this.stats.currentTable = _this.table.GMAlbums;
              return _this._updateAlbum(_this.log.lastAlbumId + 1);
            } else {
              return _this._updateSong(id + 1);
            }
          }
        });
      }).on('error', function(e) {
        console.log("Got error: " + e.message);
        return this.stats.failedItemCount += 1;
      });
    };

    Gomusic.prototype.update = function() {
      this.temp = {};
      this.temp.totalFail = 0;
      this.connect();
      console.log(" |" + ("Updating Songs to table: " + this.table.GMSongs).magenta);
      return this._updateSong(this.log.lastSongId + 1);
    };

    Gomusic.prototype.showStats = function() {
      return this._printTableStats(GM_CONFIG.table);
    };

    Gomusic.prototype.resetTables = function() {
      var _albumid, _query, _songid;
      this.connect();
      this._readLog();
      _songid = 180500;
      _albumid = 18000;
      this.log.lastSongId = _songid;
      this.log.lastAlbumId = _albumid;
      this.log.updated_at = Date.now();
      this._writeLog(this.log);
      _query = "delete from " + this.table.GMSongs + (" where SongId > " + _songid + ";");
      _query += "delete from " + this.table.GMAlbums + (" where AlbumId > " + _albumid + ";");
      _query += "delete from " + this.table.GMSongs_Albums + (" where AlbumId > " + _albumid + ";");
      return this.connection.query(_query, function(err, results) {
        if (err) {
          return console.log("Cannot reset the tables. ERROR: " + err);
        } else {
          return console.log(results);
        }
      });
    };

    return Gomusic;

  })(Module);

  module.exports = Gomusic;

}).call(this);
