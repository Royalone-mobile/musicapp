// Generated by CoffeeScript 1.4.0
(function() {
  var colors, mysqlConfig, readline, rl, runChacha, runGomusic, runKeeng, runMusicVNN, runNghenhac, runNhaccuatui, runNhacso, runNhacvui, runStats, runVietGiaitri, runWithRange, runZing, startingLog;

  readline = require('readline');

  colors = require('colors');

  mysqlConfig = {
    user: 'root',
    password: 'root',
    database: 'anbinh',
    port: '8889',
    multipleStatements: true
  };

  rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  runNhacso = function() {
    var Nhacso, ns, testingConfig;
    Nhacso = require('./lib/nhacso');
    console.log("Running with " + "nhacso.net".inverse.green);
    testingConfig = {
      table: {
        NSSongs: "ns_raw_songs",
        NSAlbums: "ns_raw_albums",
        NSSongs_Albums: "ns_raw_songs_albums",
        NSVideos: "ns_raw_videos"
      },
      logPath: "./log/test_NSLog.txt"
    };
    ns = new Nhacso(mysqlConfig);
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "RESET_SOAL".inverse.red + "- reset songs and albums \t" + "RESET_VIDEO".inverse.red + "- reset video table ");
    console.log("\t" + "stats".inverse.red + "- show stats \t");
    console.log("\t1.UPDATE ALBUMS, SONGS & VIDEOS\t2.fetchTypeSONG\t");
    console.log("\t3.fetchTypeAlbum\t4.fetchMaxTypeSong");
    console.log("\t5.fetchMaxTypeAlbum\t6.............");
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "RESET_SOAL":
          return ns.resetSongsAndAlbumsTable();
        case "RESET_VIDEO":
          return ns.resetVideosTable();
        case "stats":
          return ns.showStats();
        case "1":
          return ns.update();
        case "2":
          return ns.fetchType();
        case "3":
          return ns.fetchTypeAlbum();
        case "4":
          return ns.fetchMaxTypeSong();
        case "5":
          return ns.fetchMaxTypeAlbum();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runGomusic = function() {
    var Gomusic, gm, gmTestingConfig;
    Gomusic = require('./lib/gomusic');
    console.log("Running with " + "music.go.vn".inverse.green);
    gmTestingConfig = {
      table: {
        GMSongs: "gm_raw_songs",
        GMAlbums: "gm_raw_albums",
        GMSongs_Albums: "gm_raw_songs_albums"
      },
      logPath: "./log/test_GMLog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t1.update\t2.reset");
    console.log("\t3.show stats");
    gm = new Gomusic(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "1":
          return gm.update();
        case "2":
          return gm.resetTables();
        case "3":
          return gm.showStats();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runNhacvui = function() {
    var Nhacvui, nv, nvTestingConfig;
    Nhacvui = require('./lib/nhacvui');
    console.log("Running with " + "nhac.vui.vn".inverse.green);
    nvTestingConfig = {
      table: {
        Songs: "nv_raw_songs",
        Albums: "nv_raw_albums",
        Songs_Albums: "nv_raw_songs_albums"
      },
      logPath: "./log/test_NVLog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.UPDATE SONGS & ALBUMS \t2.update albums");
    console.log("\t3.fetch songs\t4.fetch albums");
    console.log("\t5.fetch album's titles \t6.updateSongsStats");
    console.log("\t7.show stats");
    nv = new Nhacvui(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return nv.createTables();
        case "RESET":
          return nv.resetTables();
        case "1":
          return nv.update();
        case "2":
          return nv.updateAlbums();
        case "3":
          return runWithRange(nv.fetchSongs);
        case "4":
          return runWithRange(nv.fetchAlbums);
        case "5":
          return runWithRange(nv.fetchAlbumName);
        case "6":
          return nv.updateSongsStats();
        case "7":
          return nv.showStats();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runKeeng = function() {
    var Keeng, ke, keTestingConfig;
    Keeng = require('./lib/keeng');
    console.log("Running with " + "Keeng.vn".inverse.green);
    keTestingConfig = {
      table: {
        Songs: "ke_raw_songs"
      }
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.update albums+songs\t2.fetch albums+songs");
    console.log("\t3.show stats\t4.fetchVideos");
    console.log("\t5.updateVideos\t6.axxxxxxxxxx");
    ke = new Keeng(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return ke.createTables();
        case "RESET":
          return ke.resetTables();
        case "1":
          return ke.update();
        case "2":
          return runWithRange(ke.fetchAlbums);
        case "3":
          return ke.showStats();
        case "4":
          return runWithRange(ke.fetchVideos);
        case "5":
          return ke.updateVideos();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runChacha = function() {
    var Chacha, cc, ccTestingConfig;
    Chacha = require('./lib/chacha');
    console.log("Running with " + "Chacha.vn".inverse.green);
    ccTestingConfig = {
      table: {
        Songs: "cc_raw_songs",
        Albums: "cc_raw_albums"
      },
      logPath: "./log/test_CCLog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.UPDATE SONGS AND ALBUMS\t2.update albums");
    console.log("\t3.fetch songs\t4.fetch albums");
    console.log("\t5.show stats \t6.getSongsTopic");
    cc = new Chacha(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return cc.createTables();
        case "RESET":
          return cc.resetTables();
        case "1":
          return cc.update();
        case "2":
          return cc.updateAlbums();
        case "3":
          return runWithRange(cc.fetchSongs);
        case "4":
          return runWithRange(cc.fetchAlbums);
        case "5":
          return cc.showStats();
        case "6":
          return cc.getSongsTopic();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runNghenhac = function() {
    var Nghenhac, nn, nnTestingConfig;
    Nghenhac = require('./lib/nghenhac');
    console.log("Running with " + "Nghenhac.info".inverse.green);
    nnTestingConfig = {
      table: {
        Songs: "nn_raw_songs"
      },
      logPath: "./log/test_NNLog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.UPDATE SONGS AND ALBUMS \t2.fetch albums");
    console.log("\t3.fetch songs\t4.show stats");
    console.log("\t5.update songs\t6.update albums");
    nn = new Nghenhac(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return nn.createTables();
        case "RESET":
          return nn.resetTables();
        case "1":
          return nn.update();
        case "2":
          return runWithRange(nn.fetchAlbums);
        case "3":
          return runWithRange(nn.fetchSongs);
        case "4":
          return nn.showStats();
        case "5":
          return nn.updateSongs();
        case "6":
          return nn.updateAlbums();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runZing = function() {
    var Zing, nnTestingConfig, zing;
    Zing = require('./lib/zing');
    console.log("Running with " + "mp3.zing.vn".inverse.green);
    nnTestingConfig = {
      table: {
        Songs: "zi_raw_songs"
      },
      logPath: "./log/test_ZILog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.UPDATE SONGS, ALBUMS & VIDEOS\t2.UPDATE ALBUMS");
    console.log("\t3.UPDATE VIDEOS\t4.UPDATE SONGS WITH RANGE");
    console.log("\t5.UPDATE ALBUMS WITH RANGE");
    zing = new Zing(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return zing.createTables();
        case "RESET":
          return zing.resetTables();
        case "1":
          return zing.update();
        case "2":
          return zing.updateAlbums();
        case "3":
          return zing.updateVideos();
        case "4":
          return runWithRange(zing.updateSongsWithRange);
        case "5":
          return runWithRange(zing.updateAlbumsWithRange);
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runNhaccuatui = function() {
    var Nhaccuatui, nct, nnTestingConfig;
    Nhaccuatui = require('./lib/nhaccuatui');
    console.log("Running with " + "nhaccuatui.com".inverse.green);
    nnTestingConfig = {
      table: {
        Songs: "NCT_raw_songs"
      },
      logPath: "./log/test_NCTLog.txt"
    };
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t" + "CREATE".inverse.red + " tables\t" + "RESET".inverse.red + " tables ");
    console.log("\t1.UPDATE ALBUMS AND SONGS\t2.updateSongsPlay");
    console.log("\t3.fetchArtist\t4.getSongs");
    nct = new Nhaccuatui(mysqlConfig);
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "CREATE":
          return nct.createTables();
        case "RESET":
          return nct.resetTables();
        case "1":
          return nct.updateAlbumsAndSongs();
        case "2":
          return nct.updateSongsPlays();
        case "3":
          return nct.fetchArtist();
        case "4":
          return nct.getSongs();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runMusicVNN = function() {
    var MusicVNN, musicvnn;
    MusicVNN = require('./lib/musicvnn');
    console.log("Running with " + "musicvnn.vn".inverse.green);
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t1.fetchSongs\t2.xxxxxxxxxxxx");
    console.log("\t3.show stats\t4.xxxxxxxxxxx");
    musicvnn = new MusicVNN();
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "1":
          return musicvnn.fetchSongs();
        case "2":
          return runWithRange(musicvnn.xxxxx);
        case "3":
          return musicvnn.showStats();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runVietGiaitri = function() {
    var VietGiaitri, vietGiaitri;
    VietGiaitri = require('./lib/vietgiaitri');
    console.log("Running with " + "vietGiaitri.vn".inverse.green);
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t1.fetchSongs\t2.xxxxxxxxxxxx");
    console.log("\t3.show stats\t4.xxxxxxxxxxx");
    vietGiaitri = new VietGiaitri();
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "1":
          return vietGiaitri.fetchSongs();
        case "2":
          return runWithRange(vietGiaitri.xxxxx);
        case "3":
          return vietGiaitri.showStats();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runStats = function() {
    var Stats, stats;
    Stats = require('./lib/stats');
    console.log("Running with " + "statistics".inverse.green);
    console.log("STEP 2:".inverse.blue + " " + "Choose the type of command:".underline.blue);
    console.log("\t1.fetchTable\t2.xxxxxxxxxxxx");
    console.log("\t3.show stats\t4.xxxxxxxxxxx");
    stats = new Stats();
    return rl.question("=> ", function(answer) {
      switch (answer.trim()) {
        case "1":
          return stats.fetchTable();
        case "2":
          return runWithRange(stats.xxxxx);
        case "3":
          return stats.showStats();
        default:
          return console.log("Wrong type".red);
      }
    });
  };

  runWithRange = function(callback) {
    console.log("STEP 3:".inverse.blue + " " + "Enter range:".underline.blue);
    console.log("Syntax is NUMBER+SPACE_KEY+NUMBER For instance:12323 12323".grey);
    return rl.question("=> ", function(range) {
      var range0, range1;
      if (range.search(/^\d+\s+\d+$/) === 0) {
        range0 = parseInt(range.split(' ')[0]);
        range1 = parseInt(range.split(' ')[1]);
        return callback(range0, range1);
      } else {
        return console.log("Wrong type".red);
      }
    });
  };

  startingLog = function() {
    console.log("STEP 1:".inverse.blue + " " + "Choose the following sites:\n".underline.blue);
    console.log("        " + "1.nhacso.net".inverse.green + "\t" + "2.music.go.vn".inverse.green + "\t" + "3.nhac.vui.vn".inverse.green + "\t" + "4.keeng.vn".inverse.green);
    console.log("");
    console.log("        " + "5.chacha.vn".inverse.green + "\t" + "6.nghenhac.info".inverse.green + "\t" + "7.mp3.zing.vn".inverse.green + "\t" + "8.nhaccuatui.com".inverse.green);
    console.log("");
    console.log("        " + "9.music.vnn.vn".inverse.green + "\t" + "10.nhac.vietgiaitri.com".inverse.green + "\t" + "11. STATISTICS".inverse.green);
    return console.log("        Type 'q' to quit".grey);
  };

  rl.setPrompt('=>', 3);

  startingLog();

  rl.prompt();

  rl.on("line", function(line) {
    switch (line.trim()) {
      case "1":
        runNhacso();
        break;
      case "2":
        runGomusic();
        break;
      case "3":
        runNhacvui();
        break;
      case "4":
        runKeeng();
        break;
      case "5":
        runChacha();
        break;
      case "6":
        runNghenhac();
        break;
      case "7":
        runZing();
        break;
      case "8":
        runNhaccuatui();
        break;
      case "9":
        runMusicVNN();
        break;
      case "10":
        runVietGiaitri();
        break;
      case "11":
        runStats();
        break;
      case "q":
        rl.close();
        break;
      default:
        startingLog();
    }
    return rl.prompt();
  }).on("close", function() {
    console.log("");
    console.log("YOU HAVE LOGGED OUT!".inverse.red);
    return process.exit(0);
  });

}).call(this);
